Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (zip:zipper), main (zip) = mainNew (zip)(rank : 0.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)

---------------------------------------
forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)

---------------------------------------
forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)

---------------------------------------
forall (zipper1:zipper), mpath (repr (ziprec (zipper1))) = mainNew (zipper1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:5.)
=================================================
Progress: 3


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)

---------------------------------------
forall (zipper1:zipper), mpath (repr (ziprec (zipper1))) = mainNew (zipper1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction zipper1(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
mpath (repr (ziprec (Top))) = mainNew (Top)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 4


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
mpath (repr (ziprec (Top))) = mainNew (Top)

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
mpath (repr (ziprec (Left (nat1) (btree1) (zipper2)))) = mainNew (Left (nat1) (btree1) (zipper2))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 5


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
mpath (repr (ziprec (Left (nat1) (btree1) (zipper2)))) = mainNew (Left (nat1) (btree1) (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank:5.)
rewrite IH1 in goal at 0(rank:12.)
rewrite IH1 in goal at 2(rank:12.)
rewrite <- IH1 in goal at 0(rank:12.)
rewrite <- IH1 in goal at 1(rank:12.)
rewrite <- IH1 in goal at 2(rank:12.)
rewrite IH1 in goal at 1(rank:12.)
case lq (mainNew (zipper2)) (treerecNew (btree1))(rank:5.)
=================================================
Progress: 6


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (mainNew (zipper2)) (treerecNew (btree1))(rank:6.)
rewrite IH1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 1(rank:21.)
rewrite <- IH1 in goal at 2(rank:21.)
=================================================
Progress: 7


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree1))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank:6.)
rewrite IH1 in goal at 2(rank:13.)
rewrite IH1 in goal at 0(rank:13.)
rewrite IH1 in goal at 1(rank:13.)
=================================================
Progress: 8


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree1))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 9


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 10


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (mainNew (Right (ZERO) (Node (ZERO) (Empty) (Empty)) (Top))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
case lq (mainNew (zipper2)) (treerecNew (btree1))
parent
plus (nat1) (mpath (repr (ziprec (zipper2))))
lower
plus(_, mpath(repr(ziprec(zipper2))))
upper
_
remove upper
mpath(repr(ziprec(zipper2)))
remove lower
mpath(repr(ziprec(zipper2)))
remove upper
plus(nat1, mpath(repr(ziprec(zipper2))))
remove lower
plus(nat1, mpath(repr(ziprec(zipper2))))
remove upper
plus(nat1, plus(nat2, _))
remove lower
plus(nat1, plus(nat2, _))
remove upper
plus(nat1, plus(nat2, _))
remove lower
plus(nat1, plus(nat2, _))
parent
plus (nat1) (treerecNew (btree1))
lower
plus(_, treerecNew(btree1))
upper
_
remove upper
mainNew(zipper2)
remove lower
mainNew(zipper2)
remove upper
plus(nat1, treerecNew(btree1))
remove lower
plus(nat1, treerecNew(btree1))
remove upper
plus(nat1, treerecNew(btree1))
remove lower
plus(nat1, treerecNew(btree1))
remove upper
plus(nat1, treerecNew(btree1))
remove lower
plus(nat1, treerecNew(btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (mpath (repr (ziprec (Left (ZERO) (Empty) (Left (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty))) (Empty)) (Left (ZERO) (Empty) (Top))))))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 11


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 12


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 13


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (mainNew (zipper2)) (treerecNew (btree1))
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (ZERO))) (mainNew (Top)) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
previous tactics
simpl in goal
case lq (mainNew (zipper2)) (treerecNew (btree1))
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
parent
plus (nat1) (mpath (repr (ziprec (zipper2))))
lower
plus(_, mpath(repr(ziprec(zipper2))))
upper
_
remove upper
mpath(repr(ziprec(zipper2)))
remove lower
mpath(repr(ziprec(zipper2)))
remove upper
plus(nat1, mpath(repr(ziprec(zipper2))))
remove lower
plus(nat1, mpath(repr(ziprec(zipper2))))
remove upper
plus(nat1, plus(nat2, _))
remove lower
plus(nat1, plus(nat2, _))
remove upper
plus(nat1, plus(nat2, _))
remove lower
plus(nat1, plus(nat2, _))
parent
plus (nat1) (treerecNew (btree1))
lower
plus(_, treerecNew(btree1))
upper
_
remove upper
mainNew(zipper2)
remove lower
mainNew(zipper2)
remove upper
plus(nat1, treerecNew(btree1))
remove lower
plus(nat1, treerecNew(btree1))
remove upper
plus(nat1, treerecNew(btree1))
remove lower
plus(nat1, treerecNew(btree1))
remove upper
plus(nat1, treerecNew(btree1))
remove lower
plus(nat1, treerecNew(btree1))
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (mpath (repr (ziprec (Top)))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Empty))))))
Prop: plus (ZERO) (mpath (repr (ziprec (Right (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty)))) (Top))))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 14


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 15


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 16


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 17


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 18


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 19


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 20


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 21


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 22


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 23


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 24


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mpath (repr (ziprec (zipper1)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:12.)
=================================================
Progress: 25


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mpath (repr (ziprec (zipper1)))) = true->false = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:12.)
=================================================
Progress: 26


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 27


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 28


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 29


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 30


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 31


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true -> plus (nat1) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 32


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true -> plus (nat1) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 33


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 34


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH3 in goal at 0(rank:28.)
case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank:11.)
=================================================
Progress: 35


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 36


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true -> plus (nat1) (mainNew (Left (nat3) (btree4) (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 37


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true -> plus (nat1) (mainNew (Left (nat3) (btree4) (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 38


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 39


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH3 in goal at 0(rank:28.)
case lq (mainNew (zipper2)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 40


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank:12.)
=================================================
Progress: 41


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:12.)
rewrite IH1 in goal at 0(rank:21.)
rewrite IH2 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:21.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 42


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (treerecNew (btree4))(rank:12.)
=================================================
Progress: 43


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:12.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 44


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank:5.)
case lq (mainNew (zipper2)) (treerecNew (btree1))(rank:5.)
=================================================
Progress: 45


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (mainNew (zipper2)) (treerecNew (btree1))(rank:6.)
rewrite <- IH1 in goal at 1(rank:13.)
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 2(rank:21.)
rewrite <- IH1 in goal at 3(rank:21.)
=================================================
Progress: 46


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree1))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank:6.)
rewrite <- IH1 in goal at 2(rank:21.)
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 1(rank:21.)
=================================================
Progress: 47


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree1))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:6.)
=================================================
Progress: 48


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:6.)
=================================================
Progress: 49


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
case lq (mainNew (zipper2)) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Right (ZERO) (Empty) (Top))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 50


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 51


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 52


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case lq (mainNew (zipper2)) (treerecNew (btree1))
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (mpath (repr (ziprec (Top)))) = plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Empty)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case lq (mainNew (zipper2)) (treerecNew (btree1))
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (mainNew (Top)) = plus (SUCC (ZERO)) (treerecNew (Empty))
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 53


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 54


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 55


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Empty))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 56


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Empty))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 57


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 58


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 59


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 60


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 61


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 62


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 63


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Empty))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:12.)
=================================================
Progress: 64


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Empty))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:12.)
=================================================
Progress: 65


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 66


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 67


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 68


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 69


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 70


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Left (nat3) (btree4) (zipper2))) = true -> plus (nat1) (mainNew (Left (nat3) (btree4) (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 71


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Left (nat3) (btree4) (zipper2))) = true -> plus (nat1) (mainNew (Left (nat3) (btree4) (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 72


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 73


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH3 in goal at 0(rank:28.)
case lq (mainNew (zipper2)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 74


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 75


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Left (nat3) (btree4) (zipper2))) = true -> plus (nat1) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 76


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Left (nat3) (btree4) (zipper2))) = true -> plus (nat1) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 77


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 78


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH3 in goal at 0(rank:28.)
case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank:11.)
=================================================
Progress: 79


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (treerecNew (btree4))(rank:12.)
=================================================
Progress: 80


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:12.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 81


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank:12.)
=================================================
Progress: 82


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:12.)
rewrite IH1 in goal at 0(rank:21.)
rewrite IH2 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:21.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 83


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 12.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (treerecNew (btree1))(rank:5.)
=================================================
Progress: 84


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree1))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank:6.)
rewrite IH1 in goal at 0(rank:13.)
rewrite <- IH1 in goal at 0(rank:21.)
=================================================
Progress: 85


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 86


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
case lq (mainNew (zipper2)) (treerecNew (btree1))
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite IH1 in goal at 1
case lq (mainNew (zipper2)) (treerecNew (btree1))
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mpath (repr (ziprec (Top)))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
=================================================
Progress: 87


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 12.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (treerecNew (btree1))(rank:5.)
=================================================
Progress: 88


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree1))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank:6.)
rewrite IH1 in goal at 0(rank:13.)
rewrite <- IH1 in goal at 0(rank:21.)
=================================================
Progress: 89


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:6.)
=================================================
Progress: 90


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty))) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))))
Prop: plus (ZERO) (mpath (repr (ziprec (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Top))))) = plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))
previous tactics
simpl in goal
rewrite IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Left (ZERO) (Empty) (Top))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (ZERO))) (mainNew (Right (SUCC (ZERO)) (Empty) (Top))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
=================================================
Progress: 91


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 12.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank:5.)
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))(rank:5.)
=================================================
Progress: 92


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))(rank:6.)
rewrite IH1 in goal at 0(rank:13.)
rewrite IH1 in goal at 1(rank:21.)
rewrite IH1 in goal at 2(rank:13.)
rewrite IH1 in goal at 3(rank:13.)
=================================================
Progress: 93


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank:6.)
rewrite IH1 in goal at 2(rank:13.)
rewrite IH1 in goal at 0(rank:13.)
rewrite IH1 in goal at 1(rank:13.)
=================================================
Progress: 94


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 95


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 96


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mainNew (Top)) = plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Node (ZERO) (Empty) (Empty)))))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (mainNew (Top)) = plus (SUCC (ZERO)) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))
Prop: plus (ZERO) (mpath (repr (ziprec (Left (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty)) (Right (ZERO) (Empty) (Top)))))) = plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 97


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 98


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 99


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (mainNew (Right (SUCC (ZERO)) (Empty) (Top))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (ZERO))) (mainNew (Right (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Top))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (mainNew (Top)) = plus (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Node (ZERO) (Empty) (Empty)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))
Prop: plus (ZERO) (mpath (repr (ziprec (Left (ZERO) (Empty) (Top))))) = plus (ZERO) (treerecNew (Empty))
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 100


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 101


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 102


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 103


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 104


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 105


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 106


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 107


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 108


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 109


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 110


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mpath (repr (ziprec (zipper1)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:12.)
=================================================
Progress: 111


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mpath (repr (ziprec (zipper1)))) = true->false = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:12.)
=================================================
Progress: 112


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 113


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 114


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 115


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 116


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 117


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true -> plus (nat1) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 118


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true -> plus (nat1) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 119


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 120


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH3 in goal at 0(rank:28.)
case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank:11.)
=================================================
Progress: 121


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 122


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true -> plus (nat1) (mainNew (Left (nat3) (btree4) (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 123


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true -> plus (nat1) (mainNew (Left (nat3) (btree4) (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 124


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 125


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH3 in goal at 0(rank:28.)
case lq (mainNew (zipper2)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 126


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank:12.)
=================================================
Progress: 127


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (mpath (repr (ziprec (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:12.)
rewrite IH1 in goal at 0(rank:21.)
rewrite IH2 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:21.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 128


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (treerecNew (btree4))(rank:12.)
=================================================
Progress: 129


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:12.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 130


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 12.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank:5.)
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))(rank:5.)
=================================================
Progress: 131


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))(rank:6.)
rewrite IH1 in goal at 2(rank:13.)
rewrite <- IH1 in goal at 0(rank:21.)
rewrite IH1 in goal at 0(rank:21.)
rewrite IH1 in goal at 1(rank:21.)
=================================================
Progress: 132


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank:6.)
rewrite IH1 in goal at 2(rank:13.)
rewrite IH1 in goal at 0(rank:13.)
rewrite IH1 in goal at 1(rank:13.)
=================================================
Progress: 133


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 134


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 135


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mainNew (Right (ZERO) (Node (ZERO) (Empty) (Empty)) (Top))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Right (SUCC (ZERO)) (Empty) (Top))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (ZERO) (mainNew (Right (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty))) (Node (ZERO) (Empty) (Empty))) (Empty))) (Top))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mpath (repr (ziprec (Right (ZERO) (Empty) (Top))))) = plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))
Prop: plus (SUCC (SUCC (ZERO))) (mpath (repr (ziprec (Top)))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Right (ZERO) (Empty) (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Top)))))) = plus (ZERO) (treerecNew (Empty))
=================================================
Progress: 136


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Left (ZERO) (Empty) (Top))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))))
Prop: plus (ZERO) (mainNew (Left (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Top))) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mpath (repr (ziprec (Top)))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Right (SUCC (SUCC (ZERO))) (Empty) (Right (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Top)))))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (ZERO))) (mpath (repr (ziprec (Top)))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty)))
=================================================
Progress: 137


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 12.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank:5.)
case lq (mainNew (zipper2)) (treerecNew (btree1))(rank:5.)
=================================================
Progress: 138


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (mainNew (zipper2)) (treerecNew (btree1))(rank:6.)
rewrite IH1 in goal at 2(rank:13.)
rewrite <- IH1 in goal at 0(rank:21.)
rewrite IH1 in goal at 0(rank:21.)
rewrite IH1 in goal at 1(rank:21.)
=================================================
Progress: 139


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree1))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank:6.)
rewrite IH1 in goal at 2(rank:13.)
rewrite IH1 in goal at 0(rank:13.)
rewrite IH1 in goal at 1(rank:13.)
=================================================
Progress: 140


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree1))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 141


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 142


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Empty)))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (mainNew (Top)) = plus (SUCC (ZERO)) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
case lq (mainNew (zipper2)) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (mpath (repr (ziprec (Left (SUCC (ZERO)) (Empty) (Top))))) = plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))
=================================================
Progress: 143


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Left (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Top))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Right (ZERO) (Empty) (Right (ZERO) (Node (ZERO) (Empty) (Empty)) (Top)))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Left (SUCC (ZERO)) (Empty) (Top))))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
=================================================
Progress: 144


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mpath (repr (ziprec (zipper1)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Top)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 145


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Top)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Left (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Left (nat2) (btree2) (zipper2))))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 146


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Left (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Left (nat2) (btree2) (zipper2))))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 147


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 148


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Right (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Right (nat2) (btree2) (zipper2))))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 149


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Right (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Right (nat2) (btree2) (zipper2))))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 150


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 151


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 152


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 153


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true->lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 154


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true->lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true->lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 155


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true->lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true->lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 156


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true->lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 157


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH3 in goal at 0(rank:28.)
case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank:11.)
=================================================
Progress: 158


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank:12.)
=================================================
Progress: 159


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:12.)
rewrite IH1 in goal at 0(rank:21.)
rewrite IH2 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:21.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 160


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mpath (repr (ziprec (zipper1)))) = true->false = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Top)))) = true->false = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 161


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Top)))) = true->false = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Left (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mainNew (Left (nat2) (btree2) (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 162


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Left (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mainNew (Left (nat2) (btree2) (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 163


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 164


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Right (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mainNew (Right (nat2) (btree2) (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 165


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Right (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mainNew (Right (nat2) (btree2) (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 166


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 167


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 168


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 169


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true->lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 170


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true->lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true->lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (Left (nat3) (btree4) (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 171


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true->lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (Left (nat3) (btree4) (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true->lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 172


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true->lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 173


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH3 in goal at 0(rank:28.)
case lq (mainNew (zipper2)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 174


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (treerecNew (btree4))(rank:12.)
=================================================
Progress: 175


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:12.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 176


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction nat1(rank:21.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 177


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction nat1(rank:21.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 178


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree4))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 179


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 180


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (Top)) = true->false = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 181


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (Top)) = true->false = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> plus (nat1) (mainNew (Left (nat2) (btree2) (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 182


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> plus (nat1) (mainNew (Left (nat2) (btree2) (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 183


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 184


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> plus (nat1) (mainNew (Right (nat2) (btree2) (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 185


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> plus (nat1) (mainNew (Right (nat2) (btree2) (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 186


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 187


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 188


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 189


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) = true->lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 190


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) = true->lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (Left (nat3) (btree4) (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 191


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (Left (nat3) (btree4) (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true->lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 192


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true->lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 193


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH3 in goal at 0(rank:28.)
case lq (mainNew (zipper2)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 194


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (treerecNew (btree4))(rank:12.)
=================================================
Progress: 195


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:12.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 196


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (Top)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 197


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (Top)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Left (nat2) (btree2) (zipper2))))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 198


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Left (nat2) (btree2) (zipper2))))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 199


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 200


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Right (nat2) (btree2) (zipper2))))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 201


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Right (nat2) (btree2) (zipper2))))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 202


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 203


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mainNew (zipper2)) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 204


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 205


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) = true->lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 206


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) = true->lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 207


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->lq (mainNew (Left (nat3) (btree4) (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true->lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 208


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true->lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 209


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH3 in goal at 0(rank:28.)
case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank:11.)
=================================================
Progress: 210


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank:12.)
=================================================
Progress: 211


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:12.)
rewrite IH1 in goal at 0(rank:21.)
rewrite IH2 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:21.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 212


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree4))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 213


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 214


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction nat1(rank:21.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 215


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction nat1(rank:21.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 216


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mpath (repr (ziprec (zipper1)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Top)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 217


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Top)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Left (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Left (nat2) (btree2) (zipper2))))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 218


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Left (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Left (nat2) (btree2) (zipper2))))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 219


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 220


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Right (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Right (nat2) (btree2) (zipper2))))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 221


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Right (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (Right (nat2) (btree2) (zipper2))))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 222


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 223


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 224


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 225


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true->lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 226


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true->lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true->lq (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 227


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true->lq (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true->lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 228


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true->lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 229


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH3 in goal at 0(rank:28.)
case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank:11.)
=================================================
Progress: 230


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank:12.)
=================================================
Progress: 231


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Cond2 : lq (plus (nat3) (mpath (repr (ziprec (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:12.)
rewrite IH1 in goal at 0(rank:21.)
rewrite IH2 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:21.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 232


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mpath (repr (ziprec (zipper1)))) = true->false = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Top)))) = true->false = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 233


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Top)))) = true->false = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Left (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mainNew (Left (nat2) (btree2) (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 234


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Left (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mainNew (Left (nat2) (btree2) (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 235


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 236


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Right (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mainNew (Right (nat2) (btree2) (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 237


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (Right (nat2) (btree2) (zipper2))))) = true->false = true -> plus (nat1) (mainNew (Right (nat2) (btree2) (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 238


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true->false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 239


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (mpath (repr (ziprec (zipper2)))) = true->false = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (ZERO)
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : lq (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree2)))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (plus (nat2) (if lq (mainNew (zipper2)) (treerecNew (btree2)) then treerecNew (btree2) else mainNew (zipper2))) = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 240


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 241


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true->lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 242


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) = true->lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true->lq (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (Left (nat3) (btree4) (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 243


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = true->lq (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (Left (nat3) (btree4) (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true->lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 244


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true->lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 245


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH3 in goal at 0(rank:28.)
case lq (mainNew (zipper2)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 246


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (treerecNew (btree4))(rank:12.)
=================================================
Progress: 247


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:12.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 248


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (mpath (repr (ziprec (zipper2))))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction nat1(rank:21.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 249


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (mpath (repr (ziprec (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (mpath (repr (ziprec (zipper2))))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction nat1(rank:21.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 250


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree4))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 251


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 252


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction nat1(rank:21.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 253


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction nat1(rank:21.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 254


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree4))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 255


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 256


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree4))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 257


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 258


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction nat1(rank:21.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 259


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Cond2 : lq (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction nat1(rank:21.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 260


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Cond2 : lq (plus (nat3) (mpath (repr (ziprec (zipper2))))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction nat1(rank:21.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 261


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Cond2 : lq (plus (nat3) (mpath (repr (ziprec (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = true
Cond2 : lq (plus (nat3) (mpath (repr (ziprec (zipper2))))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction nat1(rank:21.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 262


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree4))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 263


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 264


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank:6.)
=================================================
Progress: 265


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:6.)
=================================================
Progress: 266


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (mpath (repr (ziprec (Top)))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Right (SUCC (ZERO)) (Empty) (Right (SUCC (SUCC (ZERO))) (Empty) (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Top))))))) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Right (ZERO) (Node (ZERO) (Empty) (Empty)) (Top))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
=================================================
Progress: 267


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mainNew (Top)) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (mpath (treerec (Empty))) (mainNew (Top)) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mainNew (Top)) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
case lq (mainNew (zipper2)) (treerecNew (btree1))
parent
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1)))
lower
plus(_, _)
upper
_
remove upper
mpath(repr(ziprec(zipper2)))
remove lower
mpath(repr(ziprec(_)))
remove upper
plus(nat1, _)
parent
plus (nat1) (treerecNew (btree1))
lower
plus(_, treerecNew(btree1))
upper
_
remove upper
mainNew(zipper2)
remove lower
mainNew(zipper2)
remove upper
plus(nat1, treerecNew(btree1))
remove lower
plus(nat1, treerecNew(btree1))
remove upper
plus(nat1, treerecNew(btree1))
remove lower
plus(nat1, treerecNew(btree1))
remove upper
plus(nat1, treerecNew(btree1))
remove lower
plus(nat1, treerecNew(btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Right (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Right (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))) (Top)))))) then mpath (repr (ziprec (Right (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Right (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))) (Top))))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (ZERO))) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Node (ZERO) (Empty) (Empty)))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (ZERO) (Empty) (Empty)))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 268


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:6.)
=================================================
Progress: 269


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:6.)
=================================================
Progress: 270


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 6.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:5.)
=================================================
Progress: 271


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 5.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (if lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 272


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (if lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:7.)
=================================================
Progress: 273


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 6.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (if lq (mpath (treerec (Empty))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:5.)
=================================================
Progress: 274


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (if lq (mpath (treerec (Empty))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 5.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (if lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 275


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (if lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:7.)
=================================================
Progress: 276


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 277


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 278


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 279


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 280


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:8.)
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:8.)
=================================================
Progress: 281


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:8.)
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:8.)
=================================================
Progress: 282


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:9.)
=================================================
Progress: 283


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:9.)
=================================================
Progress: 284


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:9.)
=================================================
Progress: 285


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:9.)
=================================================
Progress: 286


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 287


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 288


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 289


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 290


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 291


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 292


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 293


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 294


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Node (SUCC (ZERO)) (Empty) (Empty)))) = plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Lemma List
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 295


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 296


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 297


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))) = true -> plus (nat1) (mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 298


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))) = true -> plus (nat1) (mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 299


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 300


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 301


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:9.)
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:9.)
=================================================
Progress: 302


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:10.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 303


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:10.)
rewrite IH2 in goal at 0(rank:26.)
=================================================
Progress: 304


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
=================================================
Progress: 305


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (ZERO))) (mpath (treerec (Node (ZERO) (Empty) (Empty)))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Lemma List
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 306


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 307


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 308


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))) = true -> plus (nat1) (mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 309


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))) = true -> plus (nat1) (mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 310


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 311


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 312


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:9.)
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:9.)
=================================================
Progress: 313


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:10.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 314


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:10.)
rewrite IH2 in goal at 0(rank:26.)
=================================================
Progress: 315


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (ZERO))) (mpath (treerec (Empty))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
=================================================
Progress: 316


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 317


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 318


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 319


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 320


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (mpath (treerec (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty)))) (Empty)))) (mpath (repr (ziprec (Top)))) then mainNew (Top) else mpath (treerec (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty)))) (Empty)))) = plus (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty)))) (Empty)))
Prop: plus (ZERO) (if lq (mpath (treerec (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))) (mpath (repr (ziprec (Top)))) then mainNew (Top) else mpath (treerec (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))) = plus (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Right (ZERO) (Empty) (Top))))) then mainNew (Right (ZERO) (Empty) (Top)) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
case lq (mainNew (zipper2)) (treerecNew (btree1))
parent
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1)))
lower
plus(_, _)
upper
_
remove upper
mpath(repr(ziprec(zipper2)))
remove lower
mpath(repr(ziprec(_)))
remove upper
plus(nat1, _)
parent
plus (nat1) (treerecNew (btree1))
lower
plus(_, treerecNew(btree1))
upper
_
remove upper
mainNew(zipper2)
remove lower
mainNew(zipper2)
remove upper
plus(nat1, treerecNew(btree1))
remove lower
plus(nat1, treerecNew(btree1))
remove upper
plus(nat1, treerecNew(btree1))
remove lower
plus(nat1, treerecNew(btree1))
remove upper
plus(nat1, treerecNew(btree1))
remove lower
plus(nat1, treerecNew(btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Top))))) then mpath (repr (ziprec (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Top)))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (ZERO))) (if lq (mpath (treerec (Node (ZERO) (Empty) (Empty)))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (ZERO) (Empty) (Empty)))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Empty) (Empty)))
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 321


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:6.)
=================================================
Progress: 322


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 6.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:5.)
=================================================
Progress: 323


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 5.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (if lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 324


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (if lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:7.)
=================================================
Progress: 325


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) then mainNew (Top) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 326


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) then mainNew (Top) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 327


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:8.)
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:8.)
=================================================
Progress: 328


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:9.)
=================================================
Progress: 329


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:9.)
=================================================
Progress: 330


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 331


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 332


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 333


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 334


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty))))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty))))
Lemma List
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 335


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 336


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 337


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))) = true -> plus (nat1) (mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 338


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))) = true -> plus (nat1) (mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 339


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 340


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 341


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:9.)
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:9.)
=================================================
Progress: 342


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:10.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 343


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:10.)
rewrite IH2 in goal at 0(rank:26.)
=================================================
Progress: 344


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
=================================================
Progress: 345


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 346


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 347


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (treerecNew (btree1))(rank:6.)
=================================================
Progress: 348


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree1))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 349


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
rewrite <- IH1 in goal at 1
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
rewrite <- IH1 in goal at 1
case lq (mainNew (zipper2)) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mpath (repr (ziprec (Top)))) = plus (SUCC (ZERO)) (treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) (Empty)))
Prop: plus (SUCC (SUCC (ZERO))) (mpath (repr (ziprec (Right (ZERO) (Empty) (Top))))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))))
Prop: plus (ZERO) (mpath (repr (ziprec (Right (ZERO) (Empty) (Right (ZERO) (Empty) (Top)))))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
=================================================
Progress: 350


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mainNew (Top)) then mainNew (Top) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (if lq (mpath (treerec (Empty))) (mainNew (Top)) then mainNew (Top) else mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) (mainNew (Top)) then mainNew (Top) else mpath (treerec (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) = plus (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))
previous tactics
simpl in goal
rewrite IH1 in goal at 1
case lq (mainNew (zipper2)) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mainNew (Top)) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (ZERO))) (if lq (mpath (treerec (Empty))) (mainNew (Top)) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mainNew (Top)) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 351


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:6.)
=================================================
Progress: 352


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 6.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (if lq (mpath (treerec (Empty))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:5.)
=================================================
Progress: 353


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Empty)) = true -> plus (nat1) (if lq (mpath (treerec (Empty))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 5.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (if lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 354


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (if lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:7.)
=================================================
Progress: 355


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) then mainNew (Top) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 356


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mainNew (Top)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) then mainNew (Top) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 357


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:8.)
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:8.)
=================================================
Progress: 358


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:9.)
=================================================
Progress: 359


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:9.)
=================================================
Progress: 360


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 361


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 362


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 363


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 364


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mpath (treerec (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))) = plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))
Prop: plus (ZERO) (mpath (treerec (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))) = plus (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))
Prop: plus (SUCC (ZERO)) (mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Lemma List
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 365


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 366


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 367


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))) = true -> plus (nat1) (mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 368


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))) = true -> plus (nat1) (mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 369


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 370


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 371


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:9.)
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:9.)
=================================================
Progress: 372


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:10.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 373


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:10.)
rewrite IH2 in goal at 0(rank:26.)
=================================================
Progress: 374


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))) (Empty))))) (Empty)))) = plus (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))) (Empty))))) (Empty)))
=================================================
Progress: 375


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 376


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 377


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank:6.)
=================================================
Progress: 378


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:6.)
=================================================
Progress: 379


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Left (ZERO) (Empty) (Top))))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Right (ZERO) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (Top))))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Right (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Top))) = plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
=================================================
Progress: 380


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (treerecNew (btree1))(rank:6.)
=================================================
Progress: 381


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree1))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:6.)
=================================================
Progress: 382


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
rewrite IH1 in goal at 0
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (mpath (repr (ziprec (Top)))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Right (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Right (ZERO) (Empty) (Top)))))) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
rewrite IH1 in goal at 0
case lq (mainNew (zipper2)) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (mainNew (Top)) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Right (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Left (SUCC (ZERO)) (Empty) (Left (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Top))))) = plus (ZERO) (treerecNew (Empty))
=================================================
Progress: 383


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (treerecNew (btree1))(rank:6.)
=================================================
Progress: 384


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree1))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 385


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
rewrite IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty))) (Empty))) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (Empty)))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Right (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Top))) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
rewrite IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Right (SUCC (ZERO)) (Empty) (Right (SUCC (ZERO)) (Empty) (Top)))))) = plus (ZERO) (treerecNew (Empty))
=================================================
Progress: 386


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 3(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))(rank:6.)
=================================================
Progress: 387


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 388


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
rewrite IH1 in goal at 3
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mainNew (Left (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Top))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
rewrite IH1 in goal at 3
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Right (ZERO) (Node (ZERO) (Empty) (Empty)) (Top))))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (SUCC (ZERO)) (mpath (repr (ziprec (Top)))) = plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty)))))
Prop: plus (SUCC (ZERO)) (mpath (repr (ziprec (Left (SUCC (ZERO)) (Empty) (Top))))) = plus (SUCC (ZERO)) (treerecNew (Empty))
=================================================
Progress: 389


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank:6.)
=================================================
Progress: 390


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:6.)
=================================================
Progress: 391


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
rewrite IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mpath (repr (ziprec (Top)))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (mpath (repr (ziprec (Left (ZERO) (Empty) (Top))))) = plus (SUCC (ZERO)) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
rewrite IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mainNew (Top)) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Right (ZERO) (Empty) (Top))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 392


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 393


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 394


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 395


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 396


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 397


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 398


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true->lq (mpath (treerec (Empty))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 399


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true->lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 400


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 401


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 402


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) = true -> plus (nat1) (mainNew (Top)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 403


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) = true -> plus (nat1) (mpath (repr (ziprec (Top)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 404


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 405


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Left (nat3) (btree4) (zipper2))) = true -> plus (nat1) (mainNew (Left (nat3) (btree4) (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 406


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Left (nat3) (btree4) (zipper2))) = true -> plus (nat1) (mainNew (Left (nat3) (btree4) (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 407


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 408


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH3 in goal at 0(rank:28.)
case lq (mainNew (zipper2)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 409


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 410


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), false = true -> plus (nat1) (ZERO) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Left (nat3) (btree4) (zipper2))) = true -> plus (nat1) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 411


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Left (nat3) (btree4) (zipper2))) = true -> plus (nat1) (mpath (repr (ziprec (Left (nat3) (btree4) (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 412


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 413


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true -> plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH3 in goal at 0(rank:28.)
case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank:11.)
=================================================
Progress: 414


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (treerecNew (btree4))(rank:12.)
=================================================
Progress: 415


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:12.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 416


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank:12.)
=================================================
Progress: 417


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (mpath (repr (ziprec (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:12.)
rewrite IH1 in goal at 0(rank:21.)
rewrite IH2 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:21.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 418


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree4))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 419


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 420


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2))))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (mpath (repr (ziprec (zipper2))))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction nat1(rank:21.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 421


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (mpath (repr (ziprec (zipper2))))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mpath (repr (ziprec (zipper1)))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (mpath (repr (ziprec (zipper2))))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mainNew (zipper2)) (treerecNew (btree4)) then treerecNew (btree4) else mainNew (zipper2))) = true
Case1 : lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (mpath (repr (ziprec (zipper2))))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction nat1(rank:21.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 422


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mainNew (Top)) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))) (Empty))) (Empty)))) (Empty)))) (mainNew (Right (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty))) (Right (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Left (SUCC (ZERO)) (Empty) (Top))))) then mpath (repr (ziprec (Right (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty))) (Right (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Left (SUCC (ZERO)) (Empty) (Top)))))) else mpath (treerec (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))) (Empty))) (Empty)))) (Empty)))) = plus (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))) (Empty))) (Empty)))) (Empty)))
Prop: plus (SUCC (ZERO)) (if lq (mpath (treerec (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))) (mainNew (Right (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Top))) then mpath (repr (ziprec (Right (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Top)))) else mpath (treerec (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))) = plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Node (ZERO) (Empty) (Empty)))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (ZERO) (Empty) (Empty)))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (SUCC (ZERO)) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 423


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:6.)
=================================================
Progress: 424


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:6.)
=================================================
Progress: 425


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 6.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true -> plus (nat1) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:5.)
=================================================
Progress: 426


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true -> plus (nat1) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 5.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (if lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 427


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (if lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:7.)
=================================================
Progress: 428


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 6.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true -> plus (nat1) (if lq (mpath (treerec (Empty))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:5.)
=================================================
Progress: 429


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true -> plus (nat1) (if lq (mpath (treerec (Empty))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 5.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (if lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 430


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (if lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:7.)
=================================================
Progress: 431


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 432


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 433


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 434


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (Top)) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 435


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:8.)
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:8.)
=================================================
Progress: 436


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:8.)
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:8.)
=================================================
Progress: 437


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:9.)
=================================================
Progress: 438


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:9.)
=================================================
Progress: 439


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:9.)
=================================================
Progress: 440


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:9.)
=================================================
Progress: 441


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 442


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 443


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 444


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 445


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 446


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 447


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 448


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 449


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))))
Prop: plus (ZERO) (mpath (treerec (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))))) = plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))))
Lemma List
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 450


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 451


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 452


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))) = true -> plus (nat1) (mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 453


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))) = true -> plus (nat1) (mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 454


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 455


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 456


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:9.)
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:9.)
=================================================
Progress: 457


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:10.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 458


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:10.)
rewrite IH2 in goal at 0(rank:26.)
=================================================
Progress: 459


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) = plus (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))
=================================================
Progress: 460


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (treerec (Node (ZERO) (Empty) (Empty)))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Node (SUCC (ZERO)) (Empty) (Empty)))) = plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Lemma List
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 461


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 462


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 463


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))) = true -> plus (nat1) (mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 464


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))) = true -> plus (nat1) (mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 465


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 466


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 467


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:9.)
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:9.)
=================================================
Progress: 468


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:10.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 469


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:10.)
rewrite IH2 in goal at 0(rank:26.)
=================================================
Progress: 470


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mainNew (zipper1)) then mpath (repr (ziprec (zipper1))) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (treerec (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))))) = plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))))
Prop: plus (ZERO) (mpath (treerec (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))
Prop: plus (SUCC (ZERO)) (mpath (treerec (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) = plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))
=================================================
Progress: 471


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 472


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 473


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 474


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 475


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Right (ZERO) (Node (ZERO) (Empty) (Empty)) (Top))))) then mainNew (Right (ZERO) (Node (ZERO) (Empty) (Empty)) (Top)) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (ZERO))) (if lq (mpath (treerec (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) (mpath (repr (ziprec (Left (ZERO) (Empty) (Top))))) then mainNew (Left (ZERO) (Empty) (Top)) else mpath (treerec (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))
Prop: plus (SUCC (ZERO)) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Top)))) then mainNew (Top) else mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Left (ZERO) (Empty) (Top))))) then mpath (repr (ziprec (Left (ZERO) (Empty) (Top)))) else mpath (treerec (Empty))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (if lq (mpath (treerec (Node (ZERO) (Empty) (Empty)))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (ZERO) (Empty) (Empty)))) = plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 476


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:6.)
=================================================
Progress: 477


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 6.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true -> plus (nat1) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:5.)
=================================================
Progress: 478


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Empty)) = true -> plus (nat1) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 5.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (if lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 479


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (Node (nat2) (btree2) (btree3))) = true -> plus (nat1) (if lq (mpath (treerec (Node (nat2) (btree2) (btree3)))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:7.)
=================================================
Progress: 480


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) then mainNew (Top) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 481


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (mpath (repr (ziprec (Top)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (if lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (Top)))) then mainNew (Top) else mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 482


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:8.)
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:8.)
=================================================
Progress: 483


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:9.)
=================================================
Progress: 484


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:9.)
=================================================
Progress: 485


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 486


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 487


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 488


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat2) (mpath (treerec (btree3)))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 489


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))) = plus (ZERO) (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (mpath (treerec (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty)))) = plus (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty)))
Lemma List
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 490


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 491


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 492


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))) = true -> plus (nat1) (mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 493


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))) = true -> plus (nat1) (mpath (treerec (Node (nat2) (btree2) (btree3)))) = plus (nat1) (treerecNew (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 494


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (nat1) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 495


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))) = true -> plus (ZERO) (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) = plus (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 496


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:9.)
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:9.)
=================================================
Progress: 497


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:10.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 498


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:10.)
rewrite IH2 in goal at 0(rank:26.)
=================================================
Progress: 499


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat2) (mpath (treerec (btree3)))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (if lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (if lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) then mainNew (zipper1) else mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (ZERO))) (mpath (treerec (Empty))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
=================================================
Progress: 500


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 501


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 502


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (treerecNew (btree1))(rank:6.)
=================================================
Progress: 503


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree1))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 504


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
rewrite IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mainNew (Top)) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
rewrite IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mpath (repr (ziprec (Top)))) = plus (SUCC (ZERO)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: plus (ZERO) (mpath (repr (ziprec (Right (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty)) (Top))))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
=================================================
Progress: 505


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank:6.)
=================================================
Progress: 506


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:6.)
=================================================
Progress: 507


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
rewrite IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Right (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty)) (Right (ZERO) (Empty) (Right (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Top))))))) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
rewrite IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (mainNew (Top)) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Left (ZERO) (Empty) (Right (ZERO) (Empty) (Left (SUCC (ZERO)) (Empty) (Top))))) = plus (ZERO) (treerecNew (Empty))
=================================================
Progress: 508


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (mpath (treerec (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))))) (mainNew (Right (SUCC (ZERO)) (Empty) (Top))) then mpath (repr (ziprec (Right (SUCC (ZERO)) (Empty) (Top)))) else mpath (treerec (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))))) = plus (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))))
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mainNew (Left (ZERO) (Empty) (Top))) then mpath (repr (ziprec (Left (ZERO) (Empty) (Top)))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Node (ZERO) (Empty) (Empty)))) (mainNew (Top)) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (ZERO) (Empty) (Empty)))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Left (ZERO) (Empty) (Top))))) then mpath (repr (ziprec (Left (ZERO) (Empty) (Top)))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Node (ZERO) (Empty) (Empty)))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (ZERO) (Empty) (Empty)))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
=================================================
Progress: 509


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Top)))) then mainNew (Top) else mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) (mpath (repr (ziprec (Top)))) then mainNew (Top) else mpath (treerec (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))
Prop: plus (SUCC (ZERO)) (if lq (mpath (treerec (Node (ZERO) (Empty) (Empty)))) (mpath (repr (ziprec (Top)))) then mainNew (Top) else mpath (treerec (Node (ZERO) (Empty) (Empty)))) = plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Empty)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
case lq (mpath (repr (ziprec (zipper2)))) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Right (SUCC (ZERO)) (Empty) (Top))))) then mpath (repr (ziprec (Right (SUCC (ZERO)) (Empty) (Top)))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Right (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty)) (Top))))) then mpath (repr (ziprec (Right (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty)) (Top)))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
=================================================
Progress: 510


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mpath (repr (ziprec (zipper2))))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (treerecNew (btree1))(rank:6.)
=================================================
Progress: 511


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (if lq (mainNew (zipper2)) (treerecNew (btree1)) then treerecNew (btree1) else mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (treerecNew (btree1))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 512


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
rewrite IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2))))
rewrite IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Top)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (ZERO))) (mpath (repr (ziprec (Top)))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (mpath (repr (ziprec (Right (ZERO) (Empty) (Top))))) = plus (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))
=================================================
Progress: 513


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank:6.)
=================================================
Progress: 514


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (mpath (treerec (btree1))) (mainNew (zipper2))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:6.)
=================================================
Progress: 515


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mainNew (zipper2)) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
Case2 : lq (mpath (treerec (btree1))) (mainNew (zipper2)) = true
---------------------------------------
plus (nat1) (mpath (repr (ziprec (zipper2)))) = plus (nat1) (treerecNew (btree1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (repr (ziprec (Left (SUCC (ZERO)) (Empty) (Top))))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (mpath (repr (ziprec (Top)))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (repr (ziprec (Left (ZERO) (Empty) (Top))))) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 0
case lq (mpath (treerec (btree1))) (mainNew (zipper2))
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mainNew (Top)) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (mainNew (Right (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty))) (Top))) = plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (ZERO) (mainNew (Top)) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
=================================================
Progress: 516


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mainNew (zipper2)) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (mpath (treerec (Empty))) (mainNew (Right (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Right (ZERO) (Empty) (Top)))) then mpath (repr (ziprec (Right (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Right (ZERO) (Empty) (Top))))) else mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (if lq (mpath (treerec (Empty))) (mainNew (Top)) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (if lq (mpath (treerec (Empty))) (mainNew (Top)) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Right (ZERO) (Empty) (Top))))) then mpath (repr (ziprec (Right (ZERO) (Empty) (Top)))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
=================================================
Progress: 517


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 13.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : mpath (repr (ziprec (zipper2))) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (mainNew (zipper2)) (treerecNew (btree1)) = true
---------------------------------------
plus (nat1) (if lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper2)))) then mainNew (zipper2) else mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Top)))) then mainNew (Top) else mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Left (ZERO) (Empty) (Left (ZERO) (Empty) (Top)))))) then mainNew (Left (ZERO) (Empty) (Left (ZERO) (Empty) (Top))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Top)))) then mainNew (Top) else mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (mainNew (zipper2)) (treerecNew (btree1))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (mpath (treerec (Empty))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (if lq (mpath (treerec (Node (ZERO) (Empty) (Empty)))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (ZERO) (Empty) (Empty)))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (ZERO) (if lq (mpath (treerec (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (mpath (repr (ziprec (Top)))) then mpath (repr (ziprec (Top))) else mpath (treerec (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) = plus (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))
=================================================
Progress: 518


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 519


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 520


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 521


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 522


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 523


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 524


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 525


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 526


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 527


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 528


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 529


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 530


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 531


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
forall (nat1:nat), plus (nat1) (plus (nat3) (treerecNew (btree4))) = plus (nat1) (plus (nat2) (treerecNew (btree3)))

3 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 532


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (SUCC (ZERO)) (treerecNew (Empty))
asdf
=================================================
Progress: 533


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty)))) (Node (ZERO) (Empty) (Empty)))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = plus (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))
asdf
=================================================
Progress: 534


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) = plus (ZERO) (treerecNew (Empty))
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 535


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 536


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 537


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (ZERO)) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree2(rank:9.)
=================================================
Progress: 538


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (ZERO)) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (Empty))) (plus (nat1) (ZERO)) = true -> plus (nat2) (treerecNew (Empty)) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 539


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (Empty))) (plus (nat1) (ZERO)) = true -> plus (nat2) (treerecNew (Empty)) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat1) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 540


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat1) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (ZERO) (ZERO)) = true -> plus (nat2) (ZERO) = plus (ZERO) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 541


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (ZERO) (ZERO)) = true -> plus (nat2) (ZERO) = plus (ZERO) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (SUCC (nat3)) (ZERO)) = true -> plus (nat2) (ZERO) = plus (SUCC (nat3)) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 542


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (SUCC (nat3)) (ZERO)) = true -> plus (nat2) (ZERO) = plus (SUCC (nat3)) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
forall (nat2:nat), lq (plus (nat2) (ZERO)) (SUCC (plus (nat3) (ZERO))) = true -> plus (nat2) (ZERO) = SUCC (plus (nat3) (ZERO))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:10.)
=================================================
Progress: 543


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
forall (nat2:nat), lq (plus (nat2) (ZERO)) (SUCC (plus (nat3) (ZERO))) = true -> plus (nat2) (ZERO) = SUCC (plus (nat3) (ZERO))

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
lq (plus (ZERO) (ZERO)) (SUCC (plus (nat3) (ZERO))) = true -> plus (ZERO) (ZERO) = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 544


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
lq (plus (ZERO) (ZERO)) (SUCC (plus (nat3) (ZERO))) = true -> plus (ZERO) (ZERO) = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
true = true -> ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 545


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
true = true -> ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
nat2 : nat
Base3 : nat2 = ZERO
Cond1 : true = true
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 546


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mainNew (zipper1)) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Empty)) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
=================================================
Progress: 547


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
asdf
=================================================
Progress: 548


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
asdf
=================================================
Progress: 549


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (ZERO))) (treerecNew (Empty)) = plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (SUCC (ZERO)) (treerecNew (Empty))
asdf
=================================================
Progress: 550


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty)))) = plus (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 551


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 552


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 553


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (Empty))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (ZERO)) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree2(rank:9.)
=================================================
Progress: 554


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (ZERO)) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (Empty))) (plus (nat1) (ZERO)) = true -> plus (nat2) (treerecNew (Empty)) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 555


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (Empty))) (plus (nat1) (ZERO)) = true -> plus (nat2) (treerecNew (Empty)) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat1) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 556


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat1) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (ZERO) (ZERO)) = true -> plus (nat2) (ZERO) = plus (ZERO) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 557


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (ZERO) (ZERO)) = true -> plus (nat2) (ZERO) = plus (ZERO) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (SUCC (nat3)) (ZERO)) = true -> plus (nat2) (ZERO) = plus (SUCC (nat3)) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 558


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (SUCC (nat3)) (ZERO)) = true -> plus (nat2) (ZERO) = plus (SUCC (nat3)) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
forall (nat2:nat), lq (plus (nat2) (ZERO)) (SUCC (plus (nat3) (ZERO))) = true -> plus (nat2) (ZERO) = SUCC (plus (nat3) (ZERO))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:10.)
=================================================
Progress: 559


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
forall (nat2:nat), lq (plus (nat2) (ZERO)) (SUCC (plus (nat3) (ZERO))) = true -> plus (nat2) (ZERO) = SUCC (plus (nat3) (ZERO))

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
lq (plus (ZERO) (ZERO)) (SUCC (plus (nat3) (ZERO))) = true -> plus (ZERO) (ZERO) = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 560


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
lq (plus (ZERO) (ZERO)) (SUCC (plus (nat3) (ZERO))) = true -> plus (ZERO) (ZERO) = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
true = true -> ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 561


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
true = true -> ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), lq (plus (nat2) (treerecNew (btree2))) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : forall (nat2:nat), lq (plus (nat2) (ZERO)) (plus (nat3) (ZERO)) = true -> plus (nat2) (ZERO) = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
nat2 : nat
Base3 : nat2 = ZERO
Cond1 : true = true
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
asdf
=================================================
Progress: 562


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty))) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
=================================================
Progress: 563


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Cond2 : lq (plus (nat3) (treerecNew (btree4))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) = plus (ZERO) (treerecNew (Empty))
asdf
=================================================
Progress: 564


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))))))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
asdf
=================================================
Progress: 565


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 566


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree1))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree2))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (treerec (btree3))) (mpath (repr (ziprec (zipper1)))) = true->lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mpath (repr (ziprec (zipper2)))) = true->lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) = true
Cond2 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
induction btree1(rank:16.)
induction btree2(rank:16.)
induction nat1(rank:16.)
induction nat2(rank:16.)
=================================================
Progress: 567


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) = plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
asdf
=================================================
Progress: 568


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (plus (nat3) (treerecNew (btree4))) = plus (ZERO) (plus (nat2) (treerecNew (btree3)))

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree1)) = true->lq (mpath (treerec (btree1))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree2)) = true->lq (mpath (treerec (btree2))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (mpath (repr (ziprec (zipper1)))) (treerecNew (btree3)) = true->lq (mpath (treerec (btree3))) (mainNew (zipper1)) = true -> plus (nat1) (mainNew (zipper1)) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : forall (nat1:nat), lq (mpath (repr (ziprec (zipper2)))) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))) = true->lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (mainNew (zipper2)) = true -> plus (nat1) (mainNew (zipper2)) = plus (nat1) (plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (plus (nat3) (if lq (mpath (treerec (btree4))) (mpath (repr (ziprec (zipper2)))) then mpath (repr (ziprec (zipper2))) else mpath (treerec (btree4)))) (plus (nat2) (treerecNew (btree3))) = true
Cond2 : lq (plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2)))) (plus (nat3) (treerecNew (btree4))) = true
Case1 : lq (mainNew (zipper2)) (treerecNew (btree4)) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (nat3) (treerecNew (btree4)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
asdf
=================================================
Progress: 569


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 16.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 570


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction btree2(rank:17.)
induction nat1(rank:17.)
induction nat2(rank:17.)
=================================================
Progress: 571


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 16.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (Empty)) = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 572


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (Empty)) = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat) (nat2:nat), plus (nat2) (ZERO) = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction btree1(rank:17.)
induction nat1(rank:17.)
induction nat2(rank:17.)
=================================================
Progress: 573


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 16.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (ZERO) (treerecNew (btree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 574


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (ZERO) (treerecNew (btree1))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = treerecNew (btree1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction btree1(rank:17.)
induction btree2(rank:17.)
induction nat2(rank:17.)
=================================================
Progress: 575


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 16.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (ZERO) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 576


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (ZERO) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction btree1(rank:17.)
induction btree2(rank:17.)
induction nat1(rank:17.)
=================================================
Progress: 577


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 17.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (Empty)) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 578


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (Empty)) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (ZERO) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:18.)
induction nat2(rank:18.)
=================================================
Progress: 579


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 17.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 580


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = ZERO

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction btree2(rank:18.)
induction nat2(rank:18.)
=================================================
Progress: 581


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 17.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (ZERO) (treerecNew (btree2)) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 582


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (ZERO) (treerecNew (btree2)) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction btree2(rank:18.)
induction nat1(rank:18.)
=================================================
Progress: 583


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat) (nat2:nat), plus (nat2) (ZERO) = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 17.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (ZERO) = plus (nat1) (treerecNew (Empty))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 584


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (ZERO) = plus (nat1) (treerecNew (Empty))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (ZERO) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:18.)
induction nat2(rank:18.)
=================================================
Progress: 585


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat) (nat2:nat), plus (nat2) (ZERO) = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 17.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), plus (nat2) (ZERO) = plus (ZERO) (treerecNew (btree1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 586


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), plus (nat2) (ZERO) = plus (ZERO) (treerecNew (btree1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), plus (nat2) (ZERO) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction btree1(rank:18.)
induction nat2(rank:18.)
=================================================
Progress: 587


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat) (nat2:nat), plus (nat2) (ZERO) = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 17.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (nat1:nat), plus (ZERO) (ZERO) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 588


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (nat1:nat), plus (ZERO) (ZERO) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction btree1(rank:18.)
induction nat1(rank:18.)
=================================================
Progress: 589


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = treerecNew (btree1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 17.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = treerecNew (Empty)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 590


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = treerecNew (Empty)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = ZERO

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction btree2(rank:18.)
induction nat2(rank:18.)
=================================================
Progress: 591


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = treerecNew (btree1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 17.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat2:nat), plus (nat2) (treerecNew (Empty)) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 592


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat2:nat), plus (nat2) (treerecNew (Empty)) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat2:nat), plus (nat2) (ZERO) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction btree1(rank:18.)
induction nat2(rank:18.)
=================================================
Progress: 593


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = treerecNew (btree1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 17.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (ZERO) (treerecNew (btree2)) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 594


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (ZERO) (treerecNew (btree2)) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), treerecNew (btree2) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction btree1(rank:18.)
induction btree2(rank:18.)
=================================================
Progress: 595


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 17.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (Empty))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 596


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (Empty))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction btree2(rank:18.)
induction nat1(rank:18.)
=================================================
Progress: 597


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 17.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), treerecNew (Empty) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 598


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), treerecNew (Empty) = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction btree1(rank:18.)
induction nat1(rank:18.)
=================================================
Progress: 599


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 17.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), treerecNew (btree2) = plus (ZERO) (treerecNew (btree1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 600


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), treerecNew (btree2) = plus (ZERO) (treerecNew (btree1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), treerecNew (btree2) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction btree1(rank:18.)
induction btree2(rank:18.)
=================================================
Progress: 601


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:11.)
=================================================
Progress: 602


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 603


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite IH2 in goal at 0(rank:27.)
=================================================
Progress: 604


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:11.)
=================================================
Progress: 605


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 606


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite IH2 in goal at 0(rank:27.)
=================================================
Progress: 607


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:11.)
=================================================
Progress: 608


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 609


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite IH2 in goal at 0(rank:27.)
=================================================
Progress: 610


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:11.)
=================================================
Progress: 611


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 612


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite IH2 in goal at 0(rank:27.)
=================================================
Progress: 613


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:11.)
=================================================
Progress: 614


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 615


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite IH2 in goal at 0(rank:27.)
=================================================
Progress: 616


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:11.)
=================================================
Progress: 617


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 618


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite IH2 in goal at 0(rank:27.)
=================================================
Progress: 619


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank:11.)
=================================================
Progress: 620


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (if lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) then mpath (treerec (btree3)) else mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 621


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite IH2 in goal at 0(rank:27.)
=================================================
Progress: 622


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (ZERO) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = plus (ZERO) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 623


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = plus (ZERO) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:11.)
=================================================
Progress: 624


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
nat2 : nat
Base4 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 625


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
nat2 : nat
Base4 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 626


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:10.)
=================================================
Progress: 627


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
asdf
=================================================
Progress: 628


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (ZERO) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), plus (ZERO) (ZERO) = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 629


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), plus (ZERO) (ZERO) = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 630


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
nat1 : nat
Base4 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 631


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
nat1 : nat
Base4 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 632


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 633


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 634


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = ZERO

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (treerecNew (Empty)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 635


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (treerecNew (Empty)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:11.)
=================================================
Progress: 636


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
nat2 : nat
Base4 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 637


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
nat2 : nat
Base4 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 638


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:10.)
=================================================
Progress: 639


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 640


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = ZERO

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree2:btree), plus (ZERO) (treerecNew (btree2)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 641


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree2:btree), plus (ZERO) (treerecNew (btree2)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree2(rank:11.)
=================================================
Progress: 642


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
Base4 : btree2 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 643


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
Base4 : btree2 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (Node (nat3) (btree3) (btree4)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 644


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (Node (nat3) (btree3) (btree4)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite IH1 in goal at 2(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH1 in goal at 1(rank:18.)
=================================================
Progress: 645


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 646


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat1:nat), treerecNew (Empty) = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 647


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat1:nat), treerecNew (Empty) = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 648


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
nat1 : nat
Base4 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 649


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
nat1 : nat
Base4 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 650


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 651


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 652


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = plus (ZERO) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 653


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = plus (ZERO) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree2(rank:11.)
=================================================
Progress: 654


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
Base4 : btree2 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 655


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
Base4 : btree2 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (Node (nat3) (btree3) (btree4)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 656


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (Node (nat3) (btree3) (btree4)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite IH1 in goal at 2(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH1 in goal at 1(rank:18.)
=================================================
Progress: 657


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 658


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (ZERO) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = plus (ZERO) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 659


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = plus (ZERO) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:11.)
=================================================
Progress: 660


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
nat2 : nat
Base4 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 661


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
nat2 : nat
Base4 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 662


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:10.)
=================================================
Progress: 663


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 664


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (ZERO) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), plus (ZERO) (ZERO) = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 665


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), plus (ZERO) (ZERO) = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 666


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
nat1 : nat
Base4 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 667


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
nat1 : nat
Base4 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 668


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 669


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 670


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), plus (nat2) (ZERO) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = treerecNew (Empty)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 671


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = treerecNew (Empty)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:11.)
=================================================
Progress: 672


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
nat2 : nat
Base4 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 673


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
nat2 : nat
Base4 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 674


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:10.)
=================================================
Progress: 675


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 676


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), plus (nat2) (ZERO) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (ZERO) = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 677


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (ZERO) = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:11.)
=================================================
Progress: 678


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
Base4 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 679


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
Base4 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = treerecNew (Node (nat3) (btree3) (btree4))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 680


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = treerecNew (Node (nat3) (btree3) (btree4))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
=================================================
Progress: 681


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 682


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (treerecNew (Empty))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 683


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (treerecNew (Empty))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 684


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
nat1 : nat
Base4 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 685


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
nat1 : nat
Base4 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 686


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 687


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 688


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (treerecNew (btree1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 689


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (treerecNew (btree1))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:11.)
=================================================
Progress: 690


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
Base4 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 691


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
Base4 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = treerecNew (Node (nat3) (btree3) (btree4))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 692


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = treerecNew (Node (nat3) (btree3) (btree4))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
=================================================
Progress: 693


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 694


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = ZERO

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (treerecNew (Empty)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 695


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (treerecNew (Empty)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:11.)
=================================================
Progress: 696


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
nat2 : nat
Base4 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 697


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
nat2 : nat
Base4 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 698


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:10.)
=================================================
Progress: 699


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (ZERO)) = ZERO
asdf
=================================================
Progress: 700


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat2:nat), plus (nat2) (treerecNew (btree2)) = ZERO

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree2:btree), plus (ZERO) (treerecNew (btree2)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 701


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree2:btree), plus (ZERO) (treerecNew (btree2)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree2(rank:11.)
=================================================
Progress: 702


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
Base4 : btree2 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 703


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
Base4 : btree2 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (Node (nat3) (btree3) (btree4)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 704


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (Node (nat3) (btree3) (btree4)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite IH1 in goal at 2(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH1 in goal at 1(rank:18.)
=================================================
Progress: 705


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 706


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat2:nat), plus (nat2) (ZERO) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = treerecNew (Empty)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 707


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = treerecNew (Empty)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:11.)
=================================================
Progress: 708


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
nat2 : nat
Base4 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 709


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
nat2 : nat
Base4 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 710


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:10.)
=================================================
Progress: 711


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 712


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat2:nat), plus (nat2) (ZERO) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (ZERO) = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 713


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (ZERO) = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:11.)
=================================================
Progress: 714


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
Base4 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 715


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
Base4 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = treerecNew (Node (nat3) (btree3) (btree4))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 716


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = treerecNew (Node (nat3) (btree3) (btree4))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
=================================================
Progress: 717


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 718


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), treerecNew (btree2) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = treerecNew (Empty)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 719


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = treerecNew (Empty)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree2(rank:11.)
=================================================
Progress: 720


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
Base4 : btree2 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 721


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
Base4 : btree2 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (Node (nat3) (btree3) (btree4)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 722


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (Node (nat3) (btree3) (btree4)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite IH1 in goal at 2(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH1 in goal at 1(rank:18.)
=================================================
Progress: 723


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 724


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), treerecNew (btree2) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (btree1:btree), treerecNew (Empty) = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 725


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (btree1:btree), treerecNew (Empty) = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:11.)
=================================================
Progress: 726


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
Base4 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 727


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
Base4 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = treerecNew (Node (nat3) (btree3) (btree4))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 728


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = treerecNew (Node (nat3) (btree3) (btree4))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
=================================================
Progress: 729


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 730


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat1:nat), treerecNew (Empty) = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 731


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat1:nat), treerecNew (Empty) = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 732


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
nat1 : nat
Base4 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 733


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
nat1 : nat
Base4 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 734


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 735


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
btree2 : btree
Base3 : btree2 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 736


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = plus (ZERO) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 737


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = plus (ZERO) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree2(rank:11.)
=================================================
Progress: 738


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
Base4 : btree2 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 739


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
Base4 : btree2 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (Node (nat3) (btree3) (btree4)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 740


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (Node (nat3) (btree3) (btree4)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite IH1 in goal at 2(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH1 in goal at 1(rank:18.)
=================================================
Progress: 741


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 742


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (treerecNew (Empty))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 743


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (treerecNew (Empty))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 744


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
nat1 : nat
Base4 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 745


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
nat1 : nat
Base4 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 746


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 747


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
btree1 : btree
Base3 : btree1 = Empty
nat1 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 748


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (treerecNew (btree1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 749


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (treerecNew (btree1))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:11.)
=================================================
Progress: 750


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
Base4 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 751


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
Base4 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = treerecNew (Node (nat3) (btree3) (btree4))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 752


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = treerecNew (Node (nat3) (btree3) (btree4))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
=================================================
Progress: 753


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 754


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), treerecNew (btree2) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = treerecNew (Empty)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 755


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = treerecNew (Empty)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree2(rank:11.)
=================================================
Progress: 756


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
---------------------------------------
forall (btree2:btree), treerecNew (btree2) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
Base4 : btree2 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 757


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
Base4 : btree2 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (Node (nat3) (btree3) (btree4)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 758


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (Node (nat3) (btree3) (btree4)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite IH1 in goal at 2(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH1 in goal at 1(rank:18.)
=================================================
Progress: 759


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 760


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), treerecNew (btree2) = treerecNew (btree1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (btree1:btree), treerecNew (Empty) = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 761


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (btree1:btree), treerecNew (Empty) = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:11.)
=================================================
Progress: 762


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

3 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
Base4 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 763


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
Base4 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = treerecNew (Node (nat3) (btree3) (btree4))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 764


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = treerecNew (Node (nat3) (btree3) (btree4))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
=================================================
Progress: 765


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 766


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
rewrite IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 3(rank:18.)
=================================================
Progress: 767


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 768


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 769


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 770


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 771


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 772


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 773


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 774


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 775


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 776


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 777


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree3)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite IH2 in goal at 0(rank:27.)
=================================================
Progress: 778


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 779


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 780


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
rewrite IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 3(rank:18.)
=================================================
Progress: 781


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 782


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 783


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 784


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 785


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 786


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 787


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 788


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 789


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 790


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 791


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree3)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite IH2 in goal at 0(rank:27.)
=================================================
Progress: 792


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 793


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 794


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
=================================================
Progress: 795


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:27.)
=================================================
Progress: 796


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
=================================================
Progress: 797


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 798


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 3(rank:26.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 799


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 800


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 801


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 802


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 803


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 804


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 805


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 806


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 807


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 808


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
=================================================
Progress: 809


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:27.)
=================================================
Progress: 810


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
=================================================
Progress: 811


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 812


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 3(rank:26.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 813


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 814


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 815


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 816


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 817


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 818


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 819


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 820


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 821


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 822


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
rewrite IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 3(rank:18.)
=================================================
Progress: 823


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 824


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 825


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 826


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 827


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 828


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 829


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 830


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 831


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 832


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 833


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree3)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite IH2 in goal at 0(rank:27.)
=================================================
Progress: 834


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 835


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 836


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
=================================================
Progress: 837


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:27.)
=================================================
Progress: 838


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
=================================================
Progress: 839


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 840


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 3(rank:26.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 841


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 842


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 843


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 844


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 845


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 846


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 847


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 848


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 849


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 850


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
rewrite IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 3(rank:18.)
=================================================
Progress: 851


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 852


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 853


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 854


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 855


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 856


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 857


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 858


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 859


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 860


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 861


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree3)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite IH2 in goal at 0(rank:27.)
=================================================
Progress: 862


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 863


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 864


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
=================================================
Progress: 865


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:27.)
=================================================
Progress: 866


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
=================================================
Progress: 867


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 868


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 3(rank:26.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 869


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 870


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 871


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 872


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 873


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 874


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 875


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 876


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 877


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 878


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
rewrite IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 3(rank:18.)
=================================================
Progress: 879


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 880


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 881


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 882


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 883


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 884


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 885


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 886


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 887


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 888


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 889


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree3)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite IH2 in goal at 0(rank:27.)
=================================================
Progress: 890


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 891


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 892


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
=================================================
Progress: 893


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:27.)
=================================================
Progress: 894


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
=================================================
Progress: 895


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 896


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 3(rank:26.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 897


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 898


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 899


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 900


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 901


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 902


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 903


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 904


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 905


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 906


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
rewrite IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 3(rank:18.)
=================================================
Progress: 907


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 908


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 909


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 910


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 911


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = ZERO

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 912


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 913


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 914


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 915


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 916


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 917


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree3)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite IH2 in goal at 0(rank:27.)
=================================================
Progress: 918


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 919


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 920


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
=================================================
Progress: 921


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:27.)
=================================================
Progress: 922


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
=================================================
Progress: 923


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 924


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 3(rank:26.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 925


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 926


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (ZERO) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 927


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 928


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 929


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 930


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 931


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 932


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 933


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 934


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 935


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO(rank : 0.)


1st goal of : forall (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 936


1st goal of : forall (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 937


1st goal of : forall (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 938


1st goal of : forall (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 939


1st goal of : forall (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:9.)
=================================================
Progress: 940


1st goal of : forall (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 9.)


1st goal of : forall (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 941


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Empty)))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
Lemma List
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 942


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 943


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 944


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 945


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 946


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 947


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:10.)
=================================================
Progress: 948


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
asdf
=================================================
Progress: 949


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 950


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 951


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 952


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:11.)
=================================================
Progress: 953


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 954


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 955


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 956


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 957


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 958


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
asdf
=================================================
Progress: 959


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 3(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 960


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 961


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))) then treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
=================================================
Progress: 962


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))))) else treerecNew (Empty)) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 963


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 964


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 965


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (Empty)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 966


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (Empty)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 967


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 968


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 969


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree2(rank:10.)
=================================================
Progress: 970


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> intro btree2(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 971


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))))) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 972


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 973


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 974


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 975


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Empty))) = ZERO
asdf
=================================================
Progress: 976


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 977


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 978


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 979


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
=================================================
Progress: 980


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
Prop: plus (ZERO) (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (SUCC (SUCC (ZERO))) (treerecNew (Empty)) = treerecNew (Empty)
asdf
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 981


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))) = treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))
Prop: plus (SUCC (SUCC (ZERO))) (treerecNew (Empty)) = treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))
asdf
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) = ZERO
Prop: plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) = ZERO
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) = ZERO
asdf
=================================================
Progress: 982


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH1 in goal at 2
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then treerecNew (Empty) else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))))))) else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))))) (Empty)) (Empty)) (Empty)) (Empty)))))))) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))))) (Empty)) (Empty)) (Empty)) (Empty)))))))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) (ZERO) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 983


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 984


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (nat1) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:10.)
=================================================
Progress: 985


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (nat1) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (btree1:btree), plus (ZERO) (nat1) = nat1

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 986


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (btree1:btree), plus (ZERO) (nat1) = nat1

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), plus (SUCC (nat3)) (nat1) = nat1

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 987


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), plus (SUCC (nat3)) (nat1) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro btree1(rank:9.)
intro nat1(rank:9.)
=================================================
Progress: 988


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
btree1 : btree
---------------------------------------
forall (nat1:nat), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 989


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
forall (btree1:btree), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (ZERO)) (SUCC (ZERO))) = SUCC (ZERO)
Prop: SUCC (plus (SUCC (ZERO)) (SUCC (ZERO))) = SUCC (ZERO)
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (SUCC (ZERO))) = SUCC (ZERO)
asdf
=================================================
Progress: 990


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
btree1 : btree
---------------------------------------
forall (nat1:nat), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
btree1 : btree
nat1 : nat
---------------------------------------
SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
intro nat1
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (SUCC (SUCC (ZERO)))) = SUCC (SUCC (ZERO))
Prop: SUCC (plus (ZERO) (SUCC (SUCC (ZERO)))) = SUCC (SUCC (ZERO))
asdf
=================================================
Progress: 991


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 2
rewrite <- IH1 in goal at 2
Prop: plus (ZERO) (if lq (SUCC (SUCC (ZERO))) (treerecNew (Empty)) then ZERO else SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty))) then ZERO else treerecNew (Empty)) = ZERO
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty)))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 992


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 993


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), plus (nat2) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:11.)
=================================================
Progress: 994


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), plus (nat2) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 995


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 996


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 997


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 998


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 999


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (SUCC (SUCC (ZERO)))) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1000


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) then treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))))) then treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1001


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))) then treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Empty)) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1002


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) (Empty)))) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) (Empty)))) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty)))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty)))) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty)))) = ZERO
asdf
=================================================
Progress: 1003


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 3(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1004


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1005


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty))) (Empty))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty))) (Empty))) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1006


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) = ZERO
asdf
=================================================
Progress: 1007


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then ZERO else treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1008


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:10.)
=================================================
Progress: 1009


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree2(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (btree1)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1010


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (btree1)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree1(rank:19.)
induction nat1(rank:19.)
=================================================
Progress: 1011


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1012


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1013


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty))))) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) = ZERO
asdf
Lemma List
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1014


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1015


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 1016


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1017


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1018


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree1(rank:9.)
=================================================
Progress: 1019


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
asdf
=================================================
Progress: 1020


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty)))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty)))) (Empty)) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1021


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty))) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1022


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1023


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1024


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:11.)
=================================================
Progress: 1025


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1026


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1027


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1028


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1029


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 1030


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
asdf
=================================================
Progress: 1031


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1032


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1033


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
=================================================
Progress: 1034


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) = ZERO
asdf
Lemma List
forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1035


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1

---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:10.)
=================================================
Progress: 1036


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1

---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), plus (ZERO) (nat1) = nat1

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1037


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), plus (ZERO) (nat1) = nat1

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), plus (SUCC (nat3)) (nat1) = nat1

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1038


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), plus (SUCC (nat3)) (nat1) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro nat1(rank:9.)
rewrite IH1 in goal at 0(rank:17.)
=================================================
Progress: 1039


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:9.)
=================================================
Progress: 1040


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
SUCC (nat1) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: SUCC (SUCC (ZERO)) = SUCC (ZERO)
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (ZERO) = ZERO
asdf
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (SUCC (ZERO))) = SUCC (ZERO)
Prop: SUCC (plus (ZERO) (SUCC (ZERO))) = SUCC (ZERO)
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (ZERO)) = ZERO
asdf
=================================================
Progress: 1041


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), SUCC (nat1) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
asdf
=================================================
Progress: 1042


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) = treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (Empty))) (Empty))) (Empty))
Prop: plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = treerecNew (Empty)
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
asdf
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1043


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH1 in goal at 2
Prop: plus (ZERO) (if lq (SUCC (SUCC (SUCC (ZERO)))) (ZERO) then treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) else SUCC (SUCC (SUCC (ZERO)))) = SUCC (SUCC (SUCC (ZERO)))
Prop: plus (ZERO) (if lq (SUCC (SUCC (ZERO))) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty)) (Empty))) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty)) (Empty))) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
=================================================
Progress: 1044


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 2
rewrite <- IH1 in goal at 2
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty)) (Empty))))) then ZERO else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Empty)) then ZERO else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) = treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))
previous tactics
simpl in goal
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1045


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1046


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then ZERO else treerecNew (Empty)) = treerecNew (Empty)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1047


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then ZERO else treerecNew (Empty)) = treerecNew (Empty)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (Empty)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:11.)
=================================================
Progress: 1048


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (Empty)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1049


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1050


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1051


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1052


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 1053


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1054


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 0
Prop: SUCC (SUCC (ZERO)) = plus (ZERO) (if lq (SUCC (SUCC (ZERO))) (ZERO) then ZERO else SUCC (SUCC (ZERO)))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (if lq (SUCC (ZERO)) (ZERO) then ZERO else SUCC (ZERO))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Empty)) (ZERO) then ZERO else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: SUCC (ZERO) = plus (SUCC (SUCC (ZERO))) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
validate generalize_common_subterm_goal
Prop: SUCC (SUCC (SUCC (ZERO))) = plus (SUCC (ZERO)) (if lq (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (SUCC (SUCC (ZERO))))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (ZERO))
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty))) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty))) (Empty)) (Empty)))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1055


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 1
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then treerecNew (Empty) else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (ZERO))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty)) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty)) (Empty)) (Empty)) else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: SUCC (SUCC (SUCC (ZERO))) = plus (ZERO) (if lq (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (SUCC (SUCC (ZERO))))
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (ZERO))
Prop: treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)) = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty))) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) else treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)))
Prop: treerecNew (Empty) = plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) else treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
Lemma List
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1056


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1057


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:10.)
=================================================
Progress: 1058


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1059


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1060


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro btree1(rank:9.)
intro nat1(rank:9.)
=================================================
Progress: 1061


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
btree1 : btree
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 1062


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
forall (btree1:btree), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = SUCC (plus (ZERO) (SUCC (ZERO)))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1063


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
btree1 : btree
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
btree1 : btree
nat1 : nat
---------------------------------------
nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
intro nat1
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = SUCC (plus (ZERO) (SUCC (ZERO)))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1064


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 2
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then ZERO else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then ZERO else ZERO)
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
Prop: treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) = plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (treerecNew (Empty)) then ZERO else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (if lq (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (ZERO))
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1065


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1066


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1067


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:11.)
=================================================
Progress: 1068


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1069


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1070


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1071


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1072


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:11.)
=================================================
Progress: 1073


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1074


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1075


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1076


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1077


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1078


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1079


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1080


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
Lemma List
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1081


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)(rank : 0.)


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1082


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 1083


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1084


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1085


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:9.)
=================================================
Progress: 1086


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 9.)


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
asdf
=================================================
Progress: 1087


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1088


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))))))) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1089


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty))) (Empty)) else treerecNew (Empty))
asdf
=================================================
Progress: 1090


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Node (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))
asdf
=================================================
Progress: 1091


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Empty) (Empty)) (Empty))) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then ZERO else treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1092


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)))))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty))))) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1093


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1094


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1095


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1096


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:11.)
=================================================
Progress: 1097


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1098


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1099


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1100


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1101


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:11.)
=================================================
Progress: 1102


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1103


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))))) (Empty)) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Node (SUCC (ZERO)) (Empty) (Empty))) (Node (SUCC (ZERO)) (Empty) (Empty))) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1104


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1105


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1106


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:11.)
=================================================
Progress: 1107


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1108


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1109


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1110


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1111


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:11.)
=================================================
Progress: 1112


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (SUCC (SUCC (ZERO)))) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
asdf
=================================================
Progress: 1113


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (ZERO)
Prop: ZERO = plus (ZERO) (ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (ZERO)
Prop: ZERO = plus (ZERO) (ZERO)
Prop: SUCC (SUCC (ZERO)) = plus (ZERO) (SUCC (SUCC (ZERO)))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))) (Empty))) (Node (ZERO) (Empty) (Empty)))))
asdf
Lemma List
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1114


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:10.)
=================================================
Progress: 1115


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1116


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1117


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro nat1(rank:9.)
rewrite <- IH1 in goal at 0(rank:17.)
=================================================
Progress: 1118


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:9.)
=================================================
Progress: 1119


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
nat1 = SUCC (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (ZERO)
Prop: SUCC (ZERO) = SUCC (SUCC (ZERO))
Prop: ZERO = SUCC (ZERO)
asdf
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: SUCC (ZERO) = SUCC (plus (ZERO) (SUCC (ZERO)))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1120


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = SUCC (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (SUCC (ZERO)) = SUCC (plus (ZERO) (SUCC (SUCC (ZERO))))
Prop: SUCC (ZERO) = SUCC (plus (ZERO) (SUCC (ZERO)))
Prop: SUCC (ZERO) = SUCC (plus (ZERO) (SUCC (ZERO)))
asdf
=================================================
Progress: 1121


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 1122


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Empty) = plus (ZERO) (ZERO)
Prop: treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty)))) = plus (ZERO) (ZERO)
Prop: treerecNew (Empty) = plus (ZERO) (ZERO)
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))
Prop: treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)))) = plus (ZERO) (treerecNew (Empty))
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))
asdf
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))
Prop: ZERO = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Lemma List
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1123


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree1(rank:18.)
induction nat1(rank:18.)
=================================================
Progress: 1124


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree1(rank:18.)
induction nat1(rank:18.)
=================================================
Progress: 1125


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat1 : nat
Base2 : nat1 = ZERO
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
=================================================
Progress: 1126


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 0
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
validate generalize_common_subterm_goal
Prop: SUCC (SUCC (ZERO)) = plus (SUCC (ZERO)) (if lq (SUCC (SUCC (ZERO))) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (SUCC (ZERO)))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) then treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
Lemma List
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1127


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1128


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:10.)
=================================================
Progress: 1129


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1130


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1131


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro nat1(rank:9.)
rewrite <- IH1 in goal at 0(rank:17.)
=================================================
Progress: 1132


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:9.)
=================================================
Progress: 1133


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
nat1 = SUCC (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (ZERO)
Prop: ZERO = SUCC (ZERO)
Prop: SUCC (ZERO) = SUCC (SUCC (ZERO))
asdf
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1134


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = SUCC (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = SUCC (plus (ZERO) (SUCC (ZERO)))
Prop: SUCC (ZERO) = SUCC (plus (ZERO) (SUCC (ZERO)))
Prop: SUCC (ZERO) = SUCC (plus (ZERO) (SUCC (ZERO)))
asdf
=================================================
Progress: 1135


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 1
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))))
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty))) (Empty))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty))) (Empty))) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty)) else treerecNew (Empty))
asdf
Lemma List
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1136


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 1137


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:11.)
=================================================
Progress: 1138


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1139


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1140


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1141


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1142


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:11.)
=================================================
Progress: 1143


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1144


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 2
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) else ZERO)
Prop: SUCC (SUCC (ZERO)) = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Empty)) else SUCC (SUCC (ZERO)))
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
Lemma List
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1145


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 1146


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:11.)
=================================================
Progress: 1147


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1148


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1149


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1150


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1151


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:11.)
=================================================
Progress: 1152


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1153


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1154


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1155


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1156


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1157


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1158


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1159


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (ZERO) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1160


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
asdf
=================================================
Progress: 1161


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))
asdf
=================================================
Progress: 1162


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) (Empty)) (Node (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Empty) (Empty)))) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) (Empty)) (Node (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Empty) (Empty))))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
Lemma List
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1163


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1164


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree1(rank:18.)
induction nat1(rank:18.)
=================================================
Progress: 1165


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Empty))))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))
=================================================
Progress: 1166


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1167


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:10.)
=================================================
Progress: 1168


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:10.)
=================================================
Progress: 1169


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree2(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1170


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree2(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1171


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree1(rank:19.)
induction nat1(rank:19.)
=================================================
Progress: 1172


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree1(rank:19.)
induction nat1(rank:19.)
=================================================
Progress: 1173


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))))) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else ZERO)
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
Lemma List
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1174


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1175


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (ZERO)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 1176


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (ZERO)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1177


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1178


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree1(rank:9.)
=================================================
Progress: 1179


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (SUCC (SUCC (ZERO))) (ZERO))
asdf
=================================================
Progress: 1180


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) (Empty)) (Empty))) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
=================================================
Progress: 1181


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
=================================================
Progress: 1182


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (ZERO)
Prop: SUCC (SUCC (ZERO)) = plus (ZERO) (SUCC (SUCC (ZERO)))
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (SUCC (ZERO))
Prop: ZERO = plus (ZERO) (ZERO)
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Empty)))
Prop: ZERO = plus (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) (Empty))))
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
asdf
=================================================
Progress: 1183


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 1184


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) = plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO)
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (SUCC (ZERO)) (ZERO)
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty)))
Prop: treerecNew (Empty) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
=================================================
Progress: 1185


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
nat2 : nat
Base2 : nat2 = ZERO
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
=================================================
Progress: 1186


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) else treerecNew (Empty)) = ZERO
=================================================
Progress: 1187


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) = ZERO
asdf
Lemma List
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1188


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1189


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 1190


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1191


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1192


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree1(rank:9.)
=================================================
Progress: 1193


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
asdf
=================================================
Progress: 1194


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))))) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty)))) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty)) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty)))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) = ZERO
asdf
=================================================
Progress: 1195


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 3(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1196


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1197


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1198


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty)))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
=================================================
Progress: 1199


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1200


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1201


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1202


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))) = ZERO
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1203


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1204


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1205


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:11.)
=================================================
Progress: 1206


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1207


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1208


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1209


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1210


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 1211


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1212


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1213


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1214


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1215


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1216


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
=================================================
Progress: 1217


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
Prop: plus (ZERO) (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1218


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) = treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1219


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
induction btree1(rank:18.)
induction btree2(rank:18.)
induction nat1(rank:18.)
=================================================
Progress: 1220


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH1 in goal at 2
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (SUCC (SUCC (ZERO))) (ZERO) then treerecNew (Empty) else SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (SUCC (SUCC (ZERO))) (ZERO) then treerecNew (Empty) else SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))
previous tactics
simpl in goal
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1221


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1222


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1223


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (Empty)) = treerecNew (Empty)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1224


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (Empty)) = treerecNew (Empty)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 1225


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1226


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1227


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree2(rank:10.)
=================================================
Progress: 1228


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> intro btree2(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = treerecNew (btree1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
asdf
=================================================
Progress: 1229


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 2
rewrite <- IH1 in goal at 2
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then ZERO else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then ZERO else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) = ZERO
asdf
=================================================
Progress: 1230


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 0
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then ZERO else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else ZERO)
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then ZERO else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO)
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) = plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty)) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1231


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 1
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then treerecNew (Empty) else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (ZERO))
Prop: SUCC (SUCC (ZERO)) = plus (ZERO) (if lq (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) else SUCC (SUCC (ZERO)))
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
=================================================
Progress: 1232


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 2
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (if lq (SUCC (ZERO)) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))))))) (Empty))) (Empty))))) then treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))))))) (Empty))) (Empty)))) else SUCC (ZERO))
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)))))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))))))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))))
asdf
=================================================
Progress: 1233


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1234


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1235


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1236


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1237


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1238


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1239


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
=================================================
Progress: 1240


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Empty))) then treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)))
asdf
Lemma List
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1241


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1242


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (ZERO)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 1243


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (ZERO)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1244


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1245


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree1(rank:9.)
=================================================
Progress: 1246


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
asdf
=================================================
Progress: 1247


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))))) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO))))))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) (Node (SUCC (ZERO)) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) (Node (SUCC (ZERO)) (Empty) (Empty))) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
=================================================
Progress: 1248


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty))))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)))) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)))))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) (Empty)) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
=================================================
Progress: 1249


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))))) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)) (Empty))))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)) (Empty)))))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1250


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty)))))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1251


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (ZERO) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1252


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)))))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))))) else treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
=================================================
Progress: 1253


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))))) (treerecNew (Empty)) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) (Empty)) else ZERO)
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty)) else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))
asdf
=================================================
Progress: 1254


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (SUCC (ZERO)) (ZERO)
Prop: ZERO = plus (ZERO) (ZERO)
Prop: ZERO = plus (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: SUCC (SUCC (ZERO)) = plus (ZERO) (SUCC (SUCC (ZERO)))
Prop: SUCC (ZERO) = plus (ZERO) (SUCC (ZERO))
Prop: ZERO = plus (SUCC (ZERO)) (ZERO)
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)))
asdf
Lemma List
forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1255


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree1(rank:18.)
induction nat1(rank:18.)
=================================================
Progress: 1256


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 1257


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Empty) = plus (ZERO) (ZERO)
Prop: treerecNew (Empty) = plus (ZERO) (ZERO)
Prop: treerecNew (Empty) = plus (SUCC (SUCC (ZERO))) (ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1258


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
induction btree1(rank:18.)
induction btree2(rank:18.)
induction nat1(rank:18.)
=================================================
Progress: 1259


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat2 : nat
Base3 : nat2 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
=================================================
Progress: 1260


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
=================================================
Progress: 1261


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1262


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) (Empty)))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1263


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 3(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1264


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1265


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty))) (Empty))) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) = ZERO
=================================================
Progress: 1266


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty))))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty))) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty))) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (ZERO)) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (ZERO)) (Empty) (Empty))) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
=================================================
Progress: 1267


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1268


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:10.)
=================================================
Progress: 1269


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree2(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (btree1)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1270


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (btree1)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree1(rank:19.)
induction nat1(rank:19.)
=================================================
Progress: 1271


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1272


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1273


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty))) (ZERO) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)))) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
asdf
=================================================
Progress: 1274


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)) (Empty)) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1275


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1276


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 1277


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1278


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1279


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro btree1(rank:9.)
intro btree2(rank:9.)
=================================================
Progress: 1280


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree2(rank:9.)
=================================================
Progress: 1281


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
forall (btree1:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1282


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
intro btree2
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1283


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty)) (Empty))) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1284


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1285


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1286


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
=================================================
Progress: 1287


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) = ZERO
=================================================
Progress: 1288


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
asdf
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Lemma List
forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1289


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree1(rank:18.)
induction nat1(rank:18.)
=================================================
Progress: 1290


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH1 in goal at 2
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (SUCC (ZERO)) (ZERO) then treerecNew (Empty) else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then treerecNew (Empty) else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = treerecNew (Node (ZERO) (Empty) (Empty))
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = treerecNew (Node (ZERO) (Empty) (Empty))
previous tactics
simpl in goal
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1291


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1292


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1293


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (Empty)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1294


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (Empty)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 1295


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1296


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1297


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree2(rank:10.)
=================================================
Progress: 1298


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> intro btree2(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1299


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 2
rewrite <- IH1 in goal at 2
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then ZERO else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1300


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 0
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then ZERO else SUCC (ZERO))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then ZERO else SUCC (ZERO))
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then ZERO else SUCC (ZERO))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty)))))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty))))) (Empty)) (Empty)) (Empty)) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty)))))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty))))) (Empty)) (Empty)) (Empty)) (Empty)) else ZERO)
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (ZERO))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: treerecNew (Empty) = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else treerecNew (Empty))
Prop: treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))))
asdf
=================================================
Progress: 1301


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 1
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then treerecNew (Empty) else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (ZERO) (Empty) (Empty))) else ZERO)
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) = plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) else treerecNew (Empty))
asdf
=================================================
Progress: 1302


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 2
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: SUCC (SUCC (SUCC (ZERO))) = plus (ZERO) (if lq (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (SUCC (SUCC (ZERO))))
Prop: ZERO = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) else ZERO)
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (ZERO))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) (Empty))) = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) (Empty))))
Prop: treerecNew (Empty) = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1303


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1304


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1305


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1306


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1307


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1308


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1309


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1310


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty))) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty))) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty)))
asdf
=================================================
Progress: 1311


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty))) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty))
asdf
=================================================
Progress: 1312


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1313


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Empty))) (Node (ZERO) (Empty) (Empty))))
Prop: ZERO = plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
=================================================
Progress: 1314


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (Empty)) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (Empty)) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) else treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))))) else treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
=================================================
Progress: 1315


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))))) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))))) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
=================================================
Progress: 1316


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)) (Empty)))) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty)) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1317


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty))) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1318


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (ZERO)
Prop: ZERO = plus (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (ZERO)
Prop: ZERO = plus (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
Prop: SUCC (SUCC (SUCC (ZERO))) = plus (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO))))
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
=================================================
Progress: 1319


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 1320


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Empty) = plus (ZERO) (ZERO)
Prop: treerecNew (Empty) = plus (ZERO) (ZERO)
Prop: treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) = plus (SUCC (ZERO)) (ZERO)
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)))
asdf
=================================================
Progress: 1321


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
=================================================
Progress: 1322


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
=================================================
Progress: 1323


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
=================================================
Progress: 1324


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (Empty)) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1325


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 3(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1326


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1327


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1328


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1329


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then ZERO else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1330


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1331


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1332


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1333


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty)) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1334


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty))) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty)))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty))) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1335


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1336


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1337


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
=================================================
Progress: 1338


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
asdf
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) = ZERO
Prop: plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
=================================================
Progress: 1339


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (treerecNew (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty)) (Empty)) (Empty)))) = treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))) (Empty)) (Empty))) = treerecNew (Empty)
asdf
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1340


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH1 in goal at 2
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (SUCC (ZERO)) (ZERO) then treerecNew (Empty) else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (if lq (SUCC (SUCC (ZERO))) (ZERO) then treerecNew (Empty) else SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then treerecNew (Empty) else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (if lq (SUCC (SUCC (ZERO))) (ZERO) then treerecNew (Empty) else SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then treerecNew (Empty) else SUCC (ZERO)) = SUCC (ZERO)
previous tactics
simpl in goal
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))))))) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))))))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1341


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 2
rewrite <- IH1 in goal at 2
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))))) then ZERO else ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then ZERO else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then ZERO else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then ZERO else treerecNew (Node (ZERO) (Empty) (Empty))) = treerecNew (Node (ZERO) (Empty) (Empty))
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) (treerecNew (Empty)) then ZERO else treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) = treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = treerecNew (Empty)
previous tactics
simpl in goal
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
asdf
=================================================
Progress: 1342


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 0
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then ZERO else SUCC (ZERO))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (ZERO) then ZERO else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (if lq (SUCC (ZERO)) (ZERO) then ZERO else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else treerecNew (Empty))
Prop: treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) = plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) (ZERO) then ZERO else treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: SUCC (SUCC (ZERO)) = plus (ZERO) (if lq (SUCC (SUCC (ZERO))) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (SUCC (ZERO)))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty)) = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty)))
Prop: treerecNew (Empty) = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))))))
asdf
Lemma List
forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1343


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1344


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree1(rank:18.)
induction nat1(rank:18.)
=================================================
Progress: 1345


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 1
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO)
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: SUCC (SUCC (SUCC (ZERO))) = plus (SUCC (ZERO)) (if lq (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (SUCC (SUCC (ZERO))))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (ZERO))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))))) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1346


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 2
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO)
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then ZERO else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else treerecNew (Empty))
Prop: treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Empty)) then ZERO else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO)
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
=================================================
Progress: 1347


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1348


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1349


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1350


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1351


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1352


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1353


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty))) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1354


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)))) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)))) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))))) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))))) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))) then treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) else treerecNew (Empty))
asdf
=================================================
Progress: 1355


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) else treerecNew (Empty))
asdf
=================================================
Progress: 1356


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))) (Empty)) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)))
asdf
=================================================
Progress: 1357


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))))
asdf
=================================================
Progress: 1358


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) (Empty))) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
asdf
=================================================
Progress: 1359


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Node (ZERO) (Empty) (Empty))) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) then treerecNew (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1360


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
=================================================
Progress: 1361


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))))) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
asdf
=================================================
Progress: 1362


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (ZERO)
Prop: SUCC (SUCC (ZERO)) = plus (ZERO) (SUCC (SUCC (ZERO)))
Prop: ZERO = plus (ZERO) (ZERO)
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (treerecNew (Empty))
asdf
=================================================
Progress: 1363


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 1364


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Empty) = plus (ZERO) (ZERO)
Prop: treerecNew (Empty) = plus (ZERO) (ZERO)
Prop: treerecNew (Empty) = plus (ZERO) (ZERO)
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (ZERO) (treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Empty))
Prop: treerecNew (Empty) = plus (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))))
asdf
=================================================
Progress: 1365


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
=================================================
Progress: 1366


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
=================================================
Progress: 1367


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
=================================================
Progress: 1368


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1369


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 3(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1370


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1371


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty))) (Empty)) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty))) (Empty)) (Empty)) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1372


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1373


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1374


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1375


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1376


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1377


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (ZERO) then treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) (Node (ZERO) (Empty) (Empty))) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1378


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)))) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty)) (Empty)) (Empty))) (Empty))) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) = ZERO
asdf
=================================================
Progress: 1379


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1380


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
plus (nat3) (treerecNew (btree4)) = treerecNew (btree4)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1381


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (ZERO) = ZERO

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
=================================================
Progress: 1382


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Empty) (Empty))) = treerecNew (Node (ZERO) (Empty) (Empty))
asdf
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) = ZERO
Prop: plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
asdf
=================================================
Progress: 1383


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (treerecNew (btree3)) = treerecNew (btree4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Empty) (Empty))) = treerecNew (Empty)
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Empty))))) = treerecNew (Empty)
asdf
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
=================================================
Progress: 1384


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH1 in goal at 2
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1385


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = ZERO

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree1 : btree
Base3 : btree1 = Empty
btree2 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : treerecNew (btree3) = ZERO
IH2 : treerecNew (btree4) = ZERO
Inductive1 : btree2 = Node (nat3) (btree3) (btree4)
---------------------------------------
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3)) = treerecNew (btree3)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 2
rewrite <- IH1 in goal at 2
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (SUCC (SUCC (ZERO))) (treerecNew (Empty)) then ZERO else SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Empty)) then ZERO else SUCC (SUCC (SUCC (ZERO)))) = SUCC (SUCC (SUCC (ZERO)))
Prop: plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then ZERO else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))))) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))))))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))))))) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1386


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 0
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (if lq (SUCC (ZERO)) (ZERO) then ZERO else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then ZERO else SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (ZERO) then ZERO else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: SUCC (SUCC (ZERO)) = plus (SUCC (ZERO)) (if lq (SUCC (SUCC (ZERO))) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (SUCC (ZERO)))
Prop: SUCC (SUCC (ZERO)) = plus (SUCC (SUCC (ZERO))) (if lq (SUCC (SUCC (ZERO))) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (SUCC (ZERO)))
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) (Empty)) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) (Empty)) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty))
asdf
=================================================
Progress: 1387


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 1
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then treerecNew (Empty) else SUCC (ZERO))
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then treerecNew (Empty) else SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else SUCC (ZERO))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else treerecNew (Empty))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: SUCC (SUCC (SUCC (ZERO))) = plus (SUCC (ZERO)) (if lq (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (SUCC (SUCC (ZERO))))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1388


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1389


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1390


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), treerecNew (Empty) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1391


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), treerecNew (Empty) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 1392


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1393


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree2:btree), ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1394


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree2(rank:10.)
=================================================
Progress: 1395


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree2:btree), ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
>>> intro btree2(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (btree2:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1396


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 2
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then ZERO else SUCC (ZERO))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) then ZERO else SUCC (ZERO))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then ZERO else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: SUCC (SUCC (SUCC (ZERO))) = plus (SUCC (ZERO)) (if lq (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else SUCC (SUCC (SUCC (ZERO))))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))))) then treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))) else ZERO)
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1397


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1398


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1399


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1400


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (ZERO) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1401


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree3)) (treerecNew (btree4))(rank:11.)
=================================================
Progress: 1402


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (treerecNew (btree3)) (treerecNew (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
Case1 : lq (treerecNew (btree3)) (treerecNew (btree4)) = true
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1403


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty))))
asdf
=================================================
Progress: 1404


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) (Empty))) else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))))
asdf
=================================================
Progress: 1405


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else treerecNew (Empty))
asdf
Lemma List
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1406


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1407


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1408


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 1409


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1410


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1411


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 1412


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1413


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1414


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (ZERO) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1415


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (ZERO) (treerecNew (btree4)) then ZERO else treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty))) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) then ZERO else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty)))) else treerecNew (Empty))
asdf
=================================================
Progress: 1416


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty))) then treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
asdf
=================================================
Progress: 1417


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (ZERO) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO))))))) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
asdf
=================================================
Progress: 1418


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then ZERO else ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat3) (if lq (treerecNew (btree3)) (treerecNew (btree4)) then treerecNew (btree4) else treerecNew (btree3))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree4)
remove lower
treerecNew(btree4)
remove upper
plus(nat3, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1419


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree3) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH1 in goal at 0
Prop: SUCC (SUCC (ZERO)) = plus (ZERO) (SUCC (SUCC (ZERO)))
Prop: ZERO = plus (ZERO) (ZERO)
Prop: ZERO = plus (ZERO) (ZERO)
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))
asdf
=================================================
Progress: 1420


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 1421


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
treerecNew (btree4) = plus (nat3) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Empty) = plus (ZERO) (ZERO)
Prop: treerecNew (Empty) = plus (ZERO) (ZERO)
Prop: treerecNew (Empty) = plus (ZERO) (ZERO)
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Empty) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
Prop: treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (ZERO) (treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
asdf
=================================================
Progress: 1422


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (nat2:nat), plus (nat2) (treerecNew (btree2)) = plus (nat1) (treerecNew (btree1))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
btree2 : btree
Base3 : btree2 = Empty
btree1 : btree
nat3 : nat
btree3 : btree
btree4 : btree
IH1 : ZERO = treerecNew (btree3)
IH2 : ZERO = treerecNew (btree4)
Inductive1 : btree1 = Node (nat3) (btree3) (btree4)
---------------------------------------
ZERO = plus (nat3) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
=================================================
Progress: 1423


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1424


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 1425


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1426


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1427


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 1428


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1429


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1430


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:11.)
=================================================
Progress: 1431


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1432


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = treerecNew (Node (nat2) (btree2) (btree3))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1433


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = treerecNew (Node (nat2) (btree2) (btree3))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
=================================================
Progress: 1434


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1435


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), treerecNew (Empty) = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1436


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), treerecNew (Empty) = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 1437


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1438


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1439


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 1440


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1441


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = plus (ZERO) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1442


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = plus (ZERO) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:11.)
=================================================
Progress: 1443


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1444


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (Node (nat2) (btree2) (btree3)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1445


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (Node (nat2) (btree2) (btree3)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite IH1 in goal at 2(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH1 in goal at 1(rank:18.)
=================================================
Progress: 1446


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1447


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1448


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 1449


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1450


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1451


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 1452


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1453


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1454


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:11.)
=================================================
Progress: 1455


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = treerecNew (btree1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1456


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
ZERO = treerecNew (Empty)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = treerecNew (Node (nat2) (btree2) (btree3))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1457


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = treerecNew (Node (nat2) (btree2) (btree3))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
=================================================
Progress: 1458


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1459


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (Empty)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1460


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (Empty)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (ZERO) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree2(rank:19.)
induction nat1(rank:19.)
=================================================
Progress: 1461


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (Empty)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1462


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (Empty)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree1(rank:19.)
induction nat1(rank:19.)
=================================================
Progress: 1463


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (ZERO) (treerecNew (btree1)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1464


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (ZERO) (treerecNew (btree1)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree2)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), treerecNew (btree1) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree1(rank:19.)
induction btree2(rank:19.)
=================================================
Progress: 1465


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), treerecNew (Empty) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1466


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), treerecNew (Empty) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 1467


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1468


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1469


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 1470


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1471


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = plus (ZERO) (treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1472


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = plus (ZERO) (treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = plus (SUCC (nat2)) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1473


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = plus (SUCC (nat2)) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = SUCC (plus (nat2) (treerecNew (btree1)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:17.)
induction btree1(rank:18.)
=================================================
Progress: 1474


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = SUCC (plus (nat2) (treerecNew (btree1)))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = SUCC (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1475


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = SUCC (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
treerecNew (Empty) = SUCC (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1476


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
treerecNew (Empty) = SUCC (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
ZERO = SUCC (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
=================================================
Progress: 1477


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1478


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree2(rank:19.)
induction nat1(rank:19.)
=================================================
Progress: 1479


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree2(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), treerecNew (Empty) = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1480


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), treerecNew (Empty) = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree1(rank:19.)
induction nat1(rank:19.)
=================================================
Progress: 1481


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), treerecNew (btree2) = plus (ZERO) (treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1482


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), treerecNew (btree2) = plus (ZERO) (treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), treerecNew (btree2) = treerecNew (btree1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction btree1(rank:19.)
induction btree2(rank:19.)
=================================================
Progress: 1483


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (treerecNew (Empty)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1484


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (treerecNew (Empty)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 1485


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1486


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1487


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:10.)
=================================================
Progress: 1488


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1489


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (treerecNew (btree1)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1490


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (treerecNew (btree1)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:11.)
=================================================
Progress: 1491


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1492


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
treerecNew (Empty) = ZERO

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (Node (nat2) (btree2) (btree3)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1493


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (Node (nat2) (btree2) (btree3)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite IH1 in goal at 2(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH1 in goal at 1(rank:18.)
=================================================
Progress: 1494


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1495


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), treerecNew (Empty) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1496


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), treerecNew (Empty) = plus (nat1) (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 1497


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1498


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1499


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 1500


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1501


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = plus (ZERO) (treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1502


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = plus (ZERO) (treerecNew (btree1))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = plus (SUCC (nat2)) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1503


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = plus (SUCC (nat2)) (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = SUCC (plus (nat2) (treerecNew (btree1)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:17.)
induction btree1(rank:18.)
=================================================
Progress: 1504


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = SUCC (plus (nat2) (treerecNew (btree1)))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = SUCC (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1505


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = SUCC (treerecNew (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
treerecNew (Empty) = SUCC (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1506


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
treerecNew (Empty) = SUCC (treerecNew (Empty))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
ZERO = SUCC (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
=================================================
Progress: 1507


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
=================================================
Progress: 1508


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
treerecNew (btree2) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:27.)
=================================================
Progress: 1509


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
=================================================
Progress: 1510


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
treerecNew (btree3) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1511


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree3))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 3(rank:26.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 1512


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1513


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case lq (ZERO) (treerecNew (btree3))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 1514


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1515


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 1516


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1517


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1518


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 1519


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 1520


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 1521


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case lq (ZERO) (treerecNew (btree3))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
rewrite IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 3(rank:18.)
=================================================
Progress: 1522


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1523


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree3))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 1524


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1525


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 1526


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1527


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1528


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 1529


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 1530


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 1531


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1532


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = treerecNew (btree2)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite IH2 in goal at 0(rank:27.)
=================================================
Progress: 1533


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1534


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = treerecNew (btree3)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1535


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
=================================================
Progress: 1536


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
treerecNew (btree2) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:27.)
=================================================
Progress: 1537


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
=================================================
Progress: 1538


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
treerecNew (btree3) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1539


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree3))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 3(rank:26.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 1540


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1541


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case lq (ZERO) (treerecNew (btree3))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 1542


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1543


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
=================================================
Progress: 1544


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1545


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1546


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 1547


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 1548


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 1549


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = SUCC (plus (nat2) (treerecNew (btree1)))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
treerecNew (Empty) = SUCC (plus (nat2) (treerecNew (Empty)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1550


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
treerecNew (Empty) = SUCC (plus (nat2) (treerecNew (Empty)))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1551


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case lq (ZERO) (treerecNew (btree3))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
rewrite IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 3(rank:18.)
=================================================
Progress: 1552


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1553


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case lq (ZERO) (treerecNew (btree3))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 1554


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1555


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
=================================================
Progress: 1556


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = ZERO

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1557


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1558


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 1559


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 1560


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
=================================================
Progress: 1561


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1562


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = treerecNew (btree2)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite IH2 in goal at 0(rank:27.)
=================================================
Progress: 1563


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1564


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = treerecNew (btree3)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1565


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), treerecNew (btree1) = SUCC (plus (nat2) (treerecNew (btree1)))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
treerecNew (Empty) = SUCC (plus (nat2) (treerecNew (Empty)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1566


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
treerecNew (Empty) = SUCC (plus (nat2) (treerecNew (Empty)))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), treerecNew (btree1) = plus (nat2) (treerecNew (btree1))
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1567


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 0
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) else SUCC (ZERO))
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: SUCC (ZERO) = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (ZERO))
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else SUCC (ZERO))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty))) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty))) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) else treerecNew (Empty))
asdf
Lemma List
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1568


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1569


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1570


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1571


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1572


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro nat1(rank:11.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 1573


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:11.)
=================================================
Progress: 1574


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
nat1 = SUCC (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (ZERO)
Prop: SUCC (ZERO) = SUCC (SUCC (ZERO))
Prop: ZERO = SUCC (ZERO)
asdf
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Prop: SUCC (SUCC (ZERO)) = SUCC (plus (ZERO) (SUCC (SUCC (ZERO))))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1575


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 1
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty))) else ZERO)
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
asdf
Lemma List
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Lemma List
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1576


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1577


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1578


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1579


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:13.)
=================================================
Progress: 1580


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1581


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1582


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro btree1(rank:11.)
intro nat1(rank:11.)
=================================================
Progress: 1583


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
btree1 : btree
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1584


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
forall (btree1:btree), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = SUCC (plus (ZERO) (SUCC (ZERO)))
Prop: SUCC (ZERO) = SUCC (plus (ZERO) (SUCC (ZERO)))
Prop: SUCC (SUCC (ZERO)) = SUCC (plus (ZERO) (SUCC (SUCC (ZERO))))
asdf
=================================================
Progress: 1585


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
btree1 : btree
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
btree1 : btree
nat1 : nat
---------------------------------------
nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
intro nat1
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: SUCC (ZERO) = SUCC (plus (ZERO) (SUCC (ZERO)))
Prop: SUCC (SUCC (ZERO)) = SUCC (plus (SUCC (ZERO)) (SUCC (SUCC (ZERO))))
asdf
=================================================
Progress: 1586


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)

1 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1587


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat2(rank:14.)
=================================================
Progress: 1588


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> induction nat2(rank : 14.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1589


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1590


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:13.)
=================================================
Progress: 1591


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1592


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 2
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
validate generalize_common_subterm_goal
Prop: SUCC (SUCC (ZERO)) = plus (ZERO) (if lq (SUCC (SUCC (ZERO))) (treerecNew (Empty)) then ZERO else SUCC (SUCC (ZERO)))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then ZERO else SUCC (ZERO))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else treerecNew (Empty))
Prop: treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) = plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then ZERO else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then ZERO else treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: SUCC (ZERO) = plus (SUCC (SUCC (ZERO))) (if lq (SUCC (ZERO)) (treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)) else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) else ZERO)
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1593


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1594


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
treerecNew (btree3) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1595


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1596


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
treerecNew (btree3) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1597


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1598


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
treerecNew (btree3) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1599


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Empty))
asdf
Lemma List
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1600


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)(rank : 0.)


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1601


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1602


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1603


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1604


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:11.)
=================================================
Progress: 1605


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
asdf
=================================================
Progress: 1606


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) (Empty)) else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty)) (Empty)) else treerecNew (Empty))
asdf
Lemma List
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1607


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1608


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1609


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1610


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1611


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro btree1(rank:11.)
=================================================
Progress: 1612


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1613


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) (Empty) (Empty))) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1614


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 1615


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 1616


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1617


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1618


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree2(rank:13.)
=================================================
Progress: 1619


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 1620


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty))

1 goal(s) more...

4 conjecture(s) more...
>>> induction btree2(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1621


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

1 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 1622


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1623


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:12.)
=================================================
Progress: 1624


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (SUCC (SUCC (SUCC (ZERO)))) (ZERO))
asdf
=================================================
Progress: 1625


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 1626


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1627


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1628


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:13.)
=================================================
Progress: 1629


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1630


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty)))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))) else treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Empty))
asdf
Lemma List
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1631


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1632


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
induction btree1(rank:20.)
induction nat1(rank:20.)
=================================================
Progress: 1633


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1634


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) then ZERO else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty))) then ZERO else treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1635


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1636


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 1637


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1638


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree2(rank:13.)
=================================================
Progress: 1639


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

1 goal(s) more...

4 conjecture(s) more...
>>> induction btree2(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1640


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 1641


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1642


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1643


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:13.)
=================================================
Progress: 1644


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (SUCC (SUCC (SUCC (ZERO)))) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1645


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) else treerecNew (Empty))
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1646


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1647


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1648


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1649


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), ZERO = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1650


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), ZERO = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro btree1(rank:11.)
intro btree2(rank:11.)
=================================================
Progress: 1651


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree), ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro btree2(rank:11.)
=================================================
Progress: 1652


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
forall (btree1:btree), ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (SUCC (ZERO))) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1653


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree), ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
intro btree2
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (SUCC (SUCC (ZERO))) (ZERO))
asdf
=================================================
Progress: 1654


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty))) (Empty))) (treerecNew (Empty)) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1655


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 1656


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then ZERO else ZERO)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1657


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then ZERO else ZERO)

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else ZERO)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree2(rank:13.)
=================================================
Progress: 1658


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else ZERO)

1 goal(s) more...

4 conjecture(s) more...
>>> induction btree2(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1659


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 1660


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1661


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1662


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:13.)
=================================================
Progress: 1663


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
asdf
=================================================
Progress: 1664


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (ZERO)
Prop: SUCC (SUCC (ZERO)) = plus (ZERO) (SUCC (SUCC (ZERO)))
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (ZERO)
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (SUCC (ZERO))
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Empty))
Prop: treerecNew (Empty) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty)))
asdf
=================================================
Progress: 1665


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 1666


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (ZERO)
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (ZERO) (ZERO)
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (ZERO) (ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: treerecNew (Empty) = plus (ZERO) (treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (treerecNew (Empty))
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1667


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree2) = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
induction btree1(rank:20.)
induction btree2(rank:20.)
induction nat1(rank:20.)
=================================================
Progress: 1668


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
=================================================
Progress: 1669


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)))))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))))) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1670


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (ZERO) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
=================================================
Progress: 1671


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
Lemma List
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1672


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 1673


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1674


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 1675


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 1676


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1677


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:12.)
=================================================
Progress: 1678


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1679


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 3(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1680


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = treerecNew (btree3)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1681


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) = ZERO
asdf
Lemma List
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1)) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1682


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1)) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1683


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
induction btree1(rank:20.)
induction nat1(rank:20.)
=================================================
Progress: 1684


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (ZERO) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty))) (Empty))) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty)))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1685


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty)))) then ZERO else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1686


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 1687


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree2(rank:12.)
=================================================
Progress: 1688


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1689


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree2(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (btree1)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1690


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree2(rank:13.)
=================================================
Progress: 1691


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (btree1)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
induction btree1(rank:21.)
induction nat1(rank:21.)
=================================================
Progress: 1692


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> induction btree2(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1693


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 1694


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1695


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1696


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:13.)
=================================================
Progress: 1697


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1698


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1699


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = treerecNew (btree3)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1700


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1701


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1702


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1703


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1704


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1705


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro btree1(rank:11.)
=================================================
Progress: 1706


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1707


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1708


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1709


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1710


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1711


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1712


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro btree1(rank:11.)
intro btree2(rank:11.)
=================================================
Progress: 1713


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro btree2(rank:11.)
=================================================
Progress: 1714


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
forall (btree1:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1715


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
intro btree2
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1716


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty)))) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty))) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) then treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1717


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1718


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = treerecNew (btree3)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1719


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
=================================================
Progress: 1720


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (SUCC (SUCC (ZERO))) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree1)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1721


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree1)(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree1)

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = treerecNew (btree1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
induction btree1(rank:20.)
induction nat1(rank:20.)
=================================================
Progress: 1722


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)))
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) = treerecNew (Empty)
asdf
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty))) (Empty)) (Empty))) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1723


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH1 in goal at 2
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Empty))) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then treerecNew (Empty) else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (SUCC (ZERO)) (ZERO) then treerecNew (Empty) else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = treerecNew (Node (ZERO) (Empty) (Empty))
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Empty))) = treerecNew (Node (ZERO) (Empty) (Empty))
asdf
previous tactics
simpl in goal
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (ZERO)) (Empty) (Empty)))) (ZERO) then treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (ZERO)) (Empty) (Empty)))) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Empty)))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1724


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 2
rewrite <- IH1 in goal at 2
Prop: plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then ZERO else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then ZERO else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then ZERO else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) then ZERO else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then ZERO else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
Lemma List
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1725


1st goal of : forall (btree1:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1726


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), plus (nat2) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:13.)
=================================================
Progress: 1727


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), plus (nat2) (if lq (ZERO) (treerecNew (btree1)) then ZERO else ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1728


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat2(rank:14.)
=================================================
Progress: 1729


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), plus (nat2) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> induction nat2(rank : 14.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1730


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1731


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
plus (SUCC (nat3)) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:13.)
=================================================
Progress: 1732


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (plus (nat3) (ZERO)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (treerecNew (btree1)) then ZERO else nat1) = nat1
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : plus (nat3) (ZERO) = ZERO
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
SUCC (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
asdf
=================================================
Progress: 1733


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 0
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then treerecNew (Empty) else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
Lemma List
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1734


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1735


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1736


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1737


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:13.)
=================================================
Progress: 1738


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1739


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1740


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro nat1(rank:11.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 1741


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:11.)
=================================================
Progress: 1742


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then ZERO else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
nat1 = SUCC (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (ZERO)
Prop: ZERO = SUCC (ZERO)
Prop: ZERO = SUCC (ZERO)
asdf
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: SUCC (SUCC (ZERO)) = SUCC (plus (ZERO) (SUCC (SUCC (ZERO))))
Prop: SUCC (SUCC (SUCC (SUCC (ZERO)))) = SUCC (plus (ZERO) (SUCC (SUCC (SUCC (SUCC (ZERO))))))
asdf
=================================================
Progress: 1743


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO)

1 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1744


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat2(rank:14.)
=================================================
Progress: 1745


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat2:nat), ZERO = plus (nat2) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> induction nat2(rank : 14.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1746


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
Base3 : nat2 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1747


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = plus (SUCC (nat3)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:13.)
=================================================
Progress: 1748


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (plus (nat3) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (treerecNew (btree1)) then treerecNew (btree1) else nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
Base2 : btree1 = Empty
nat2 : nat
nat3 : nat
IH1 : ZERO = plus (nat3) (ZERO)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1749


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 1
Prop: SUCC (SUCC (ZERO)) = plus (ZERO) (if lq (SUCC (SUCC (ZERO))) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else SUCC (SUCC (ZERO)))
Prop: SUCC (SUCC (ZERO)) = plus (ZERO) (if lq (SUCC (SUCC (ZERO))) (ZERO) then treerecNew (Empty) else SUCC (SUCC (ZERO)))
Prop: SUCC (SUCC (ZERO)) = plus (ZERO) (if lq (SUCC (SUCC (ZERO))) (ZERO) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)))) else SUCC (SUCC (ZERO)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO)
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (if lq (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: SUCC (SUCC (ZERO)) = plus (ZERO) (if lq (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))) else SUCC (SUCC (ZERO)))
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else SUCC (ZERO))
Prop: treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))))
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Lemma List
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1750


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1751


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1752


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1753


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1754


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro btree1(rank:11.)
intro nat1(rank:11.)
=================================================
Progress: 1755


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
btree1 : btree
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1756


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
forall (btree1:btree), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: SUCC (SUCC (SUCC (ZERO))) = SUCC (plus (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (ZERO)))))
asdf
=================================================
Progress: 1757


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
btree1 : btree
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), nat1 = plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
btree1 : btree
nat1 : nat
---------------------------------------
nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
intro nat1
validate generalize_common_subterm_goal
Prop: SUCC (SUCC (SUCC (ZERO))) = SUCC (plus (ZERO) (SUCC (SUCC (SUCC (ZERO)))))
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1758


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 2
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then ZERO else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then ZERO else SUCC (ZERO))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: SUCC (SUCC (ZERO)) = plus (SUCC (ZERO)) (if lq (SUCC (SUCC (ZERO))) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then ZERO else SUCC (SUCC (ZERO)))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty))) then ZERO else treerecNew (Empty))
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else ZERO)
Prop: SUCC (ZERO) = plus (ZERO) (if lq (SUCC (ZERO)) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) else SUCC (ZERO))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: treerecNew (Empty) = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: treerecNew (Node (ZERO) (Empty) (Empty)) = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1759


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 1760


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), treerecNew (Empty) = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then ZERO else treerecNew (Empty))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1761


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), treerecNew (Empty) = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then ZERO else treerecNew (Empty))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (Empty))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree2(rank:13.)
=================================================
Progress: 1762


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (Empty))

1 goal(s) more...

4 conjecture(s) more...
>>> induction btree2(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1763


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty))

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 1764


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1765


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1766


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:13.)
=================================================
Progress: 1767


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), treerecNew (btree1) = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1768


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1769


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
treerecNew (btree3) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1770


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1771


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
treerecNew (btree3) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1772


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1773


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
treerecNew (btree3) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
=================================================
Progress: 1774


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
=================================================
Progress: 1775


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO)
Prop: ZERO = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty))) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty)))
asdf
=================================================
Progress: 1776


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty)) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Node (ZERO) (Empty) (Empty))))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty))
asdf
=================================================
Progress: 1777


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1778


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree2(rank:12.)
=================================================
Progress: 1779


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1780


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
induction btree1(rank:20.)
induction nat1(rank:20.)
=================================================
Progress: 1781


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree2(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (btree1))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1782


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (btree1))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (treerecNew (btree1))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
induction btree1(rank:21.)
induction nat1(rank:21.)
=================================================
Progress: 1783


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (ZERO) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) else treerecNew (Empty))
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else treerecNew (Empty))
asdf
=================================================
Progress: 1784


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then ZERO else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) (Empty))) (Empty)))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))
Prop: ZERO = plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) (Empty)) (Empty)))
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) else treerecNew (Empty))
asdf
=================================================
Progress: 1785


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Empty))) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))))) (ZERO) then ZERO else ZERO)
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1786


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 1787


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1788


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1789


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1790


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)

---------------------------------------
forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1791


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1792


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro btree1(rank:11.)
=================================================
Progress: 1793


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1794


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree2(rank:13.)
=================================================
Progress: 1795


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty))

1 goal(s) more...

4 conjecture(s) more...
>>> induction btree2(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1796


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 1797


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1798


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1799


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:13.)
=================================================
Progress: 1800


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1801


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty)))
asdf
=================================================
Progress: 1802


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty)) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) else ZERO)
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Prop: ZERO = plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty))
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1803


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 1804


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1805


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree2(rank:13.)
=================================================
Progress: 1806


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)

1 goal(s) more...

4 conjecture(s) more...
>>> induction btree2(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1807


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 1808


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), ZERO = plus (nat1) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1809


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1810


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:13.)
=================================================
Progress: 1811


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), ZERO = plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else ZERO)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : ZERO = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
ZERO = SUCC (ZERO)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1812


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH1 in goal at 0
Prop: ZERO = plus (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO))))))) (ZERO)
Prop: ZERO = plus (SUCC (ZERO)) (ZERO)
Prop: ZERO = plus (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (ZERO)
Prop: ZERO = plus (ZERO) (ZERO)
Prop: ZERO = plus (ZERO) (ZERO)
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))
asdf
Lemma List
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1813


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree2) = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1814


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1815


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), nat1 = plus (ZERO) (nat1)

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1816


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = plus (SUCC (nat3)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro nat1(rank:11.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 1817


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:11.)
=================================================
Progress: 1818


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
nat1 = SUCC (plus (nat3) (nat1))

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), nat1 = plus (nat2) (nat1)
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), nat1 = plus (nat3) (nat1)
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
nat1 = SUCC (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (ZERO)
Prop: ZERO = SUCC (ZERO)
Prop: SUCC (SUCC (SUCC (ZERO))) = SUCC (SUCC (SUCC (SUCC (ZERO))))
asdf
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = SUCC (plus (ZERO) (SUCC (ZERO)))
Prop: SUCC (SUCC (SUCC (ZERO))) = SUCC (plus (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))))
Prop: ZERO = SUCC (plus (ZERO) (ZERO))
asdf
=================================================
Progress: 1819


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:10.)
=================================================
Progress: 1820


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
treerecNew (btree3) = plus (nat2) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Empty) = plus (SUCC (SUCC (ZERO))) (ZERO)
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (ZERO)
Prop: treerecNew (Empty) = plus (ZERO) (ZERO)
asdf
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: treerecNew (Empty) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
Prop: treerecNew (Empty) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: treerecNew (Empty) = plus (SUCC (SUCC (ZERO))) (treerecNew (Empty))
asdf
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (SUCC (SUCC (SUCC (ZERO)))) (treerecNew (Empty))
Prop: ZERO = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: ZERO = plus (ZERO) (treerecNew (Empty))
asdf
=================================================
Progress: 1821


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), ZERO = plus (nat1) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree1))
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : ZERO = treerecNew (btree2)
IH2 : ZERO = treerecNew (btree3)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
ZERO = plus (nat2) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
=================================================
Progress: 1822


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1823


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (ZERO) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (ZERO) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1824


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 1825


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (ZERO) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1826


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1827


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1828


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1829


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1830


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro btree1(rank:11.)
=================================================
Progress: 1831


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (ZERO) then treerecNew (btree1) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1832


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:13.)
=================================================
Progress: 1833


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 1834


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1835


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:12.)
=================================================
Progress: 1836


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree1)) then treerecNew (btree1) else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
asdf
=================================================
Progress: 1837


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) then ZERO else ZERO) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)))))) (Empty))) then treerecNew (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)))))) (Empty)) else ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))))) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) = ZERO
asdf
=================================================
Progress: 1838


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 3(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1839


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = treerecNew (btree3)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1840


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (ZERO) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty))) (Empty)))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then ZERO else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty))) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1841


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 1842


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1843


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree2(rank:13.)
=================================================
Progress: 1844


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (Empty)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> induction btree2(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1845


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 1846


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1847


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1848


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:13.)
=================================================
Progress: 1849


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then treerecNew (btree2) else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (ZERO)) = ZERO
asdf
=================================================
Progress: 1850


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (ZERO) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (ZERO) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else treerecNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1851


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 1
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then ZERO else treerecNew (Empty)) = ZERO
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (ZERO) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (ZERO) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))) then treerecNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) else treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1852


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1853


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (ZERO) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (ZERO) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = treerecNew (btree3)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1854


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) else ZERO) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1855


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1856


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1857


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1858


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1859


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro btree1(rank:11.)
=================================================
Progress: 1860


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then ZERO else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1861


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) then treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))))) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1862


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1863


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1864


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1865


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (ZERO) (ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1866


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), plus (SUCC (nat2)) (ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro btree1(rank:11.)
intro btree2(rank:11.)
=================================================
Progress: 1867


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro btree2(rank:11.)
=================================================
Progress: 1868


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
forall (btree1:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1869


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree), SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (ZERO) then treerecNew (btree2) else ZERO) = ZERO
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
intro btree2
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (SUCC (SUCC (ZERO)))) (ZERO)) = ZERO
asdf
=================================================
Progress: 1870


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 2
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else ZERO) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) then treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1871


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 1872


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1873


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree2(rank:13.)
=================================================
Progress: 1874


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else ZERO) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> induction btree2(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1875


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 1876


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1877


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1878


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:13.)
=================================================
Progress: 1879


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else ZERO) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (SUCC (SUCC (ZERO)))) (ZERO)) = ZERO
asdf
=================================================
Progress: 1880


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (treerecNew (btree2)) (treerecNew (btree3))(rank:11.)
=================================================
Progress: 1881


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else ZERO) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (treerecNew (btree2)) (treerecNew (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = treerecNew (btree3)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:27.)
rewrite IH2 in goal at 1(rank:27.)
rewrite IH2 in goal at 2(rank:27.)
=================================================
Progress: 1882


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (ZERO) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 2(rank:26.)
=================================================
Progress: 1883


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Lemma List
forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1884


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1

---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1885


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1

---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), plus (ZERO) (nat1) = nat1

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1886


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), plus (ZERO) (nat1) = nat1

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), plus (SUCC (nat3)) (nat1) = nat1

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1887


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), plus (SUCC (nat3)) (nat1) = nat1

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro nat1(rank:11.)
rewrite IH1 in goal at 0(rank:19.)
=================================================
Progress: 1888


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 1889


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
SUCC (nat1) = nat1

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: SUCC (ZERO) = ZERO
asdf
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (SUCC (ZERO))) = SUCC (ZERO)
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
asdf
=================================================
Progress: 1890


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (treerecNew (btree2)) = treerecNew (btree3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = treerecNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty)) (Empty))) (Empty))
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))
Prop: plus (ZERO) (treerecNew (Empty)) = treerecNew (Empty)
asdf
previous tactics
simpl in goal
rewrite IH2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (treerecNew (Empty)) = ZERO
asdf
=================================================
Progress: 1891


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH1 in goal at 2
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (ZERO) then treerecNew (Empty) else ZERO) = ZERO
previous tactics
simpl in goal
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (ZERO) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Node (ZERO) (Empty) (Empty))) (ZERO) then treerecNew (Empty) else treerecNew (Node (ZERO) (Empty) (Empty))) = ZERO
asdf
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1892


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (ZERO) then treerecNew (btree3) else treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1893


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (nat1) = nat1

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1894


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (nat1) = nat1

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (btree1:btree), plus (ZERO) (nat1) = nat1

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1895


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (btree1:btree), plus (ZERO) (nat1) = nat1

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), plus (SUCC (nat3)) (nat1) = nat1

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1896


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), plus (SUCC (nat3)) (nat1) = nat1

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro btree1(rank:11.)
intro nat1(rank:11.)
=================================================
Progress: 1897


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
btree1 : btree
---------------------------------------
forall (nat1:nat), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1898


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (btree1:btree), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
forall (btree1:btree), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) = SUCC (SUCC (ZERO))
Prop: SUCC (plus (SUCC (ZERO)) (SUCC (ZERO))) = SUCC (ZERO)
asdf
=================================================
Progress: 1899


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
btree1 : btree
---------------------------------------
forall (nat1:nat), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), plus (nat2) (if lq (nat1) (ZERO) then treerecNew (btree1) else nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (btree1:btree), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
btree1 : btree
nat1 : nat
---------------------------------------
SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree1
intro nat1
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (SUCC (ZERO))) = SUCC (ZERO)
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1900


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2)) = treerecNew (btree2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 2
rewrite <- IH1 in goal at 2
Prop: plus (SUCC (ZERO)) (if lq (SUCC (ZERO)) (treerecNew (Empty)) then ZERO else SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) then ZERO else ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (if lq (SUCC (SUCC (ZERO))) (treerecNew (Empty)) then ZERO else SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Empty)) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (ZERO) (treerecNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty))) then ZERO else ZERO) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (SUCC (SUCC (ZERO))) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = treerecNew (Empty)
Prop: plus (ZERO) (if lq (treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (treerecNew (Empty)) then ZERO else treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) = treerecNew (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))
asdf
previous tactics
simpl in goal
rewrite IH2 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) then ZERO else treerecNew (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO
previous tactics
simpl in goal
parent
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then treerecNew (btree3) else treerecNew (btree2))
lower
plus(_, _)
upper
_
remove upper
treerecNew(btree3)
remove lower
treerecNew(btree3)
remove upper
plus(nat2, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Empty)) then treerecNew (Empty) else treerecNew (Empty)) = ZERO
Prop: plus (SUCC (ZERO)) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty)) (Empty))) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)))))) then treerecNew (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty)) (Empty))) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))))) else treerecNew (Empty)) = ZERO
Prop: plus (ZERO) (if lq (treerecNew (Empty)) (treerecNew (Node (ZERO) (Empty) (Empty))) then treerecNew (Node (ZERO) (Empty) (Empty)) else treerecNew (Empty)) = ZERO
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1901


1st goal of : forall (btree1:btree) (nat1:nat), plus (nat1) (treerecNew (btree1)) = ZERO
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : treerecNew (btree2) = ZERO
IH2 : treerecNew (btree3) = ZERO
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
plus (nat2) (if lq (treerecNew (btree2)) (treerecNew (btree3)) then ZERO else treerecNew (btree2)) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 1902


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then ZERO else treerecNew (Empty)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1903


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (Empty)) (treerecNew (btree2)) then ZERO else treerecNew (Empty)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (Empty)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree2(rank:13.)
=================================================
Progress: 1904


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (btree2)) then ZERO else treerecNew (Empty)) = ZERO

1 goal(s) more...

4 conjecture(s) more...
>>> induction btree2(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1905


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (if lq (ZERO) (treerecNew (Empty)) then ZERO else treerecNew (Empty)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 1906


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), plus (nat1) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1907


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
plus (ZERO) (ZERO) = ZERO

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1908


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
plus (SUCC (nat2)) (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:13.)
=================================================
Progress: 1909


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), plus (nat1) (if lq (treerecNew (btree1)) (treerecNew (btree2)) then ZERO else treerecNew (btree1)) = ZERO
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
nat1 : nat
nat2 : nat
IH1 : plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (ZERO) = ZERO

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 1910


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 19.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1911


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 5
rewrite Cond1 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:18.)
=================================================
Progress: 1912


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1913


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 5
Tactic List : 2
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 1914


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (treerecNew (btree2)) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:11.)
=================================================
Progress: 1915


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (treerecNew (btree2)) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (treerecNew (btree2)) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case lq (treerecNew (btree2)) (treerecNew (btree3))
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))
rewrite IH2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (mpath (treerec (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)))))
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = plus (SUCC (ZERO)) (mpath (treerec (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))
Prop: plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))) = plus (ZERO) (mpath (treerec (Node (ZERO) (Empty) (Empty))))
previous tactics
simpl in goal
intro Cond1
case lq (treerecNew (btree2)) (treerecNew (btree3))
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))
rewrite IH2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (treerecNew (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))
previous tactics
simpl in goal
intro Cond1
case lq (treerecNew (btree2)) (treerecNew (btree3))
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))
rewrite IH2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (SUCC (ZERO)) (mpath (treerec (Empty))) = plus (SUCC (ZERO)) (treerecNew (Empty))
Prop: plus (SUCC (SUCC (ZERO))) (mpath (treerec (Empty))) = plus (SUCC (SUCC (ZERO))) (treerecNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)))
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree2))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (treerecNew (btree2))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (treerecNew (btree2)) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (mpath (treerec (btree2)))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (treerecNew (btree2)) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1916


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree2))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree2))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree2))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:18.)
=================================================
Progress: 1917


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (treerecNew (btree2)) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (treerecNew (btree2))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (treerecNew (btree2))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (treerecNew (btree2))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:18.)
=================================================
Progress: 1918


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (treerecNew (btree2)) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (mpath (treerec (btree2)))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (mpath (treerec (btree2)))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (mpath (treerec (btree2)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:18.)
=================================================
Progress: 1919


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (treerecNew (btree3))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 1920


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (treerecNew (btree2)) = plus (nat2) (mpath (treerec (btree3)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case lq (treerecNew (btree2)) (treerecNew (btree3))
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))
rewrite IH2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite <- IH2 in goal at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (treerecNew (Empty)) = plus (SUCC (ZERO)) (mpath (treerec (Empty)))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (mpath (treerec (Empty)))
Prop: plus (ZERO) (treerecNew (Empty)) = plus (ZERO) (mpath (treerec (Empty)))
previous tactics
simpl in goal
intro Cond1
case lq (treerecNew (btree2)) (treerecNew (btree3))
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))
rewrite IH2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (mpath (treerec (Empty))) = plus (SUCC (ZERO)) (mpath (treerec (Empty)))
Prop: plus (SUCC (ZERO)) (mpath (treerec (Empty))) = plus (SUCC (ZERO)) (mpath (treerec (Empty)))
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (mpath (treerec (Empty)))
previous tactics
simpl in goal
intro Cond1
case lq (treerecNew (btree2)) (treerecNew (btree3))
case lq (mpath (treerec (btree2))) (mpath (treerec (btree3)))
rewrite IH2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Prop: plus (ZERO) (mpath (treerec (Empty))) = plus (ZERO) (treerecNew (Empty))
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (mpath (treerec (btree2)))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1921


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
Case2 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = false
---------------------------------------
plus (nat2) (mpath (treerec (btree2))) = plus (nat2) (mpath (treerec (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (mpath (treerec (btree2)))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (mpath (treerec (btree2)))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (mpath (treerec (btree2)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:18.)
=================================================
Progress: 1922


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree2))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree2))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree2))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (Empty)) (treerecNew (btree2)) = true->lq (mpath (treerec (Empty))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18.)
=================================================
Progress: 1923


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (treerecNew (btree2))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (treerecNew (btree2))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (treerecNew (btree2))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (Empty)) (treerecNew (btree2)) = true->lq (mpath (treerec (Empty))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (Empty)) = plus (nat1) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18.)
=================================================
Progress: 1924


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (mpath (treerec (btree2)))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (mpath (treerec (btree2)))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (mpath (treerec (btree2)))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (Empty)) (treerecNew (btree2)) = true->lq (mpath (treerec (Empty))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (Empty)) = plus (nat1) (mpath (treerec (btree2)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18.)
=================================================
Progress: 1925


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (mpath (treerec (btree2)))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (mpath (treerec (btree2)))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (mpath (treerec (btree2)))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (Empty)) (treerecNew (btree2)) = true->lq (mpath (treerec (Empty))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (mpath (treerec (btree2)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18.)
=================================================
Progress: 1926


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree2))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (Empty)) (treerecNew (btree2)) = true->lq (mpath (treerec (Empty))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree2))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (ZERO) (treerecNew (btree2)) = true->lq (ZERO) (mpath (treerec (btree2))) = false -> plus (nat1) (ZERO) = plus (nat1) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:19.)
=================================================
Progress: 1927


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (treerecNew (btree2))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (Empty)) (treerecNew (btree2)) = true->lq (mpath (treerec (Empty))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (Empty)) = plus (nat1) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (treerecNew (btree2))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (ZERO) (treerecNew (btree2)) = true->lq (ZERO) (mpath (treerec (btree2))) = false -> plus (nat1) (ZERO) = plus (nat1) (treerecNew (btree2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:19.)
=================================================
Progress: 1928


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (mpath (treerec (btree2)))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (Empty)) (treerecNew (btree2)) = true->lq (mpath (treerec (Empty))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (Empty)) = plus (nat1) (mpath (treerec (btree2)))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (treerecNew (btree1)) = plus (nat1) (mpath (treerec (btree2)))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (ZERO) (treerecNew (btree2)) = true->lq (ZERO) (mpath (treerec (btree2))) = false -> plus (nat1) (ZERO) = plus (nat1) (mpath (treerec (btree2)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:19.)
=================================================
Progress: 1929


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (mpath (treerec (btree2)))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (Empty)) (treerecNew (btree2)) = true->lq (mpath (treerec (Empty))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (Empty))) = plus (nat1) (mpath (treerec (btree2)))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 18.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (treerecNew (btree1)) (treerecNew (btree2)) = true->lq (mpath (treerec (btree1))) (mpath (treerec (btree2))) = false -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (mpath (treerec (btree2)))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true->lq (ZERO) (treerecNew (btree2)) = true->lq (ZERO) (mpath (treerec (btree2))) = false -> plus (nat1) (ZERO) = plus (nat1) (mpath (treerec (btree2)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:19.)
=================================================
Progress: 1930


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (mpath (treerec (btree3))) = plus (nat2) (treerecNew (btree3))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 19.)


1st goal of : forall (btree1:btree) (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree1))) = true -> plus (nat1) (mpath (treerec (btree1))) = plus (nat1) (treerecNew (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree2))) = true -> plus (nat1) (mpath (treerec (btree2))) = plus (nat1) (treerecNew (btree2))
IH2 : forall (nat1:nat), lq (ZERO) (plus (nat1) (treerecNew (btree3))) = true -> plus (nat1) (mpath (treerec (btree3))) = plus (nat1) (treerecNew (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : lq (ZERO) (plus (nat2) (treerecNew (btree3))) = true
Case1 : lq (mpath (treerec (btree2))) (mpath (treerec (btree3))) = true
Case2 : lq (treerecNew (btree2)) (treerecNew (btree3)) = true
---------------------------------------
plus (nat2) (treerecNew (btree3)) = plus (nat2) (treerecNew (btree3))

4 goal(s) more...

2 conjecture(s) more...
