Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (zip:zipper), main (zip) = mainNew (zip)(rank : 0.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)

---------------------------------------
forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)

---------------------------------------
forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)

---------------------------------------
forall (zipper1:zipper), height (repr (zipper1)) = mainNew (zipper1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:5.)
=================================================
Progress: 3


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)

---------------------------------------
forall (zipper1:zipper), height (repr (zipper1)) = mainNew (zipper1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction zipper1(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
height (repr (Top)) = mainNew (Top)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 4


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
height (repr (Top)) = mainNew (Top)

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
height (repr (Left (nat1) (btree1) (zipper2))) = mainNew (Left (nat1) (btree1) (zipper2))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 5


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
height (repr (Left (nat1) (btree1) (zipper2))) = mainNew (Left (nat1) (btree1) (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
SUCC (if lq (height (btree1)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree1)) = SUCC (if lq (height (btree1)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (height (btree1)) (height (repr (zipper2)))(rank:5.)
rewrite IH1 in goal at 0(rank:12.)
rewrite IH1 in goal at 2(rank:12.)
rewrite <- IH1 in goal at 0(rank:12.)
rewrite <- IH1 in goal at 1(rank:12.)
rewrite <- IH1 in goal at 2(rank:12.)
rewrite IH1 in goal at 1(rank:12.)
case lq (height (btree1)) (mainNew (zipper2))(rank:5.)
=================================================
Progress: 6


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
SUCC (if lq (height (btree1)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree1)) = SUCC (if lq (height (btree1)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree1))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (height (btree1)) (height (repr (zipper2)))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (height (repr (zipper2))) = true
---------------------------------------
SUCC (height (repr (zipper2))) = SUCC (if lq (height (btree1)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (height (btree1)) (mainNew (zipper2))(rank:6.)
rewrite IH1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 1(rank:21.)
rewrite <- IH1 in goal at 2(rank:21.)
=================================================
Progress: 7


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
SUCC (if lq (height (btree1)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree1)) = SUCC (if lq (height (btree1)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree1))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (height (btree1)) (mainNew (zipper2))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree1)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (height (btree1)) (height (repr (zipper2)))(rank:6.)
rewrite IH1 in goal at 0(rank:13.)
rewrite IH1 in goal at 1(rank:13.)
rewrite IH1 in goal at 2(rank:13.)
rewrite <- IH1 in goal at 0(rank:13.)
=================================================
Progress: 8


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (height (repr (zipper2))) = true
---------------------------------------
SUCC (height (repr (zipper2))) = SUCC (if lq (height (btree1)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree1))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (height (btree1)) (mainNew (zipper2))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (height (repr (zipper2))) = true
Case2 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (repr (zipper2))) = SUCC (mainNew (zipper2))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:14.)
rewrite <- IH1 in goal at 0(rank:14.)
=================================================
Progress: 9


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree1)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (height (btree1)) (height (repr (zipper2)))(rank : 6.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (height (btree1)) (height (repr (zipper2))) = true
---------------------------------------
SUCC (height (repr (zipper2))) = SUCC (mainNew (zipper2))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:14.)
rewrite <- IH1 in goal at 0(rank:14.)
=================================================
Progress: 10


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
SUCC (if lq (height (btree1)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree1)) = SUCC (if lq (height (btree1)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree1))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
SUCC (if lq (height (btree1)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree1)) = SUCC (if lq (height (btree1)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 11


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
SUCC (if lq (height (btree1)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree1)) = SUCC (if lq (height (btree1)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree1))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
---------------------------------------
height (repr (Right (nat1) (btree1) (zipper2))) = mainNew (Right (nat1) (btree1) (zipper2))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 17
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 12


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
---------------------------------------
height (repr (Right (nat1) (btree1) (zipper2))) = mainNew (Right (nat1) (btree1) (zipper2))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
---------------------------------------
SUCC (if lq (height (repr (zipper2))) (height (btree1)) then height (btree1) else height (repr (zipper2))) = SUCC (if lq (height (btree1)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree1))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (height (repr (zipper2))) (height (btree1))(rank:4.)
rewrite IH1 in goal at 0(rank:19.)
rewrite IH1 in goal at 2(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 1(rank:19.)
rewrite <- IH1 in goal at 2(rank:19.)
rewrite IH1 in goal at 1(rank:19.)
case lq (height (btree1)) (mainNew (zipper2))(rank:4.)
=================================================
Progress: 13


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
---------------------------------------
SUCC (if lq (height (repr (zipper2))) (height (btree1)) then height (btree1) else height (repr (zipper2))) = SUCC (if lq (height (btree1)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree1))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (height (repr (zipper2))) (height (btree1))(rank : 4.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (repr (zipper2))) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (if lq (height (btree1)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (height (btree1)) (mainNew (zipper2))(rank:5.)
rewrite <- IH1 in goal at 2(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 1(rank:20.)
=================================================
Progress: 14


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
---------------------------------------
SUCC (if lq (height (repr (zipper2))) (height (btree1)) then height (btree1) else height (repr (zipper2))) = SUCC (if lq (height (btree1)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree1))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (height (btree1)) (mainNew (zipper2))(rank : 4.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (repr (zipper2))) (height (btree1)) then height (btree1) else height (repr (zipper2))) = SUCC (mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (height (repr (zipper2))) (height (btree1))(rank:5.)
rewrite IH1 in goal at 0(rank:12.)
rewrite IH1 in goal at 1(rank:12.)
rewrite IH1 in goal at 2(rank:12.)
rewrite <- IH1 in goal at 0(rank:12.)
=================================================
Progress: 15


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (repr (zipper2))) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (if lq (height (btree1)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree1))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (height (btree1)) (mainNew (zipper2))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (repr (zipper2))) (height (btree1)) = true
Case2 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:5.)
=================================================
Progress: 16


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (repr (zipper2))) (height (btree1)) then height (btree1) else height (repr (zipper2))) = SUCC (mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (height (repr (zipper2))) (height (btree1))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (height (repr (zipper2))) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:5.)
=================================================
Progress: 17


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (repr (zipper2))) (height (btree1)) = true
Case2 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (repr (zipper2))) (height (btree1)) = true
Case2 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (height (repr (zipper2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (height (repr (zipper2))) (height (btree1))
case lq (height (btree1)) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: Empty = repr (Top)
Prop: Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Empty) (Empty)) (Empty)))) (Empty)) (Empty)) (Empty)) (Empty) = repr (Top)
Prop: Empty = repr (Top)
previous tactics
simpl in goal
case lq (height (repr (zipper2))) (height (btree1))
case lq (height (btree1)) (mainNew (zipper2))
parent
height (btree1)
lower
height(_)
upper
SUCC(_)
remove upper
height(btree1)
remove lower
height(btree1)
remove upper
height(btree1)
remove lower
height(btree1)
remove upper
height(btree1)
remove lower
height(btree1)
validate generalize_common_subterm_goal
Prop: height (Node (ZERO) (Empty) (Empty)) = mainNew (Top)
Prop: height (Node (SUCC (ZERO)) (Empty) (Empty)) = mainNew (Top)
Prop: height (Empty) = mainNew (Top)
Lemma List
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (repr (zipper2))) (height (btree1)) = true
Case2 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (repr (zipper2))) (height (btree1)) = true
Case2 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (height (repr (zipper2)))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 18


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (repr (zipper2))) (height (btree1)) = true
Case2 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)(rank : 0.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:6.)
=================================================
Progress: 19


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (repr (zipper2))) (height (btree1)) = true
Case2 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (height (repr (zipper2)))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)(rank : 0.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro btree1(rank:5.)
=================================================
Progress: 20


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (height (repr (zipper2))) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (height (repr (zipper2))) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (height (repr (zipper2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (height (btree1)) (mainNew (zipper2))
case lq (height (repr (zipper2))) (height (btree1))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: Node (ZERO) (Empty) (Empty) = repr (Top)
Prop: Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)) = repr (Top)
Prop: Empty = repr (Top)
previous tactics
simpl in goal
case lq (height (btree1)) (mainNew (zipper2))
case lq (height (repr (zipper2))) (height (btree1))
parent
height (btree1)
lower
height(_)
upper
SUCC(_)
remove upper
height(btree1)
remove lower
height(btree1)
remove upper
height(btree1)
remove lower
height(btree1)
remove upper
height(btree1)
remove lower
height(btree1)
validate generalize_common_subterm_goal
Prop: height (Empty) = mainNew (Left (ZERO) (Empty) (Right (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Top)))
Prop: height (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))) = mainNew (Top)
Prop: height (Empty) = mainNew (Top)
Lemma List
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (height (repr (zipper2))) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (height (repr (zipper2))) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (height (repr (zipper2)))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 21


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (height (repr (zipper2))) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)(rank : 0.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:6.)
=================================================
Progress: 22


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (height (repr (zipper2))) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (height (repr (zipper2)))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)(rank : 0.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro btree1(rank:5.)
=================================================
Progress: 23


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro btree1(rank : 5.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:7.)
=================================================
Progress: 24


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro btree1(rank : 5.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:7.)
=================================================
Progress: 25


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (height (Empty)) = true->lq (height (Empty)) (mainNew (zipper1)) = true -> height (Empty) = mainNew (zipper1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:5.)
=================================================
Progress: 26


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (height (Empty)) = true->lq (height (Empty)) (mainNew (zipper1)) = true -> height (Empty) = mainNew (zipper1)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 5.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (height (Node (nat1) (btree2) (btree3))) = true->lq (height (Node (nat1) (btree2) (btree3))) (mainNew (zipper1)) = true -> height (Node (nat1) (btree2) (btree3)) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 27


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (height (Node (nat1) (btree2) (btree3))) = true->lq (height (Node (nat1) (btree2) (btree3))) (mainNew (zipper1)) = true -> height (Node (nat1) (btree2) (btree3)) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:7.)
=================================================
Progress: 28


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (Empty)) = true -> height (Empty) = mainNew (zipper1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 29


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (Empty)) = true -> height (Empty) = mainNew (zipper1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> ZERO = mainNew (zipper1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:8.)
=================================================
Progress: 30


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (repr (Top))) (height (btree1)) = true->lq (height (btree1)) (mainNew (Top)) = true -> btree1 = repr (Top)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 31


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (height (repr (Top))) (height (btree1)) = true -> btree1 = repr (Top)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:6.)
=================================================
Progress: 32


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (height (repr (Top))) (height (btree1)) = true -> btree1 = repr (Top)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat1) (btree2) (zipper2))) = true->lq (height (repr (Left (nat1) (btree2) (zipper2)))) (height (btree1)) = true -> btree1 = repr (Left (nat1) (btree2) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 33


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat1) (btree2) (zipper2))) = true->lq (height (repr (Left (nat1) (btree2) (zipper2)))) (height (btree1)) = true -> btree1 = repr (Left (nat1) (btree2) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6.)
=================================================
Progress: 34


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:6.)
=================================================
Progress: 35


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 0(rank:16.)
=================================================
Progress: 36


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (repr (Top))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Top)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 37


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (repr (Top))) (height (btree1)) = true->lq (height (btree1)) (mainNew (Top)) = true -> btree1 = repr (Top)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (ZERO) (height (btree1)) = true->false = true -> btree1 = Empty

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 38


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (repr (Top))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Top)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
true = true->false = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 39


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (ZERO) (height (btree1)) = true->false = true -> btree1 = Empty

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (height (btree1)) = true
---------------------------------------
false = true -> btree1 = Empty

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:6.)
=================================================
Progress: 40


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (ZERO) (height (btree1)) = true
---------------------------------------
false = true -> btree1 = Empty

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (repr (zipper2))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper2)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (height (repr (Left (nat1) (btree2) (zipper2)))) (height (btree1)) = true->lq (height (btree1)) (mainNew (Left (nat1) (btree2) (zipper2))) = true -> btree1 = repr (Left (nat1) (btree2) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 41


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (repr (zipper2))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper2)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (height (repr (Left (nat1) (btree2) (zipper2)))) (height (btree1)) = true->lq (height (btree1)) (mainNew (Left (nat1) (btree2) (zipper2))) = true -> btree1 = repr (Left (nat1) (btree2) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (repr (zipper2))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper2)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6.)
=================================================
Progress: 42


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (repr (zipper2))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper2)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (repr (zipper2))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper2)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:6.)
=================================================
Progress: 43


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (repr (zipper2))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper2)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (repr (zipper2))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper2)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 0(rank:16.)
=================================================
Progress: 44


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
true = true->false = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : true = true
---------------------------------------
false = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:6.)
=================================================
Progress: 45


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : true = true
---------------------------------------
false = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (height (repr (Left (nat2) (btree4) (zipper2)))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat2) (btree4) (zipper2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Left (nat2) (btree4) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 46


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (height (repr (Left (nat2) (btree4) (zipper2)))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat2) (btree4) (zipper2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Left (nat2) (btree4) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true->lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6.)
=================================================
Progress: 47


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true->lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:6.)
=================================================
Progress: 48


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 12
case lq (height (btree2)) (height (btree3))(rank:7.)
rewrite <- IH1 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 1(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
rewrite <- IH2 in goal at 1(rank:16.)
rewrite <- IH2 in goal at 2(rank:16.)
rewrite <- IH3 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 2(rank:16.)
rewrite IH3 in goal at 0(rank:24.)
rewrite <- IH3 in goal at 1(rank:24.)
rewrite <- IH3 in goal at 2(rank:24.)
case lq (height (btree4)) (mainNew (zipper2))(rank:7.)
=================================================
Progress: 49


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
case lq (height (btree4)) (mainNew (zipper2))(rank:8.)
rewrite <- IH1 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 1(rank:17.)
rewrite <- IH2 in goal at 0(rank:17.)
rewrite <- IH2 in goal at 1(rank:17.)
rewrite <- IH2 in goal at 2(rank:17.)
rewrite <- IH3 in goal at 0(rank:25.)
rewrite <- IH1 in goal at 2(rank:17.)
rewrite IH3 in goal at 0(rank:25.)
rewrite <- IH3 in goal at 1(rank:25.)
rewrite <- IH3 in goal at 2(rank:25.)
=================================================
Progress: 50


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:8.)
rewrite IH3 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:17.)
rewrite <- IH2 in goal at 0(rank:17.)
rewrite <- IH3 in goal at 0(rank:17.)
=================================================
Progress: 51


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> ZERO = mainNew (zipper1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> ZERO = mainNew (Top)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 52


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> ZERO = mainNew (Top)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat1) (btree2) (zipper2))) = true->false = true -> ZERO = mainNew (Left (nat1) (btree2) (zipper2))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 53


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat1) (btree2) (zipper2))) = true->false = true -> ZERO = mainNew (Left (nat1) (btree2) (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 54


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:6.)
=================================================
Progress: 55


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat1) (btree2) (zipper2))) = true->false = true -> ZERO = mainNew (Right (nat1) (btree2) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 56


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat1) (btree2) (zipper2))) = true->false = true -> ZERO = mainNew (Right (nat1) (btree2) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6.)
=================================================
Progress: 57


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:5.)
=================================================
Progress: 58


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 5.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat1) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (Node (nat1) (btree2) (btree3))) = true -> height (Node (nat1) (btree2) (btree3)) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 59


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat1) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (Node (nat1) (btree2) (btree3))) = true -> height (Node (nat1) (btree2) (btree3)) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:7.)
=================================================
Progress: 60


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->lq (height (repr (Top))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Top)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:6.)
=================================================
Progress: 61


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->lq (height (repr (Top))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Top)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat2) (btree4) (zipper2))) = true->lq (height (repr (Left (nat2) (btree4) (zipper2)))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Left (nat2) (btree4) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 62


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat2) (btree4) (zipper2))) = true->lq (height (repr (Left (nat2) (btree4) (zipper2)))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Left (nat2) (btree4) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6.)
=================================================
Progress: 63


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:6.)
=================================================
Progress: 64


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 12
case lq (height (btree2)) (height (btree3))(rank:7.)
rewrite <- IH1 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 1(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
rewrite <- IH2 in goal at 1(rank:16.)
rewrite <- IH2 in goal at 2(rank:16.)
rewrite <- IH3 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 2(rank:16.)
rewrite IH3 in goal at 0(rank:24.)
rewrite <- IH3 in goal at 1(rank:24.)
rewrite <- IH3 in goal at 2(rank:24.)
case lq (height (btree4)) (mainNew (zipper2))(rank:7.)
=================================================
Progress: 65


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
case lq (height (btree4)) (mainNew (zipper2))(rank:8.)
rewrite <- IH1 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 1(rank:17.)
rewrite <- IH2 in goal at 0(rank:17.)
rewrite <- IH2 in goal at 1(rank:17.)
rewrite <- IH2 in goal at 2(rank:17.)
rewrite <- IH3 in goal at 0(rank:25.)
rewrite <- IH1 in goal at 2(rank:17.)
rewrite IH3 in goal at 0(rank:25.)
rewrite <- IH3 in goal at 1(rank:25.)
rewrite <- IH3 in goal at 2(rank:25.)
=================================================
Progress: 66


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:8.)
rewrite IH3 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:17.)
rewrite <- IH2 in goal at 0(rank:17.)
rewrite <- IH3 in goal at 0(rank:17.)
=================================================
Progress: 67


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 68


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 69


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 70


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 71


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (repr (zipper2))) (height (btree1)) then height (btree1) else height (repr (zipper2))) = SUCC (mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (mainNew (zipper2)) (height (btree1)) then height (btree1) else mainNew (zipper2)) = SUCC (mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (height (btree1))(rank:5.)
=================================================
Progress: 72


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (mainNew (zipper2)) (height (btree1)) then height (btree1) else mainNew (zipper2)) = SUCC (mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (height (btree1))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:5.)
=================================================
Progress: 73


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (height (repr (zipper2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (height (btree1)) (mainNew (zipper2))
rewrite IH1 in goal at 0
case lq (mainNew (zipper2)) (height (btree1))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: Empty = repr (Top)
Prop: Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)) = repr (Top)
Prop: Node (ZERO) (Empty) (Empty) = repr (Top)
previous tactics
simpl in goal
case lq (height (btree1)) (mainNew (zipper2))
rewrite IH1 in goal at 0
case lq (mainNew (zipper2)) (height (btree1))
validate generalize_common_subterm_goal
Prop: height (Empty) = mainNew (Top)
Prop: height (Empty) = mainNew (Right (SUCC (ZERO)) (Empty) (Top))
Prop: height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) = mainNew (Top)
Lemma List
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
End of Lemma List


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (height (repr (zipper2)))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 74


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)(rank : 0.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction btree1(rank:6.)
=================================================
Progress: 75


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (height (repr (zipper2)))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)(rank : 0.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro btree1(rank:5.)
=================================================
Progress: 76


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro btree1(rank : 5.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:7.)
=================================================
Progress: 77


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction btree1(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (Empty)) = true -> height (Empty) = mainNew (zipper1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 78


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (Empty)) = true -> height (Empty) = mainNew (zipper1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> ZERO = mainNew (zipper1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:8.)
=================================================
Progress: 79


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (mainNew (Top)) (height (btree1)) = true -> btree1 = repr (Top)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:6.)
=================================================
Progress: 80


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (mainNew (Top)) (height (btree1)) = true -> btree1 = repr (Top)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat1) (btree2) (zipper2))) = true->lq (mainNew (Left (nat1) (btree2) (zipper2))) (height (btree1)) = true -> btree1 = repr (Left (nat1) (btree2) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 81


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat1) (btree2) (zipper2))) = true->lq (mainNew (Left (nat1) (btree2) (zipper2))) (height (btree1)) = true -> btree1 = repr (Left (nat1) (btree2) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6.)
=================================================
Progress: 82


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:6.)
=================================================
Progress: 83


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 0(rank:16.)
=================================================
Progress: 84


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> ZERO = mainNew (zipper1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> ZERO = mainNew (Top)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 85


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> ZERO = mainNew (Top)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat1) (btree2) (zipper2))) = true->false = true -> ZERO = mainNew (Left (nat1) (btree2) (zipper2))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 86


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat1) (btree2) (zipper2))) = true->false = true -> ZERO = mainNew (Left (nat1) (btree2) (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 87


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:6.)
=================================================
Progress: 88


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat1) (btree2) (zipper2))) = true->false = true -> ZERO = mainNew (Right (nat1) (btree2) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 89


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat1) (btree2) (zipper2))) = true->false = true -> ZERO = mainNew (Right (nat1) (btree2) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6.)
=================================================
Progress: 90


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:5.)
=================================================
Progress: 91


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 5.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat1) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (Node (nat1) (btree2) (btree3))) = true -> height (Node (nat1) (btree2) (btree3)) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 92


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat1) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (Node (nat1) (btree2) (btree3))) = true -> height (Node (nat1) (btree2) (btree3)) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:7.)
=================================================
Progress: 93


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction zipper1(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->lq (mainNew (Top)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Top)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:6.)
=================================================
Progress: 94


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->lq (mainNew (Top)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Top)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat2) (btree4) (zipper2))) = true->lq (mainNew (Left (nat2) (btree4) (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Left (nat2) (btree4) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 95


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat2) (btree4) (zipper2))) = true->lq (mainNew (Left (nat2) (btree4) (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Left (nat2) (btree4) (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6.)
=================================================
Progress: 96


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:6.)
=================================================
Progress: 97


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 12
case lq (height (btree2)) (height (btree3))(rank:7.)
rewrite <- IH1 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 1(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
rewrite <- IH2 in goal at 1(rank:16.)
rewrite <- IH2 in goal at 2(rank:16.)
rewrite <- IH3 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 2(rank:16.)
rewrite IH3 in goal at 0(rank:24.)
rewrite <- IH3 in goal at 1(rank:24.)
rewrite <- IH3 in goal at 2(rank:24.)
case lq (height (btree4)) (mainNew (zipper2))(rank:7.)
=================================================
Progress: 98


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
case lq (height (btree4)) (mainNew (zipper2))(rank:8.)
rewrite <- IH1 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 1(rank:17.)
rewrite <- IH2 in goal at 0(rank:17.)
rewrite <- IH2 in goal at 1(rank:17.)
rewrite <- IH2 in goal at 2(rank:17.)
rewrite <- IH3 in goal at 0(rank:25.)
rewrite <- IH1 in goal at 2(rank:17.)
rewrite IH3 in goal at 0(rank:25.)
rewrite <- IH3 in goal at 1(rank:25.)
rewrite <- IH3 in goal at 2(rank:25.)
=================================================
Progress: 99


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:8.)
rewrite IH3 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:17.)
rewrite <- IH2 in goal at 0(rank:17.)
rewrite <- IH3 in goal at 0(rank:17.)
=================================================
Progress: 100


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 101


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 102


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (repr (zipper2))) (height (btree1)) then height (btree1) else height (repr (zipper2))) = SUCC (mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 12.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (mainNew (zipper2)) (height (btree1)) then height (btree1) else height (repr (zipper2))) = SUCC (mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (mainNew (zipper2)) (height (btree1))(rank:5.)
=================================================
Progress: 103


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (mainNew (zipper2)) (height (btree1)) then height (btree1) else height (repr (zipper2))) = SUCC (mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (mainNew (zipper2)) (height (btree1))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:5.)
=================================================
Progress: 104


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (mainNew (zipper2)) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (height (repr (zipper2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (height (btree1)) (mainNew (zipper2))
rewrite IH1 in goal at 1
case lq (mainNew (zipper2)) (height (btree1))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: Empty = repr (Left (ZERO) (Empty) (Top))
Prop: Empty = repr (Right (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Top))
Prop: Empty = repr (Top)
previous tactics
simpl in goal
case lq (height (btree1)) (mainNew (zipper2))
rewrite IH1 in goal at 1
case lq (mainNew (zipper2)) (height (btree1))
validate generalize_common_subterm_goal
Prop: height (Node (SUCC (ZERO)) (Empty) (Empty)) = mainNew (Top)
Prop: height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) = mainNew (Right (ZERO) (Empty) (Top))
Prop: height (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) = mainNew (Top)
=================================================
Progress: 105


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (repr (zipper2))) (height (btree1)) then height (btree1) else height (repr (zipper2))) = SUCC (mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 12.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (repr (zipper2))) (height (btree1)) then height (btree1) else mainNew (zipper2)) = SUCC (mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (height (repr (zipper2))) (height (btree1))(rank:5.)
=================================================
Progress: 106


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (repr (zipper2))) (height (btree1)) then height (btree1) else mainNew (zipper2)) = SUCC (mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (height (repr (zipper2))) (height (btree1))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (height (repr (zipper2))) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:5.)
=================================================
Progress: 107


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (height (repr (zipper2))) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (height (repr (zipper2))) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (height (repr (zipper2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (height (btree1)) (mainNew (zipper2))
rewrite IH1 in goal at 2
case lq (height (repr (zipper2))) (height (btree1))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: Empty = repr (Top)
Prop: Empty = repr (Top)
Prop: Empty = repr (Left (ZERO) (Empty) (Left (ZERO) (Empty) (Top)))
previous tactics
simpl in goal
case lq (height (btree1)) (mainNew (zipper2))
rewrite IH1 in goal at 2
case lq (height (repr (zipper2))) (height (btree1))
validate generalize_common_subterm_goal
Prop: height (Empty) = mainNew (Top)
Prop: height (Node (ZERO) (Empty) (Empty)) = mainNew (Top)
Prop: height (Empty) = mainNew (Top)
=================================================
Progress: 108


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (repr (zipper2))) (height (btree1)) then height (btree1) else height (repr (zipper2))) = SUCC (mainNew (zipper2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 12.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (repr (zipper2))) (height (btree1)) then height (btree1) else height (repr (zipper2))) = SUCC (height (repr (zipper2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (height (repr (zipper2))) (height (btree1))(rank:5.)
=================================================
Progress: 109


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (repr (zipper2))) (height (btree1)) then height (btree1) else height (repr (zipper2))) = SUCC (height (repr (zipper2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (height (repr (zipper2))) (height (btree1))(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (height (repr (zipper2))) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (height (repr (zipper2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:5.)
=================================================
Progress: 110


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (height (repr (zipper2))) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (height (repr (zipper2)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 5.)


1st goal of : forall (zipper1:zipper), main (zipper1) = mainNew (zipper1)
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : height (repr (zipper2)) = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree1) (zipper2)
Case1 : lq (height (btree1)) (mainNew (zipper2)) = true
Case2 : lq (height (repr (zipper2))) (height (btree1)) = true
---------------------------------------
SUCC (height (btree1)) = SUCC (mainNew (zipper2))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (height (btree1)) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
case lq (height (repr (zipper2))) (height (btree1))
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: height (Empty) = mainNew (Top)
Prop: height (Empty) = mainNew (Right (ZERO) (Empty) (Top))
Prop: height (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty)) = mainNew (Top)
previous tactics
simpl in goal
case lq (height (btree1)) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
case lq (height (repr (zipper2))) (height (btree1))
validate generalize_common_subterm_goal
Prop: Empty = repr (Top)
Prop: Empty = repr (Top)
Prop: Empty = repr (Right (SUCC (ZERO)) (Empty) (Top))
=================================================
Progress: 111


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
---------------------------------------
repr (zipper2) = Node (nat1) (btree2) (repr (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite IH1 in goal at 0
Prop: Empty = Node (ZERO) (Empty) (Empty)
Prop: Empty = Node (ZERO) (Empty) (Empty)
Prop: Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))) (Empty)) = Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))) (Empty)))
validate generalize_common_subterm_goal
Prop: Node (ZERO) (Empty) (Empty) = Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))
Prop: Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))) = Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty)) (Empty)))) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))))
Prop: Empty = Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty)
Prop: repr (Top) = Node (ZERO) (Empty) (repr (Top))
Prop: repr (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Top)) = Node (ZERO) (Node (ZERO) (Empty) (Empty)) (repr (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Top)))
Prop: repr (Top) = Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Empty))))) (Empty))) (repr (Top))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
parent
Node (nat1) (btree2) (repr (zipper2))
lower
Node(_, btree2, repr(zipper2))
upper
_
remove upper
repr(zipper2)
remove lower
repr(zipper2)
remove upper
Node(nat1, btree2, repr(zipper2))
remove lower
Node(nat1, btree2, repr(zipper2))
remove upper
Node(nat1, btree2, Node(nat2, btree3, repr(zipper3)))
remove lower
Node(nat1, btree2, Node(nat2, btree3, repr(zipper3)))
remove upper
Node(nat1, btree2, Node(nat2, btree3, Node(nat3, btree4, repr(zipper4))))
remove lower
Node(nat1, btree2, Node(nat2, btree3, Node(nat3, btree4, repr(zipper4))))
validate generalize_common_subterm_goal
Prop: Empty = Node (ZERO) (Empty) (repr (Left (ZERO) (Empty) (Top)))
Prop: Empty = Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (repr (Top))
Prop: Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty) = Node (ZERO) (Empty) (repr (Top))
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 112


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree1(rank:7.)
=================================================
Progress: 113


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree1(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:7.)
=================================================
Progress: 114


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 115


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:9.)
=================================================
Progress: 116


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (Top)) then mainNew (Top) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (Top))) then height (repr (Top)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (Top))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 117


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (Top)) then mainNew (Top) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (Top))) then height (repr (Top)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (Top))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 118


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 119


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: Empty = Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)
Prop: Empty = Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)
Prop: Empty = Node (SUCC (ZERO)) (Empty) (Empty)
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 120


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree1(rank:9.)
=================================================
Progress: 121


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree2(rank:9.)
=================================================
Progress: 122


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 123


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 124


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 125


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
nat1 : nat
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty) = Node (ZERO) (Empty) (Empty)
Prop: Node (ZERO) (Empty) (Empty) = Node (SUCC (ZERO)) (Empty) (Empty)
Prop: Empty = Node (ZERO) (Empty) (Empty)
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
nat1 : nat
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 126


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
nat1 : nat
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro btree1(rank:11.)
=================================================
Progress: 127


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro btree2(rank:11.)
=================================================
Progress: 128


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 129


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11.)
=================================================
Progress: 130


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 131


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
nat1 : nat
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Empty = Node (ZERO) (Empty) (Empty)
Prop: Empty = Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)
Prop: Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) = Node (ZERO) (Empty) (Empty)
=================================================
Progress: 132


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (btree1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: Node (ZERO) (Empty) (Empty) = Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))
Prop: Empty = Node (ZERO) (Empty) (Empty)
Prop: Node (ZERO) (Empty) (Empty) = Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (Empty)) (Node (ZERO) (Empty) (Empty))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
parent
Node (nat1) (btree2) (repr (zipper2))
lower
Node(_, btree2, repr(zipper2))
upper
_
remove upper
repr(zipper2)
remove lower
repr(zipper2)
remove upper
Node(nat1, btree2, repr(zipper2))
remove lower
Node(nat1, btree2, repr(zipper2))
remove upper
Node(nat1, btree2, Node(nat2, btree3, repr(zipper3)))
remove lower
Node(nat1, btree2, Node(nat2, btree3, repr(zipper3)))
remove upper
Node(nat1, btree2, Node(nat2, btree3, Node(nat3, btree4, repr(zipper4))))
remove lower
Node(nat1, btree2, Node(nat2, btree3, Node(nat3, btree4, repr(zipper4))))
validate generalize_common_subterm_goal
Prop: Node (ZERO) (Empty) (Empty) = Node (ZERO) (Empty) (repr (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Left (SUCC (ZERO)) (Empty) (Left (ZERO) (Empty) (Top)))))
Prop: Empty = Node (ZERO) (Empty) (repr (Top))
Prop: Node (SUCC (ZERO)) (Empty) (Empty) = Node (ZERO) (Empty) (repr (Top))
=================================================
Progress: 133


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (repr (zipper2))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper2)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (repr (zipper2))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper2)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
repr (zipper2) = Node (nat1) (btree2) (repr (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite IH1 in goal at 0
Prop: Empty = Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)) (Empty)) (Empty)
Prop: Empty = Node (SUCC (SUCC (ZERO))) (Empty) (Empty)
Prop: Empty = Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)
validate generalize_common_subterm_goal
Prop: Node (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) (Empty) = Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) (Empty))
Prop: Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) = Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)))
Prop: Empty = Node (ZERO) (Empty) (Empty)
Prop: repr (Right (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Right (ZERO) (Empty) (Top))) = Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (repr (Right (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Right (ZERO) (Empty) (Top))))
Prop: repr (Top) = Node (ZERO) (Empty) (repr (Top))
Prop: repr (Top) = Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (repr (Top))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
parent
Node (nat1) (btree2) (repr (zipper2))
lower
Node(_, btree2, repr(zipper2))
upper
_
remove upper
repr(zipper2)
remove lower
repr(zipper2)
remove upper
Node(nat1, btree2, repr(zipper2))
remove lower
Node(nat1, btree2, repr(zipper2))
remove upper
Node(nat1, btree2, Node(nat2, btree3, repr(zipper3)))
remove lower
Node(nat1, btree2, Node(nat2, btree3, repr(zipper3)))
remove upper
Node(nat1, btree2, Node(nat2, btree3, Node(nat3, btree4, repr(zipper4))))
remove lower
Node(nat1, btree2, Node(nat2, btree3, Node(nat3, btree4, repr(zipper4))))
validate generalize_common_subterm_goal
Prop: Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)) = Node (ZERO) (Empty) (repr (Top))
Prop: Empty = Node (ZERO) (Empty) (repr (Top))
Prop: Empty = Node (ZERO) (Empty) (repr (Top))
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (repr (zipper2))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper2)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 134


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (repr (zipper2))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper2)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree1(rank:7.)
=================================================
Progress: 135


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree1(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:7.)
=================================================
Progress: 136


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 137


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:9.)
=================================================
Progress: 138


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (repr (Top))) then height (repr (Top)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (Top)) then mainNew (Top) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (Top))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 139


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (repr (Top))) then height (repr (Top)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (Top)) then mainNew (Top) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (Top))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 140


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 141


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: Empty = Node (ZERO) (Empty) (Empty)
Prop: Empty = Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)
Prop: Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty) = Node (ZERO) (Empty) (Empty)
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 142


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree1(rank:9.)
=================================================
Progress: 143


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree2(rank:9.)
=================================================
Progress: 144


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 145


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 146


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
forall (nat1:nat), btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 147


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
forall (nat1:nat), btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (height (btree2))) = true
nat1 : nat
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Empty = Node (SUCC (ZERO)) (Empty) (Empty)
Prop: Empty = Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) (Empty)
Prop: Empty = Node (ZERO) (Empty) (Empty)
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (height (btree2))) = true
nat1 : nat
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 148


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (height (btree2))) = true
nat1 : nat
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro btree1(rank:11.)
=================================================
Progress: 149


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro btree2(rank:11.)
=================================================
Progress: 150


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 151


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11.)
=================================================
Progress: 152


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
forall (nat1:nat), btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 153


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
forall (nat1:nat), btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true->lq (height (btree1)) (SUCC (height (btree2))) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (SUCC (height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (height (btree2))) = true
nat1 : nat
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Empty = Node (SUCC (SUCC (ZERO))) (Empty) (Empty)
Prop: Empty = Node (ZERO) (Empty) (Empty)
Prop: Empty = Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)
=================================================
Progress: 154


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (repr (zipper2))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper2)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (repr (zipper2))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper2)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (height (btree1)) = true
Cond2 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (btree1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: Empty = Node (ZERO) (Empty) (Empty)
Prop: Empty = Node (ZERO) (Empty) (Empty)
Prop: Empty = Node (ZERO) (Empty) (Empty)
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
parent
Node (nat1) (btree2) (repr (zipper2))
lower
Node(_, btree2, repr(zipper2))
upper
_
remove upper
repr(zipper2)
remove lower
repr(zipper2)
remove upper
Node(nat1, btree2, repr(zipper2))
remove lower
Node(nat1, btree2, repr(zipper2))
remove upper
Node(nat1, btree2, Node(nat2, btree3, repr(zipper3)))
remove lower
Node(nat1, btree2, Node(nat2, btree3, repr(zipper3)))
remove upper
Node(nat1, btree2, Node(nat2, btree3, Node(nat3, btree4, repr(zipper4))))
remove lower
Node(nat1, btree2, Node(nat2, btree3, Node(nat3, btree4, repr(zipper4))))
validate generalize_common_subterm_goal
Prop: Empty = Node (ZERO) (Empty) (repr (Top))
Prop: Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)) = Node (SUCC (SUCC (ZERO))) (Empty) (repr (Right (SUCC (ZERO)) (Empty) (Top)))
Prop: Node (ZERO) (Empty) (Empty) = Node (ZERO) (Empty) (repr (Top))
=================================================
Progress: 155


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (height (btree2))(rank:9.)
=================================================
Progress: 156


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree2))(rank:10.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 157


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 158


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 159


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 160


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 161


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 162


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite <- IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (height (btree2))(rank:9.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH3 in goal at 0(rank:26.)
=================================================
Progress: 163


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree4)) (height (btree2))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
=================================================
Progress: 164


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:19.)
=================================================
Progress: 165


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 166


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 167


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite <- IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (mainNew (zipper2))(rank:9.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH3 in goal at 0(rank:26.)
=================================================
Progress: 168


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree4)) (mainNew (zipper2))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
=================================================
Progress: 169


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 170


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 171


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 172


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 173


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 174


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (height (btree3))(rank:9.)
=================================================
Progress: 175


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 176


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 177


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 178


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 179


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 180


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (mainNew (zipper2)) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Cond2 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 181


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 182


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (mainNew (zipper2)) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Cond2 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (mainNew (zipper2)) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Cond2 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 183


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite <- IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (height (btree3))(rank:9.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite IH3 in goal at 0(rank:26.)
=================================================
Progress: 184


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree4)) (height (btree3))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
=================================================
Progress: 185


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:19.)
=================================================
Progress: 186


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 187


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 188


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite <- IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (mainNew (zipper2))(rank:9.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite IH3 in goal at 0(rank:26.)
=================================================
Progress: 189


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree4)) (mainNew (zipper2))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
=================================================
Progress: 190


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 191


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 192


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 193


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 194


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (mainNew (zipper2)) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Cond2 : lq (height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 195


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 196


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (mainNew (zipper2)) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Cond2 : lq (height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (mainNew (zipper2)) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Cond2 : lq (height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 197


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (height (btree2))(rank:9.)
=================================================
Progress: 198


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree2))(rank:10.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 199


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 200


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 201


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 202


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 203


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 204


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite <- IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (height (btree2))(rank:9.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH3 in goal at 0(rank:26.)
=================================================
Progress: 205


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree4)) (height (btree2))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
=================================================
Progress: 206


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:19.)
=================================================
Progress: 207


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 208


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 209


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite <- IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (mainNew (zipper2))(rank:9.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH3 in goal at 0(rank:26.)
=================================================
Progress: 210


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree4)) (mainNew (zipper2))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
=================================================
Progress: 211


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 212


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 213


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 214


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 215


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 216


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (height (btree3))(rank:9.)
=================================================
Progress: 217


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 218


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 219


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 220


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 221


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 222


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 223


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 224


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 225


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite <- IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (height (btree3))(rank:9.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite IH3 in goal at 0(rank:26.)
=================================================
Progress: 226


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree4)) (height (btree3))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
=================================================
Progress: 227


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:19.)
=================================================
Progress: 228


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 229


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 230


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite <- IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (mainNew (zipper2))(rank:9.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite IH3 in goal at 0(rank:26.)
=================================================
Progress: 231


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree4)) (mainNew (zipper2))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
=================================================
Progress: 232


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 233


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 234


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 235


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 236


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 237


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 238


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 239


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) (height (btree1)) = true
---------------------------------------
repr (zipper2) = Node (nat1) (btree2) (repr (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite IH1 in goal at 0
Prop: Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)) = Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))
Prop: Empty = Node (ZERO) (Empty) (Empty)
Prop: Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty) = Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))
validate generalize_common_subterm_goal
Prop: Empty = Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Empty)
Prop: Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) = Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))))
Prop: Empty = Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)
Prop: repr (Top) = Node (ZERO) (Empty) (repr (Top))
Prop: repr (Top) = Node (ZERO) (Node (ZERO) (Empty) (Empty)) (repr (Top))
Prop: repr (Top) = Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty))) (repr (Top))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
parent
Node (nat1) (btree2) (repr (zipper2))
lower
Node(_, btree2, repr(zipper2))
upper
_
remove upper
repr(zipper2)
remove lower
repr(zipper2)
remove upper
Node(nat1, btree2, repr(zipper2))
remove lower
Node(nat1, btree2, repr(zipper2))
remove upper
Node(nat1, btree2, Node(nat2, btree3, repr(zipper3)))
remove lower
Node(nat1, btree2, Node(nat2, btree3, repr(zipper3)))
remove upper
Node(nat1, btree2, Node(nat2, btree3, Node(nat3, btree4, repr(zipper4))))
remove lower
Node(nat1, btree2, Node(nat2, btree3, Node(nat3, btree4, repr(zipper4))))
validate generalize_common_subterm_goal
Prop: Empty = Node (SUCC (SUCC (ZERO))) (Empty) (repr (Top))
Prop: Node (ZERO) (Empty) (Empty) = Node (ZERO) (Empty) (repr (Top))
Prop: Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty) = Node (SUCC (SUCC (ZERO))) (Empty) (repr (Top))
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 240


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree1(rank:7.)
=================================================
Progress: 241


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree1(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:7.)
=================================================
Progress: 242


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 243


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:9.)
=================================================
Progress: 244


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (Top)) then mainNew (Top) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (Top)) then mainNew (Top) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (Top))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 245


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (Top)) then mainNew (Top) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (Top)) then mainNew (Top) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (Top))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 246


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 247


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: Empty = Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)
Prop: Empty = Node (ZERO) (Empty) (Empty)
Prop: Empty = Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 248


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (mainNew (zipper1)) then mainNew (zipper1) else height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (repr (zipper1))
btree1 : btree
btree2 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree1(rank:9.)
=================================================
Progress: 249


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree2(rank:9.)
=================================================
Progress: 250


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 251


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 252


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 253


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (height (btree1)) = true -> btree1 = Node (nat1) (btree2) (Empty)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (SUCC (height (btree2))) = true
Cond2 : lq (SUCC (height (btree2))) (height (btree1)) = true
nat1 : nat
---------------------------------------
btree1 = Node (nat1) (btree2) (Empty)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Node (ZERO) (Empty) (Empty) = Node (ZERO) (Empty) (Empty)
Prop: Empty = Node (ZERO) (Empty) (Empty)
Prop: Empty = Node (ZERO) (Empty) (Empty)
=================================================
Progress: 254


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (repr (zipper2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> btree1 = repr (zipper1)
btree1 : btree
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (height (btree1)) = true -> btree1 = repr (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) (height (btree1)) = true
---------------------------------------
btree1 = Node (nat1) (btree2) (btree1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: Empty = Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)
Prop: Node (ZERO) (Empty) (Empty) = Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))
Prop: Empty = Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty)
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
parent
Node (nat1) (btree2) (repr (zipper2))
lower
Node(_, btree2, repr(zipper2))
upper
_
remove upper
repr(zipper2)
remove lower
repr(zipper2)
remove upper
Node(nat1, btree2, repr(zipper2))
remove lower
Node(nat1, btree2, repr(zipper2))
remove upper
Node(nat1, btree2, Node(nat2, btree3, repr(zipper3)))
remove lower
Node(nat1, btree2, Node(nat2, btree3, repr(zipper3)))
remove upper
Node(nat1, btree2, Node(nat2, btree3, Node(nat3, btree4, repr(zipper4))))
remove lower
Node(nat1, btree2, Node(nat2, btree3, Node(nat3, btree4, repr(zipper4))))
validate generalize_common_subterm_goal
Prop: Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)) (Empty))) (Empty) = Node (ZERO) (Node (ZERO) (Empty) (Empty)) (repr (Left (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)) (Top)))
Prop: Empty = Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (repr (Top))
Prop: Empty = Node (ZERO) (Empty) (repr (Top))
=================================================
Progress: 255


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (height (btree2))(rank:9.)
=================================================
Progress: 256


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree2))(rank:10.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 257


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 258


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 259


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 260


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 261


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 262


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite <- IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (height (btree2))(rank:9.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH3 in goal at 0(rank:26.)
=================================================
Progress: 263


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree4)) (height (btree2))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
=================================================
Progress: 264


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:19.)
=================================================
Progress: 265


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 266


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 267


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite <- IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (mainNew (zipper2))(rank:9.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH3 in goal at 0(rank:26.)
=================================================
Progress: 268


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree4)) (mainNew (zipper2))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
=================================================
Progress: 269


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 270


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 271


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 272


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 273


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 274


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (height (btree3))(rank:9.)
=================================================
Progress: 275


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 276


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 277


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 278


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 279


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 280


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 281


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 282


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 283


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite <- IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (height (btree3))(rank:9.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite IH3 in goal at 0(rank:26.)
=================================================
Progress: 284


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree4)) (height (btree3))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
=================================================
Progress: 285


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:19.)
=================================================
Progress: 286


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 287


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 288


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite <- IH3 in goal at 0(rank:26.)
case lq (height (btree4)) (mainNew (zipper2))(rank:9.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite IH3 in goal at 0(rank:26.)
=================================================
Progress: 289


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (height (btree4)) (mainNew (zipper2))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
=================================================
Progress: 290


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 291


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 292


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 293


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 294


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 295


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 296


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 297


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree2))(rank:10.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 298


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 299


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 300


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (height (btree4)) (height (btree2))(rank:10.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 301


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 302


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (height (btree4)) (mainNew (zipper2))(rank:10.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 303


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 304


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 305


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 306


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 307


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 308


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 309


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (height (btree4)) (height (btree3))(rank:10.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 310


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 311


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (height (btree4)) (mainNew (zipper2))(rank:10.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 312


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 313


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 314


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 315


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 2(rank:27.)
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
rewrite <- IH1 in goal at 1(rank:27.)
=================================================
Progress: 316


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 317


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 318


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 319


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 320


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 321


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (mainNew (zipper2)) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Cond2 : lq (height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 322


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (mainNew (zipper2)) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Cond2 : lq (height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (mainNew (zipper2)) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Cond2 : lq (height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 323


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (height (btree3))(rank:10.)
=================================================
Progress: 324


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (SUCC (height (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH3 in goal at 0(rank:28.)
rewrite IH3 in goal at 1(rank:28.)
rewrite IH3 in goal at 2(rank:28.)
=================================================
Progress: 325


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree2))(rank:10.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 326


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 327


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 328


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (height (btree4)) (height (btree2))(rank:10.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 329


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 330


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (height (btree4)) (mainNew (zipper2))(rank:10.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 331


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 332


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 333


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 334


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 335


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 336


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 337


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (height (btree4)) (height (btree3))(rank:10.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 338


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 339


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (height (btree4)) (mainNew (zipper2))(rank:10.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 340


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 341


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 342


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 343


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 2(rank:27.)
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
rewrite <- IH1 in goal at 1(rank:27.)
=================================================
Progress: 344


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 345


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 346


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 347


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 348


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 349


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 350


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 351


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (height (btree3))(rank:10.)
=================================================
Progress: 352


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (SUCC (height (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH3 in goal at 0(rank:28.)
rewrite IH3 in goal at 1(rank:28.)
rewrite IH3 in goal at 2(rank:28.)
=================================================
Progress: 353


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree2))(rank:10.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 354


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 355


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 356


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (height (btree4)) (height (btree2))(rank:10.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 357


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 358


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (height (btree4)) (mainNew (zipper2))(rank:10.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 359


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 360


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 361


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 362


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 363


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 364


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 365


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (height (btree4)) (height (btree3))(rank:10.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 366


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 367


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (height (btree4)) (mainNew (zipper2))(rank:10.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
=================================================
Progress: 368


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 369


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 370


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 371


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 2(rank:27.)
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
rewrite <- IH1 in goal at 1(rank:27.)
=================================================
Progress: 372


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 373


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 374


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 375


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
=================================================
Progress: 376


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 377


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:11.)
=================================================
Progress: 378


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 379


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (height (btree3))(rank:10.)
=================================================
Progress: 380


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (SUCC (height (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH3 in goal at 0(rank:28.)
rewrite IH3 in goal at 1(rank:28.)
rewrite IH3 in goal at 2(rank:28.)
=================================================
Progress: 381


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- IH1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 2(rank:28.)
rewrite <- IH2 in goal at 0(rank:28.)
rewrite <- IH2 in goal at 1(rank:28.)
rewrite <- IH2 in goal at 2(rank:28.)
rewrite <- IH1 in goal at 1(rank:28.)
=================================================
Progress: 382


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 383


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:14.)
=================================================
Progress: 384


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
height (btree3) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
rewrite IH3 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: height (Node (ZERO) (Empty) (Empty)) = SUCC (height (Empty))
Prop: height (Empty) = SUCC (height (Empty))
Prop: height (Empty) = SUCC (height (Empty))
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
rewrite IH3 in goal at 0
validate generalize_common_subterm_goal
Prop: mainNew (Top) = SUCC (height (Empty))
Prop: mainNew (Top) = SUCC (height (Empty))
Prop: mainNew (Right (ZERO) (Empty) (Top)) = SUCC (height (Empty))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty) = Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))
Prop: Node (ZERO) (Empty) (Empty) = Node (SUCC (ZERO)) (Empty) (Empty)
Prop: Empty = Empty
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
validate generalize_common_subterm_goal
Prop: height (Empty) = mainNew (Top)
Prop: height (Empty) = mainNew (Top)
Prop: height (Empty) = mainNew (Top)
Lemma List
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 385


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)(rank : 0.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 386


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree1(rank:7.)
=================================================
Progress: 387


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree1(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
---------------------------------------
forall (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:7.)
=================================================
Progress: 388


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
---------------------------------------
forall (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
btree2 : btree
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 389


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
btree2 : btree
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Empty = Empty
Prop: Empty = Empty
Prop: Empty = Empty
Lemma List
forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
End of Lemma List


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 390


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree1(rank:9.)
=================================================
Progress: 391


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true -> height (Empty) = mainNew (zipper1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 392


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true -> height (Empty) = mainNew (zipper1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> ZERO = mainNew (zipper1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 393


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
---------------------------------------
forall (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree2(rank:9.)
=================================================
Progress: 394


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
---------------------------------------
forall (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
btree2 : btree
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 395


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
btree2 : btree
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
btree2 = btree1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Node (ZERO) (Empty) (Empty) = Empty
Prop: Node (ZERO) (Empty) (Empty) = Node (ZERO) (Empty) (Empty)
Prop: Node (ZERO) (Empty) (Empty) = Empty
asdf
=================================================
Progress: 396


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> ZERO = mainNew (zipper1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true -> ZERO = mainNew (Top)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 397


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true -> ZERO = mainNew (Top)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat1) (btree2) (zipper2))) = true -> ZERO = mainNew (Left (nat1) (btree2) (zipper2))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 398


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat1) (btree2) (zipper2))) = true -> ZERO = mainNew (Left (nat1) (btree2) (zipper2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
true = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 399


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
true = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (mainNew (zipper2))(rank:10.)
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
rewrite <- IH1 in goal at 2(rank:18.)
=================================================
Progress: 400


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
ZERO = SUCC (mainNew (zipper2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 401


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 402


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:17.)
rewrite <- Cond2 in goal at 0(rank:17.)
rewrite <- Cond1 in goal at 0(rank:25.)
=================================================
Progress: 403


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree2)) (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH2 in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Node (SUCC (ZERO)) (Empty) (Empty))) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH2 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: lq (height (repr (Right (ZERO) (Empty) (Right (ZERO) (Empty) (Left (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Empty) (Node (ZERO) (Empty) (Empty))) (Right (ZERO) (Node (ZERO) (Empty) (Empty)) (Top))))))) (height (Empty)) = true
Prop: lq (height (repr (Top))) (height (Empty)) = true
Prop: lq (height (repr (Top))) (height (Empty)) = true
asdf
Lemma List
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree2)) (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 404


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree2)) (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction btree1(rank:16.)
induction nat1(rank:16.)
induction zipper1(rank:17.)
=================================================
Progress: 405


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 406


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:17.)
induction zipper1(rank:18.)
=================================================
Progress: 407


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (ZERO) = lq (height (btree1)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 408


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (ZERO) = lq (height (btree1)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
induction btree1(rank:16.)
induction zipper1(rank:17.)
=================================================
Progress: 409


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 410


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 411


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 412


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (height (repr (Left (nat3) (btree2) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 413


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (height (repr (Left (nat3) (btree2) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (repr (zipper2)))(rank:10.)
rewrite <- IH2 in goal at 0(rank:17.)
=================================================
Progress: 414


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 415


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree4)) (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:19.)
=================================================
Progress: 416


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:19.)
=================================================
Progress: 417


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat) (btree1:btree), lq (height (repr (Top))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 418


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat) (btree1:btree), lq (height (repr (Top))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat) (btree1:btree), lq (ZERO) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction btree1(rank:18.)
induction nat1(rank:18.)
=================================================
Progress: 419


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (ZERO) = lq (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 420


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (ZERO) = lq (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 421


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 422


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 423


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (height (repr (Left (nat3) (btree2) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 424


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (height (repr (Left (nat3) (btree2) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (repr (zipper2)))(rank:10.)
rewrite <- IH2 in goal at 0(rank:17.)
=================================================
Progress: 425


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 426


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (btree1:btree), lq (height (repr (Top))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 427


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (btree1:btree), lq (height (repr (Top))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (btree1:btree), true = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 428


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (btree1:btree), true = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
true = lq (height (Empty)) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 429


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
true = lq (height (Empty)) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (height (Node (nat3) (btree2) (btree3))) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 430


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (height (Node (nat3) (btree2) (btree3))) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH2 in goal at 0(rank:17.)
rewrite IH3 in goal at 0(rank:17.)
=================================================
Progress: 431


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:18.)
rewrite IH3 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
=================================================
Progress: 432


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (height (repr (zipper2)))(rank:10.)
=================================================
Progress: 433


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:10.)
=================================================
Progress: 434


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:10.)
=================================================
Progress: 435


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
case lq (height (btree2)) (height (repr (zipper2)))
rewrite IH2 in goal at 0
rewrite <- Case1 in goal at 0
Prop: lq (ZERO) (SUCC (ZERO)) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (SUCC (ZERO)) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Node (ZERO) (Empty) (Empty))) (ZERO)
validate generalize_common_subterm_goal
Prop: lq (ZERO) (ZERO) = lq (height (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Node (ZERO) (Empty) (Empty))) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
case lq (height (btree2)) (height (repr (zipper2)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Right (SUCC (ZERO)) (Empty) (Right (ZERO) (Empty) (Top))))) (ZERO) = true
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Top))) (ZERO) = true
asdf
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
case lq (height (btree2)) (height (repr (zipper2)))
Prop: lq (ZERO) (SUCC (ZERO)) = lq (ZERO) (SUCC (SUCC (ZERO)))
Prop: lq (ZERO) (SUCC (ZERO)) = lq (ZERO) (SUCC (SUCC (ZERO)))
Prop: lq (ZERO) (SUCC (SUCC (ZERO))) = lq (ZERO) (SUCC (SUCC (SUCC (ZERO))))
Lemma List
forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
End of Lemma List


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 436


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))

---------------------------------------
forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction nat1(rank:18.)
induction nat2(rank:18.)
=================================================
Progress: 437


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
intro btree1(rank:9.)
induction btree1(rank:18.)
induction nat1(rank:18.)
induction nat2(rank:18.)
intro zipper1(rank:9.)
=================================================
Progress: 438


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
---------------------------------------
forall (nat1:nat) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro zipper1(rank:9.)
=================================================
Progress: 439


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro zipper1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 440


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
---------------------------------------
forall (nat1:nat) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro zipper1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 441


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction nat1(rank:18.)
induction nat2(rank:18.)
=================================================
Progress: 442


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (height (Empty)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (Empty)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 443


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (height (Empty)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (Empty)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (ZERO) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 444


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (ZERO) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (ZERO) (height (repr (zipper1))) = true
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction nat1(rank:19.)
induction nat2(rank:19.)
=================================================
Progress: 445


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (height (repr (zipper2)))(rank:10.)
=================================================
Progress: 446


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH2 in goal at 0(rank:26.)
=================================================
Progress: 447


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
lq (height (btree2)) (SUCC (nat2)) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (height (btree3))(rank:10.)
=================================================
Progress: 448


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
lq (height (btree2)) (SUCC (nat2)) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:10.)
=================================================
Progress: 449


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH3 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
=================================================
Progress: 450


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
lq (height (btree3)) (SUCC (nat2)) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (height (btree3))(rank:10.)
=================================================
Progress: 451


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
lq (height (btree3)) (SUCC (nat2)) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree3)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:10.)
=================================================
Progress: 452


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree3)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
=================================================
Progress: 453


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (SUCC (height (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH3 in goal at 0
Prop: ZERO = SUCC (ZERO)
Prop: ZERO = SUCC (ZERO)
Prop: ZERO = SUCC (ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (ZERO)
Prop: ZERO = SUCC (ZERO)
Prop: ZERO = SUCC (ZERO)
Prop: height (Empty) = SUCC (height (Empty))
Prop: height (Empty) = SUCC (height (Empty))
Prop: height (Empty) = SUCC (height (Empty))
Prop: SUCC (height (Empty)) = SUCC (SUCC (height (Empty)))
Prop: SUCC (height (Empty)) = SUCC (SUCC (height (Empty)))
Prop: SUCC (height (Empty)) = SUCC (SUCC (height (Empty)))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
validate generalize_common_subterm_goal
Prop: height (Empty) = mainNew (Top)
Prop: height (Empty) = mainNew (Top)
Prop: height (Empty) = mainNew (Top)
=================================================
Progress: 454


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- IH1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 2(rank:28.)
rewrite <- IH2 in goal at 0(rank:28.)
rewrite <- IH2 in goal at 1(rank:28.)
rewrite <- IH2 in goal at 2(rank:28.)
rewrite <- IH1 in goal at 1(rank:28.)
=================================================
Progress: 455


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 456


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:14.)
=================================================
Progress: 457


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
height (btree3) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
rewrite <- IH1 in goal at 0
rewrite IH3 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: height (Empty) = SUCC (height (Empty))
Prop: height (Empty) = SUCC (height (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))
Prop: height (Node (ZERO) (Empty) (Empty)) = SUCC (height (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
rewrite <- IH1 in goal at 0
rewrite IH3 in goal at 0
validate generalize_common_subterm_goal
Prop: mainNew (Top) = SUCC (height (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)))))
Prop: mainNew (Left (ZERO) (Empty) (Top)) = SUCC (height (Empty))
Prop: mainNew (Top) = SUCC (height (Empty))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: Empty = Empty
Prop: Empty = Empty
Prop: Empty = Empty
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
validate generalize_common_subterm_goal
Prop: height (Empty) = mainNew (Top)
Prop: height (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) = mainNew (Top)
Prop: height (Empty) = mainNew (Right (ZERO) (Empty) (Right (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Left (ZERO) (Empty) (Top))))
Prop: SUCC (height (Empty)) = SUCC (mainNew (Right (SUCC (ZERO)) (Empty) (Top)))
Prop: SUCC (height (Empty)) = SUCC (mainNew (Right (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Top)))
Prop: SUCC (height (Empty)) = SUCC (mainNew (Top))
asdf
=================================================
Progress: 458


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 459


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:17.)
rewrite <- Cond2 in goal at 0(rank:17.)
rewrite <- Cond1 in goal at 0(rank:25.)
=================================================
Progress: 460


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree4)) (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:19.)
=================================================
Progress: 461


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree2)) (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
rewrite <- IH2 in goal at 0
reflexivity
rewrite <- Case2 in goal at 0
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty))) (ZERO)
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = lq (height (Empty)) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))))) (SUCC (SUCC (ZERO)))
Prop: lq (height (repr (Right (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Top)))) (SUCC (ZERO)) = lq (height (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Empty)))) (SUCC (ZERO))
Prop: lq (height (repr (Right (ZERO) (Empty) (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Top))))) (ZERO) = lq (height (Empty)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
rewrite <- IH2 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (height (Empty)) = true
Prop: lq (height (repr (Top))) (height (Empty)) = true
Prop: lq (height (repr (Left (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)) (Top)))) (height (Empty)) = true
asdf
Lemma List
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree2)) (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 462


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree2)) (height (btree3))

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro btree1(rank:7.)
intro zipper1(rank:7.)
induction btree1(rank:16.)
induction nat1(rank:16.)
induction zipper1(rank:17.)
intro btree2(rank:7.)
=================================================
Progress: 463


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree1(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
---------------------------------------
forall (nat1:nat) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:7.)
=================================================
Progress: 464


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 465


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro zipper1(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction btree1(rank:16.)
induction nat1(rank:16.)
=================================================
Progress: 466


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
---------------------------------------
forall (nat1:nat) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:9.)
=================================================
Progress: 467


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 468


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 469


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 470


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 471


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 472


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 473


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:9.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 474


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:18.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 475


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 476


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 477


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 478


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 479


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 480


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:19.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 481


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 482


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:8.)
=================================================
Progress: 483


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 484


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 485


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 486


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 487


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 488


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 489


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:19.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 490


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (ZERO) = lq (height (btree1)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 491


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (ZERO) = lq (height (btree1)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 5
intro btree1(rank:7.)
intro zipper1(rank:7.)
induction btree1(rank:16.)
induction zipper1(rank:17.)
intro btree2(rank:7.)
=================================================
Progress: 492


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree1(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:7.)
=================================================
Progress: 493


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 494


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro zipper1(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 495


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:9.)
=================================================
Progress: 496


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 497


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 498


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 499


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:8.)
=================================================
Progress: 500


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 501


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 502


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:16.)
rewrite <- Cond2 in goal at 0(rank:16.)
=================================================
Progress: 503


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 504


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 505


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 506


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 507


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:9.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 508


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:11.)
=================================================
Progress: 509


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 510


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 511


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 512


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 513


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- Cond1 in goal at 0(rank:17.)
rewrite <- Cond2 in goal at 0(rank:17.)
=================================================
Progress: 514


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 515


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
rewrite <- IH2 in goal at 0
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (ZERO) (SUCC (ZERO)) = lq (ZERO) (SUCC (SUCC (ZERO)))
validate generalize_common_subterm_goal
Prop: lq (ZERO) (SUCC (SUCC (ZERO))) = lq (ZERO) (SUCC (SUCC (SUCC (ZERO))))
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (SUCC (SUCC (ZERO))) (ZERO) = lq (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (repr (Top))) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (repr (Top))) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (repr (Top))) (SUCC (ZERO))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Left (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (Top)))) (ZERO) = lq (height (Node (ZERO) (Empty) (Empty))) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Empty)) (SUCC (ZERO))
asdf
=================================================
Progress: 516


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 517


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:8.)
=================================================
Progress: 518


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 519


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 520


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:9.)
=================================================
Progress: 521


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
lq (height (repr (zipper1))) (ZERO) = lq (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 522


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
lq (height (repr (zipper1))) (ZERO) = lq (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
nat2 : nat
IH1 : lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 523


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
nat2 : nat
IH1 : lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
nat2 : nat
IH1 : lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:16.)
rewrite <- Cond2 in goal at 0(rank:16.)
=================================================
Progress: 524


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (ZERO) = lq (height (btree1)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 525


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (ZERO) = lq (height (btree1)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 3
intro btree1(rank:7.)
intro btree2(rank:7.)
induction btree1(rank:16.)
=================================================
Progress: 526


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree1(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:7.)
=================================================
Progress: 527


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
forall (btree1:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 528


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 529


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 530


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
intro btree1
intro btree2
intro Cond1
intro Cond2
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) (SUCC (ZERO))
Prop: lq (height (repr (Left (SUCC (SUCC (ZERO))) (Empty) (Top)))) (SUCC (SUCC (SUCC (ZERO)))) = lq (height (Empty)) (SUCC (SUCC (SUCC (ZERO))))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (ZERO)
validate generalize_common_subterm_goal
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Empty)) (ZERO)
Lemma List
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 531


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
induction btree1(rank:18.)
induction nat1(rank:18.)
induction zipper1(rank:19.)
=================================================
Progress: 532


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
forall (btree1:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 533


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 534


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 535


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:16.)
rewrite <- Cond2 in goal at 0(rank:16.)
=================================================
Progress: 536


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 537


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:8.)
=================================================
Progress: 538


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 539


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 540


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 541


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 542


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 543


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- Cond1 in goal at 0(rank:17.)
rewrite <- Cond2 in goal at 0(rank:17.)
=================================================
Progress: 544


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 545


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree2)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
rewrite <- Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Top))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Top))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Top))
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = true
Lemma List
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
End of Lemma List


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
End of Lemma List


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree2)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 546


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true(rank : 0.)


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true

---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 547


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree2)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
intro btree1(rank:9.)
intro zipper1(rank:9.)
induction btree1(rank:18.)
induction zipper1(rank:19.)
intro nat1(rank:9.)
=================================================
Progress: 548


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro nat1(rank:9.)
intro zipper1(rank:9.)
induction zipper1(rank:19.)
=================================================
Progress: 549


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 550


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro zipper1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 551


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 552


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro zipper1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 553


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 554


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro nat1(rank:9.)
rewrite Cond1 in goal at 0(rank:25.)
=================================================
Progress: 555


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9.)
=================================================
Progress: 556


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Cond2 in goal at 0(rank:9.)
=================================================
Progress: 557


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (SUCC (SUCC (SUCC (ZERO)))) = true
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
validate generalize_common_subterm_goal
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Right (ZERO) (Empty) (Top)))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty))) (mainNew (Top))
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (mainNew (Top))
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Lemma List
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 558


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
intro btree1(rank:11.)
intro zipper1(rank:11.)
induction btree1(rank:20.)
induction zipper1(rank:21.)
intro nat1(rank:11.)
=================================================
Progress: 559


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true(rank : 0.)


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true

---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:13.)
=================================================
Progress: 560


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
intro btree1(rank:11.)
intro zipper1(rank:11.)
induction btree1(rank:20.)
induction zipper1(rank:21.)
intro nat1(rank:11.)
=================================================
Progress: 561


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 562


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 563


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:12.)
=================================================
Progress: 564


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 565


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 566


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 567


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 568


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 569


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
---------------------------------------
true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 570


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
---------------------------------------
true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
Cond2 : true = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH2 in goal at 0(rank:19.)
rewrite Cond1 in goal at 0(rank:17.)
rewrite IH1 in goal at 0(rank:19.)
=================================================
Progress: 571


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
Cond2 : true = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (height (btree3))) (mainNew (zipper1)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:20.)
rewrite Cond1 in goal at 0(rank:26.)
rewrite IH2 in goal at 0(rank:20.)
=================================================
Progress: 572


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true

---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (repr (Top))) (SUCC (nat1)) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 573


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (repr (Top))) (SUCC (nat1)) = true

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
nat2 : nat
btree1 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive1 : zipper1 = Left (nat2) (btree1) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (repr (Left (nat2) (btree1) (zipper2)))) (SUCC (nat1)) = true

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 574


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
nat2 : nat
btree1 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive1 : zipper1 = Left (nat2) (btree1) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (repr (Left (nat2) (btree1) (zipper2)))) (SUCC (nat1)) = true

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
nat2 : nat
btree1 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive1 : zipper1 = Left (nat2) (btree1) (zipper2)
---------------------------------------
forall (nat1:nat), lq (if lq (height (btree1)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree1)) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (height (btree1)) (height (repr (zipper2)))(rank:11.)
=================================================
Progress: 575


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (Top))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 576


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (Top))

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2))) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2)))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 577


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2))) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2)))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 578


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 579


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (repr (zipper2)))(rank:11.)
rewrite Cond1 in goal at 0(rank:26.)
case lq (height (btree2)) (mainNew (zipper2))(rank:11.)
=================================================
Progress: 580


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro nat1(rank:11.)
intro zipper1(rank:11.)
induction zipper1(rank:21.)
=================================================
Progress: 581


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 582


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 583


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro btree1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro nat1(rank:11.)
intro zipper1(rank:11.)
induction zipper1(rank:21.)
=================================================
Progress: 584


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 585


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction btree1(rank:12.)
=================================================
Progress: 586


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
nat2 : nat
btree1 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive1 : zipper1 = Left (nat2) (btree1) (zipper2)
---------------------------------------
forall (nat1:nat), lq (if lq (height (btree1)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree1)) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree1)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
nat2 : nat
btree1 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive1 : zipper1 = Left (nat2) (btree1) (zipper2)
Case1 : lq (height (btree1)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper2))) (nat1) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:19.)
induction nat1(rank:20.)
=================================================
Progress: 587


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (mainNew (zipper2))(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
=================================================
Progress: 588


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (repr (zipper2)))(rank:12.)
rewrite Cond1 in goal at 0(rank:27.)
=================================================
Progress: 589


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:13.)
=================================================
Progress: 590


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 591


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:13.)
=================================================
Progress: 592


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 593


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11.)
=================================================
Progress: 594


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11.)
=================================================
Progress: 595


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro nat1(rank:11.)
rewrite Cond1 in goal at 0(rank:27.)
=================================================
Progress: 596


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro nat1(rank:11.)
rewrite Cond2 in goal at 0(rank:27.)
=================================================
Progress: 597


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11.)
=================================================
Progress: 598


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:11.)
=================================================
Progress: 599


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- Cond2 in goal at 0(rank:11.)
=================================================
Progress: 600


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:11.)
=================================================
Progress: 601


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (SUCC (SUCC (ZERO)))) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Left (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (Node (SUCC (ZERO)) (Empty) (Empty))) (Left (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Top))))) (SUCC (SUCC (ZERO))) = true
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = true
asdf
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Node (SUCC (ZERO)) (Empty) (Empty))) (mainNew (Top))
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (height (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))) (mainNew (Top))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Top))
=================================================
Progress: 602


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Left (ZERO) (Empty) (Top)))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Top))
Prop: lq (height (repr (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Top)))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Top)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (SUCC (SUCC (SUCC (ZERO)))) = true
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (ZERO) (height (Node (ZERO) (Empty) (Empty)))
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
Lemma List
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
End of Lemma List


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 603


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 5
intro btree1(rank:13.)
intro zipper1(rank:13.)
induction btree1(rank:22.)
induction zipper1(rank:23.)
intro nat1(rank:13.)
=================================================
Progress: 604


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true(rank : 0.)


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true

---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:15.)
=================================================
Progress: 605


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 5
intro btree1(rank:13.)
intro zipper1(rank:13.)
induction btree1(rank:22.)
induction zipper1(rank:23.)
intro nat1(rank:13.)
=================================================
Progress: 606


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
>>> induction zipper1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (ZERO) (mainNew (Top))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:11.)
=================================================
Progress: 607


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (ZERO) (mainNew (Top))

3 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2)))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 608


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2)))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 609


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 610


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = true

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Right (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2)))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 611


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Right (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2)))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 612


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 613


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 614


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 615


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 616


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top))

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2)))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 617


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2)))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 618


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 619


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case lq (height (btree2)) (height (btree3))(rank:11.)
rewrite Cond1 in goal at 0(rank:26.)
case lq (height (btree4)) (height (repr (zipper2)))(rank:11.)
case lq (height (btree4)) (mainNew (zipper2))(rank:11.)
=================================================
Progress: 620


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (repr (zipper2)))(rank:12.)
rewrite Cond1 in goal at 0(rank:27.)
case lq (height (btree4)) (mainNew (zipper2))(rank:12.)
=================================================
Progress: 621


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
case lq (height (btree4)) (mainNew (zipper2))(rank:12.)
=================================================
Progress: 622


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite Cond1 in goal at 0(rank:27.)
case lq (height (btree4)) (height (repr (zipper2)))(rank:12.)
=================================================
Progress: 623


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 624


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 625


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Empty))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 626


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction btree1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Empty))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 627


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (mainNew (zipper2))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:12.)
=================================================
Progress: 628


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:12.)
=================================================
Progress: 629


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (mainNew (zipper2))(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 630


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (repr (zipper2)))(rank:13.)
rewrite <- IH2 in goal at 0(rank:22.)
rewrite Cond1 in goal at 0(rank:28.)
=================================================
Progress: 631


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (mainNew (zipper2))(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 632


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 633


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (repr (zipper2)))(rank:13.)
rewrite <- IH2 in goal at 0(rank:22.)
rewrite Cond1 in goal at 0(rank:28.)
=================================================
Progress: 634


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 635


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:14.)
=================================================
Progress: 636


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:12.)
=================================================
Progress: 637


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Empty))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:14.)
=================================================
Progress: 638


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Empty))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:12.)
=================================================
Progress: 639


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Cond2 in goal at 0(rank:20.)
=================================================
Progress: 640


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Cond2 in goal at 0(rank:20.)
=================================================
Progress: 641


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:11.)
=================================================
Progress: 642


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 643


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 644


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 645


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
---------------------------------------
true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11.)
=================================================
Progress: 646


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
---------------------------------------
true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
Cond2 : true = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite IH2 in goal at 0(rank:21.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite IH1 in goal at 0(rank:21.)
=================================================
Progress: 647


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:11.)
=================================================
Progress: 648


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 649


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 650


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 651


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
---------------------------------------
true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11.)
=================================================
Progress: 652


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
---------------------------------------
true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
Cond2 : true = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:21.)
rewrite IH2 in goal at 0(rank:21.)
rewrite <- Cond1 in goal at 0(rank:27.)
=================================================
Progress: 653


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
Cond2 : true = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (height (btree3))) (mainNew (zipper1)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper1))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:22.)
rewrite Cond1 in goal at 0(rank:28.)
rewrite IH2 in goal at 0(rank:22.)
=================================================
Progress: 654


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true

---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction zipper1(rank : 13.)


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (repr (Top))) (SUCC (nat1)) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 655


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (repr (Top))) (SUCC (nat1)) = true

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
nat2 : nat
btree1 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive1 : zipper1 = Left (nat2) (btree1) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (repr (Left (nat2) (btree1) (zipper2)))) (SUCC (nat1)) = true

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 656


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
nat2 : nat
btree1 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive1 : zipper1 = Left (nat2) (btree1) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (repr (Left (nat2) (btree1) (zipper2)))) (SUCC (nat1)) = true

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
nat2 : nat
btree1 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive1 : zipper1 = Left (nat2) (btree1) (zipper2)
---------------------------------------
forall (nat1:nat), lq (if lq (height (btree1)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree1)) (nat1) = true

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case lq (height (btree1)) (height (repr (zipper2)))(rank:13.)
=================================================
Progress: 657


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction zipper1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (Top))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:12.)
=================================================
Progress: 658


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (Top))

2 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2))) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2)))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 659


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2))) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2)))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:12.)
=================================================
Progress: 660


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:12.)
=================================================
Progress: 661


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (repr (zipper2)))(rank:13.)
rewrite Cond1 in goal at 0(rank:28.)
case lq (height (btree2)) (mainNew (zipper2))(rank:13.)
=================================================
Progress: 662


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction zipper1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:12.)
=================================================
Progress: 663


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

2 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2))) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 664


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2))) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:12.)
=================================================
Progress: 665


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:12.)
=================================================
Progress: 666


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (repr (zipper2)))(rank:13.)
rewrite <- IH1 in goal at 0(rank:22.)
rewrite Cond2 in goal at 0(rank:28.)
=================================================
Progress: 667


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro btree1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
intro nat1(rank:13.)
intro zipper1(rank:13.)
induction zipper1(rank:23.)
=================================================
Progress: 668


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction btree1(rank:14.)
=================================================
Progress: 669


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro zipper1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction btree1(rank:14.)
=================================================
Progress: 670


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro btree1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
intro nat1(rank:13.)
intro zipper1(rank:13.)
induction zipper1(rank:23.)
=================================================
Progress: 671


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction btree1(rank:14.)
=================================================
Progress: 672


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro zipper1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction btree1(rank:14.)
=================================================
Progress: 673


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:23.)
rewrite Cond1 in goal at 0(rank:29.)
=================================================
Progress: 674


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:23.)
rewrite Cond1 in goal at 0(rank:29.)
=================================================
Progress: 675


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:23.)
rewrite Cond1 in goal at 0(rank:29.)
=================================================
Progress: 676


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:23.)
rewrite Cond1 in goal at 0(rank:29.)
=================================================
Progress: 677


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:23.)
rewrite Cond1 in goal at 0(rank:29.)
=================================================
Progress: 678


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:23.)
rewrite Cond1 in goal at 0(rank:29.)
=================================================
Progress: 679


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
nat2 : nat
btree1 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive1 : zipper1 = Left (nat2) (btree1) (zipper2)
---------------------------------------
forall (nat1:nat), lq (if lq (height (btree1)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree1)) (nat1) = true

1 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree1)) (height (repr (zipper2)))(rank : 13.)


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
nat2 : nat
btree1 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive1 : zipper1 = Left (nat2) (btree1) (zipper2)
Case1 : lq (height (btree1)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper2))) (nat1) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:21.)
induction nat1(rank:22.)
=================================================
Progress: 680


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (mainNew (zipper2))(rank:14.)
rewrite Cond1 in goal at 0(rank:21.)
=================================================
Progress: 681


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree2)) (mainNew (zipper2))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (repr (zipper2)))(rank:14.)
rewrite Cond1 in goal at 0(rank:29.)
=================================================
Progress: 682


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (ZERO) (height (btree1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:23.)
rewrite Cond2 in goal at 0(rank:29.)
=================================================
Progress: 683


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:15.)
=================================================
Progress: 684


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro zipper1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 685


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:15.)
=================================================
Progress: 686


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro zipper1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 687


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 688


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 689


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
intro nat1(rank:13.)
rewrite Cond2 in goal at 0(rank:29.)
=================================================
Progress: 690


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
intro nat1(rank:13.)
rewrite Cond1 in goal at 0(rank:29.)
=================================================
Progress: 691


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:13.)
=================================================
Progress: 692


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:13.)
=================================================
Progress: 693


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:13.)
=================================================
Progress: 694


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite <- Cond2 in goal at 0(rank:13.)
=================================================
Progress: 695


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Right (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Right (ZERO) (Node (ZERO) (Empty) (Empty)) (Top))))) (SUCC (SUCC (SUCC (ZERO)))) = lq (height (Empty)) (mainNew (Right (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Right (ZERO) (Node (ZERO) (Empty) (Empty)) (Top))))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Top))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Top))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Right (SUCC (ZERO)) (Empty) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Right (SUCC (ZERO)) (Empty) (Top)))) (SUCC (ZERO)) = true
asdf
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
=================================================
Progress: 696


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Left (SUCC (ZERO)) (Empty) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
asdf
validate generalize_common_subterm_goal
Prop: lq (height (repr (Right (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Top)))) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (mainNew (Right (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Top)))
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Right (ZERO) (Empty) (Top)))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Top))
=================================================
Progress: 697


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

4 conjecture(s) more...
>>> induction zipper1(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (ZERO) (mainNew (Top))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 698


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (ZERO) (mainNew (Top))

3 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2)))

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 699


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2)))

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 700


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:12.)
=================================================
Progress: 701


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = true

2 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Right (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2)))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 702


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Right (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2)))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = true

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:12.)
=================================================
Progress: 703


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = true

1 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = true

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:11.)
=================================================
Progress: 704


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = true

1 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 705


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:13.)
=================================================
Progress: 706


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction zipper1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:12.)
=================================================
Progress: 707


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top))

2 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2)))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 708


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2)))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:12.)
=================================================
Progress: 709


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:12.)
=================================================
Progress: 710


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
case lq (height (btree2)) (height (btree3))(rank:13.)
rewrite Cond1 in goal at 0(rank:28.)
case lq (height (btree4)) (height (repr (zipper2)))(rank:13.)
case lq (height (btree4)) (mainNew (zipper2))(rank:13.)
=================================================
Progress: 711


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (repr (zipper2)))(rank:14.)
rewrite Cond1 in goal at 0(rank:29.)
case lq (height (btree4)) (mainNew (zipper2))(rank:14.)
=================================================
Progress: 712


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:14.)
rewrite Cond1 in goal at 0(rank:21.)
case lq (height (btree4)) (mainNew (zipper2))(rank:14.)
=================================================
Progress: 713


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:14.)
rewrite Cond1 in goal at 0(rank:29.)
case lq (height (btree4)) (height (repr (zipper2)))(rank:14.)
=================================================
Progress: 714


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

4 conjecture(s) more...
>>> induction zipper1(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> lq (height (repr (Top))) (SUCC (nat1)) = false

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 715


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> lq (height (repr (Top))) (SUCC (nat1)) = false

3 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = false

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 716


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = false

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = false

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 717


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = false

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = false

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:12.)
=================================================
Progress: 718


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = false

2 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Right (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = false

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 719


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Right (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = false

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = false

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:12.)
=================================================
Progress: 720


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = false

1 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = false

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:11.)
=================================================
Progress: 721


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = false

1 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 722


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:13.)
=================================================
Progress: 723


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction zipper1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 724


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = true

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = true

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 725


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = true

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:12.)
=================================================
Progress: 726


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:12.)
=================================================
Progress: 727


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (repr (zipper2)))(rank:13.)
rewrite <- Cond1 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:22.)
=================================================
Progress: 728


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 729


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
>>> induction btree1(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Empty))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 730


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
>>> induction btree1(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Empty))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 731


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> induction btree1(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 732


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> induction btree1(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 733


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

2 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree2)) (mainNew (zipper2))(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:14.)
=================================================
Progress: 734


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

2 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:14.)
=================================================
Progress: 735


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (mainNew (zipper2))(rank:15.)
rewrite Cond1 in goal at 0(rank:22.)
=================================================
Progress: 736


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (repr (zipper2)))(rank:15.)
rewrite <- IH2 in goal at 0(rank:24.)
rewrite Cond1 in goal at 0(rank:30.)
=================================================
Progress: 737


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (mainNew (zipper2))(rank:15.)
rewrite Cond1 in goal at 0(rank:22.)
=================================================
Progress: 738


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:15.)
rewrite Cond1 in goal at 0(rank:22.)
=================================================
Progress: 739


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

2 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (repr (zipper2)))(rank:15.)
rewrite <- IH2 in goal at 0(rank:24.)
rewrite Cond1 in goal at 0(rank:30.)
=================================================
Progress: 740


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

2 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:15.)
rewrite Cond1 in goal at 0(rank:22.)
=================================================
Progress: 741


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Empty))

1 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:16.)
=================================================
Progress: 742


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Empty))

1 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 743


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:16.)
=================================================
Progress: 744


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 745


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Cond2 in goal at 0(rank:22.)
=================================================
Progress: 746


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Cond2 in goal at 0(rank:22.)
=================================================
Progress: 747


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 748


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

5 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 749


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro nat1(rank:13.)
=================================================
Progress: 750


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

5 conjecture(s) more...
>>> intro nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 751


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
---------------------------------------
true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 752


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
---------------------------------------
true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
Cond2 : true = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 0(rank:29.)
=================================================
Progress: 753


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 754


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

5 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 755


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro nat1(rank:13.)
=================================================
Progress: 756


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro nat1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 757


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
---------------------------------------
true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 758


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
---------------------------------------
true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
Cond2 : true = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 4
case lq (height (btree2)) (height (btree3))(rank:14.)
rewrite IH2 in goal at 0(rank:23.)
rewrite Cond1 in goal at 0(rank:21.)
rewrite IH1 in goal at 0(rank:23.)
=================================================
Progress: 759


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
Cond2 : true = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (height (btree3))) (mainNew (zipper1)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper1))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:24.)
rewrite Cond1 in goal at 0(rank:30.)
rewrite IH2 in goal at 0(rank:24.)
=================================================
Progress: 760


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true

---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

5 conjecture(s) more...
>>> induction zipper1(rank : 15.)


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (repr (Top))) (SUCC (nat1)) = true

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14.)
=================================================
Progress: 761


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (repr (Top))) (SUCC (nat1)) = true

2 goal(s) more...

5 conjecture(s) more...
>>> reflexivity(rank : 14.)


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
nat2 : nat
btree1 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive1 : zipper1 = Left (nat2) (btree1) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (repr (Left (nat2) (btree1) (zipper2)))) (SUCC (nat1)) = true

1 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 762


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
nat2 : nat
btree1 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive1 : zipper1 = Left (nat2) (btree1) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (repr (Left (nat2) (btree1) (zipper2)))) (SUCC (nat1)) = true

1 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
nat2 : nat
btree1 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive1 : zipper1 = Left (nat2) (btree1) (zipper2)
---------------------------------------
forall (nat1:nat), lq (if lq (height (btree1)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree1)) (nat1) = true

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
case lq (height (btree1)) (height (repr (zipper2)))(rank:15.)
=================================================
Progress: 763


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

5 conjecture(s) more...
>>> induction zipper1(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 764


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

2 goal(s) more...

5 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2))) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

1 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 765


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2))) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

1 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 766


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 767


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (repr (zipper2)))(rank:15.)
rewrite <- IH1 in goal at 0(rank:24.)
rewrite Cond2 in goal at 0(rank:30.)
=================================================
Progress: 768


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> induction zipper1(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (Top))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 769


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (Top))

2 goal(s) more...

5 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2))) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2)))

1 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 770


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2))) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2)))

1 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 771


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 772


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (repr (zipper2)))(rank:15.)
rewrite Cond1 in goal at 0(rank:30.)
case lq (height (btree2)) (mainNew (zipper2))(rank:15.)
=================================================
Progress: 773


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:25.)
rewrite Cond1 in goal at 0(rank:31.)
=================================================
Progress: 774


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:25.)
rewrite Cond1 in goal at 0(rank:31.)
=================================================
Progress: 775


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:25.)
rewrite Cond1 in goal at 0(rank:31.)
=================================================
Progress: 776


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:25.)
rewrite Cond1 in goal at 0(rank:31.)
=================================================
Progress: 777


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:25.)
rewrite Cond1 in goal at 0(rank:31.)
=================================================
Progress: 778


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

4 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:25.)
rewrite Cond1 in goal at 0(rank:31.)
=================================================
Progress: 779


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
nat2 : nat
btree1 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive1 : zipper1 = Left (nat2) (btree1) (zipper2)
---------------------------------------
forall (nat1:nat), lq (if lq (height (btree1)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree1)) (nat1) = true

1 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree1)) (height (repr (zipper2)))(rank : 15.)


1st goal of : forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat1)) = true
zipper1 : zipper
nat2 : nat
btree1 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive1 : zipper1 = Left (nat2) (btree1) (zipper2)
Case1 : lq (height (btree1)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper2))) (nat1) = true

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:23.)
induction nat1(rank:24.)
=================================================
Progress: 780


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (ZERO) (height (btree1))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:25.)
rewrite Cond2 in goal at 0(rank:31.)
=================================================
Progress: 781


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (mainNew (zipper2))(rank:16.)
rewrite Cond1 in goal at 0(rank:23.)
=================================================
Progress: 782


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

1 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree2)) (mainNew (zipper2))(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (repr (zipper2)))(rank:16.)
rewrite Cond1 in goal at 0(rank:31.)
=================================================
Progress: 783


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (height (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
rewrite <- Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (SUCC (SUCC (ZERO))) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
End of Lemma List


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (height (btree2))

1 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 784


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (height (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
intro btree1(rank:9.)
intro zipper1(rank:9.)
induction btree1(rank:18.)
induction zipper1(rank:19.)
intro nat1(rank:9.)
=================================================
Progress: 785


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro nat1(rank:9.)
intro zipper1(rank:9.)
induction zipper1(rank:19.)
=================================================
Progress: 786


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 787


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro zipper1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 788


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 789


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro zipper1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 790


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 791


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro nat1(rank:9.)
rewrite Cond2 in goal at 0(rank:25.)
=================================================
Progress: 792


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:9.)
=================================================
Progress: 793


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:9.)
=================================================
Progress: 794


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree1)) = true
nat1 : nat
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (mainNew (Top))
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (height (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty))) (mainNew (Top))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Top))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = true
Prop: lq (height (repr (Left (SUCC (SUCC (ZERO))) (Empty) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
asdf
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)) (Empty)))
Prop: lq (height (repr (Top))) (SUCC (SUCC (SUCC (ZERO)))) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty)) (Empty))) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))))
=================================================
Progress: 795


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Empty))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 796


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (nat1:nat), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Empty))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 797


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Empty))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:12.)
=================================================
Progress: 798


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Empty))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 799


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 800


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 801


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 802


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 803


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
---------------------------------------
true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 804


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
---------------------------------------
true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
Cond2 : true = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
rewrite <- Cond1 in goal at 0(rank:25.)
=================================================
Progress: 805


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 806


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree1)) (mainNew (Top)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2))) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 807


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (mainNew (Left (nat2) (btree2) (zipper2))) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 808


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true->lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 809


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
---------------------------------------
lq (ZERO) (height (btree1)) = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (repr (zipper2)))(rank:11.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite Cond2 in goal at 0(rank:26.)
=================================================
Progress: 810


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (ZERO) (height (btree1))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (ZERO) (height (btree1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:21.)
rewrite Cond2 in goal at 0(rank:27.)
=================================================
Progress: 811


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
>>> induction zipper1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> lq (height (repr (Top))) (SUCC (nat1)) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:11.)
=================================================
Progress: 812


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> lq (height (repr (Top))) (SUCC (nat1)) = false

3 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = false

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 813


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = false

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = false

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 814


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = false

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = false

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 815


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = false

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Right (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 816


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Right (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 817


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 818


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = false

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 819


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 820


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 821


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = true

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = true

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 822


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = true

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 823


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 824


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (repr (zipper2)))(rank:11.)
rewrite <- Cond1 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 825


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 826


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
nat2 : nat
IH1 : lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
nat2 : nat
IH1 : lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree2)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (mainNew (Top))
Prop: lq (height (repr (Right (SUCC (ZERO)) (Empty) (Top)))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Right (SUCC (ZERO)) (Empty) (Top)))
Prop: lq (height (repr (Top))) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = lq (height (Empty)) (mainNew (Top))
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = true
=================================================
Progress: 827


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
nat2 : nat
IH1 : lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
nat2 : nat
IH1 : lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (height (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (Node (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty)))))
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Right (SUCC (ZERO)) (Empty) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = true
asdf
=================================================
Progress: 828


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 829


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:8.)
=================================================
Progress: 830


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 831


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 832


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:16.)
rewrite <- Cond2 in goal at 0(rank:16.)
=================================================
Progress: 833


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree2)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Left (SUCC (ZERO)) (Empty) (Left (SUCC (ZERO)) (Empty) (Top))))) (SUCC (ZERO)) = lq (height (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (Node (ZERO) (Empty) (Empty)))) (mainNew (Left (SUCC (ZERO)) (Empty) (Left (SUCC (ZERO)) (Empty) (Top))))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Top))
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (mainNew (Top))
previous tactics
simpl in goal
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = true
Prop: lq (height (repr (Top))) (SUCC (SUCC (SUCC (ZERO)))) = true
=================================================
Progress: 834


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (height (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (SUCC (SUCC (ZERO)))) = lq (ZERO) (height (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))))
previous tactics
simpl in goal
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Left (SUCC (ZERO)) (Empty) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = true
asdf
=================================================
Progress: 835


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

5 conjecture(s) more...
>>> induction zipper1(rank : 16.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> lq (height (repr (Top))) (SUCC (nat1)) = false

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
discriminate(rank:15.)
=================================================
Progress: 836


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> lq (height (repr (Top))) (SUCC (nat1)) = false

3 goal(s) more...

5 conjecture(s) more...
>>> discriminate(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = false

2 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 837


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = false

2 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = false

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 838


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = false

2 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = false

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 839


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = false

2 goal(s) more...

5 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Right (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = false

1 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 840


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Right (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = false

1 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = false

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 841


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = false

1 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = false

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 842


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = false
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = false

1 goal(s) more...

5 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 843


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:15.)
=================================================
Progress: 844


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

5 conjecture(s) more...
>>> induction zipper1(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = true

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14.)
=================================================
Progress: 845


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = true

2 goal(s) more...

5 conjecture(s) more...
>>> reflexivity(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = true

1 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 846


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = true

1 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 847


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 848


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (repr (zipper2)))(rank:15.)
rewrite <- Cond1 in goal at 0(rank:22.)
rewrite <- IH3 in goal at 0(rank:24.)
=================================================
Progress: 849


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 0(rank:31.)
rewrite <- IH3 in goal at 0(rank:25.)
=================================================
Progress: 850


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

5 conjecture(s) more...
>>> induction zipper1(rank : 16.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (ZERO) (mainNew (Top))

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
discriminate(rank:15.)
=================================================
Progress: 851


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (ZERO) (mainNew (Top))

3 goal(s) more...

5 conjecture(s) more...
>>> discriminate(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2)))

2 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 852


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (mainNew (Left (nat2) (btree2) (zipper2)))

2 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = true

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 853


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = true

2 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = true

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 854


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = true

2 goal(s) more...

5 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Right (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2)))

1 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 855


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2))) = true->false = true -> lq (height (repr (Right (nat2) (btree2) (zipper2)))) (SUCC (nat1)) = lq (ZERO) (mainNew (Right (nat2) (btree2) (zipper2)))

1 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = true

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 856


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = true

1 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = true

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 857


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> lq (if lq (height (repr (zipper2))) (height (btree2)) then height (btree2) else height (repr (zipper2))) (nat1) = true

1 goal(s) more...

5 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 858


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:15.)
=================================================
Progress: 859


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

5 conjecture(s) more...
>>> induction zipper1(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 860


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top))

2 goal(s) more...

5 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2)))

1 goal(s) more...

5 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 861


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2)))

1 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 862


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 863


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

5 conjecture(s) more...
Tactic List : 4
case lq (height (btree2)) (height (btree3))(rank:15.)
rewrite Cond1 in goal at 0(rank:30.)
case lq (height (btree4)) (height (repr (zipper2)))(rank:15.)
case lq (height (btree4)) (mainNew (zipper2))(rank:15.)
=================================================
Progress: 864


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (repr (zipper2)))(rank:16.)
rewrite Cond1 in goal at 0(rank:31.)
case lq (height (btree4)) (mainNew (zipper2))(rank:16.)
=================================================
Progress: 865


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:16.)
rewrite Cond1 in goal at 0(rank:23.)
case lq (height (btree4)) (mainNew (zipper2))(rank:16.)
=================================================
Progress: 866


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 15.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:16.)
rewrite Cond1 in goal at 0(rank:31.)
case lq (height (btree4)) (height (repr (zipper2)))(rank:16.)
=================================================
Progress: 867


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2)))

2 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree2)) (mainNew (zipper2))(rank : 16.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:16.)
=================================================
Progress: 868


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

2 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 16.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:16.)
=================================================
Progress: 869


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree2)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
rewrite <- Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Node (ZERO) (Empty) (Empty))) (mainNew (Top))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (Node (ZERO) (Empty) (Empty)))) (mainNew (Top))
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (mainNew (Top))
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (SUCC (SUCC (ZERO))) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
=================================================
Progress: 870


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (height (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
rewrite <- Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Empty)))))
Prop: lq (height (repr (Right (ZERO) (Empty) (Left (ZERO) (Empty) (Top))))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Left (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Top)))) (SUCC (SUCC (SUCC (ZERO)))) = lq (ZERO) (height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))
asdf
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = true
asdf
=================================================
Progress: 871


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 16.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (mainNew (zipper2))(rank:17.)
rewrite Cond1 in goal at 0(rank:24.)
=================================================
Progress: 872


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 16.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (repr (zipper2)))(rank:17.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite Cond1 in goal at 0(rank:32.)
=================================================
Progress: 873


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 16.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (mainNew (zipper2))(rank:17.)
rewrite Cond1 in goal at 0(rank:24.)
=================================================
Progress: 874


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 16.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:17.)
rewrite Cond1 in goal at 0(rank:24.)
=================================================
Progress: 875


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

2 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 16.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (repr (zipper2)))(rank:17.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite Cond1 in goal at 0(rank:32.)
=================================================
Progress: 876


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

2 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 16.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:17.)
rewrite Cond1 in goal at 0(rank:24.)
=================================================
Progress: 877


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

5 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Case2 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
=================================================
Progress: 878


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

5 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (height (btree1)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : lq (height (btree1)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree1)) = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Case2 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
=================================================
Progress: 879


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:19.)
=================================================
Progress: 880


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 881


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 882


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:8.)
=================================================
Progress: 883


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
---------------------------------------
forall (nat1:nat) (btree1:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:9.)
=================================================
Progress: 884


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
---------------------------------------
forall (nat1:nat) (btree1:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (Empty)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (Empty)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 885


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (Empty)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (Empty)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 886


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 887


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
=================================================
Progress: 888


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 889


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (ZERO) = lq (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 890


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (ZERO) = lq (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (ZERO) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (SUCC (nat3)) = lq (ZERO) (SUCC (nat3))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 891


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (ZERO) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (SUCC (nat3)) = lq (ZERO) (SUCC (nat3))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (ZERO) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (height (repr (zipper2))) (nat3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 0(rank:18.)
=================================================
Progress: 892


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 893


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 894


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:8.)
=================================================
Progress: 895


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
---------------------------------------
forall (btree1:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:9.)
=================================================
Progress: 896


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
---------------------------------------
forall (btree1:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (Empty)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (Empty)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 897


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (Empty)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (Empty)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 898


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 899


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
rewrite <- Cond1 in goal at 0(rank:17.)
rewrite <- Cond2 in goal at 0(rank:17.)
=================================================
Progress: 900


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 0(rank:18.)
=================================================
Progress: 901


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
case lq (height (btree3)) (mainNew (zipper2))(rank:10.)
=================================================
Progress: 902


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (mainNew (zipper2))(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
=================================================
Progress: 903


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:11.)
rewrite Cond1 in goal at 0(rank:26.)
=================================================
Progress: 904


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11.)
=================================================
Progress: 905


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11.)
=================================================
Progress: 906


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 907


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 908


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (ZERO) (height (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
=================================================
Progress: 909


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (ZERO) (height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:10.)
=================================================
Progress: 910


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 911


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
case lq (height (btree3)) (mainNew (zipper2))(rank:10.)
=================================================
Progress: 912


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (mainNew (zipper2))(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
=================================================
Progress: 913


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:11.)
rewrite Cond1 in goal at 0(rank:26.)
=================================================
Progress: 914


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11.)
=================================================
Progress: 915


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11.)
=================================================
Progress: 916


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 917


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 918


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (ZERO) (height (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
=================================================
Progress: 919


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (ZERO) (height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:10.)
=================================================
Progress: 920


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 921


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
Cond2 : true = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
zipper1 : zipper
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
Cond1 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true
Cond2 : true = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:19.)
rewrite IH2 in goal at 0(rank:19.)
=================================================
Progress: 922


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 17.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:27.)
rewrite Cond1 in goal at 0(rank:33.)
=================================================
Progress: 923


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 17.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:27.)
rewrite Cond1 in goal at 0(rank:33.)
=================================================
Progress: 924


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 17.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:27.)
rewrite Cond1 in goal at 0(rank:33.)
=================================================
Progress: 925


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 17.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:27.)
rewrite Cond1 in goal at 0(rank:33.)
=================================================
Progress: 926


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 17.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:27.)
rewrite Cond1 in goal at 0(rank:33.)
=================================================
Progress: 927


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

5 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 17.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:27.)
rewrite Cond1 in goal at 0(rank:33.)
=================================================
Progress: 928


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
case lq (height (btree3)) (mainNew (zipper2))(rank:10.)
=================================================
Progress: 929


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (mainNew (zipper2))(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
=================================================
Progress: 930


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:11.)
rewrite Cond1 in goal at 0(rank:26.)
=================================================
Progress: 931


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11.)
=================================================
Progress: 932


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11.)
=================================================
Progress: 933


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 0(rank:19.)
=================================================
Progress: 934


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 0(rank:19.)
=================================================
Progress: 935


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (ZERO) (height (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
=================================================
Progress: 936


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (ZERO) (height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:10.)
=================================================
Progress: 937


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
=================================================
Progress: 938


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (mainNew (zipper2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (SUCC (height (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
rewrite <- IH3 in goal at 0
Prop: SUCC (SUCC (ZERO)) = SUCC (SUCC (SUCC (ZERO)))
Prop: SUCC (SUCC (ZERO)) = SUCC (SUCC (SUCC (ZERO)))
Prop: ZERO = SUCC (ZERO)
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (ZERO)
Prop: ZERO = SUCC (ZERO)
Prop: SUCC (SUCC (ZERO)) = SUCC (SUCC (SUCC (ZERO)))
Prop: height (Node (SUCC (ZERO)) (Empty) (Empty)) = SUCC (height (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: height (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)) (Empty))) = SUCC (height (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty)) (Empty))))
Prop: height (Empty) = SUCC (height (Empty))
Prop: SUCC (height (Empty)) = SUCC (SUCC (height (Empty)))
Prop: SUCC (height (Empty)) = SUCC (SUCC (height (Empty)))
Prop: SUCC (height (Empty)) = SUCC (SUCC (height (Empty)))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
validate generalize_common_subterm_goal
Prop: height (Empty) = mainNew (Top)
Prop: height (Empty) = mainNew (Right (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Top))
Prop: height (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Node (ZERO) (Empty) (Empty))) (Node (SUCC (ZERO)) (Empty) (Empty))) = mainNew (Right (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) (Empty)))) (Left (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Top)))
Prop: SUCC (height (Empty)) = SUCC (mainNew (Left (SUCC (ZERO)) (Empty) (Right (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Top))))
Prop: SUCC (height (Empty)) = SUCC (mainNew (Top))
Prop: SUCC (height (Node (ZERO) (Empty) (Empty))) = SUCC (mainNew (Top))
asdf
=================================================
Progress: 939


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- IH1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 2(rank:28.)
rewrite <- IH2 in goal at 0(rank:28.)
rewrite <- IH2 in goal at 1(rank:28.)
rewrite <- IH2 in goal at 2(rank:28.)
rewrite <- IH1 in goal at 1(rank:28.)
=================================================
Progress: 940


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 941


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:14.)
=================================================
Progress: 942


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
height (btree3) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
rewrite IH3 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) = SUCC (height (Empty))
Prop: height (Node (ZERO) (Empty) (Empty)) = SUCC (height (Empty))
Prop: height (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty)) (Empty))) = SUCC (height (Empty))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
rewrite IH3 in goal at 0
validate generalize_common_subterm_goal
Prop: mainNew (Top) = SUCC (height (Empty))
Prop: mainNew (Top) = SUCC (height (Empty))
Prop: mainNew (Top) = SUCC (height (Empty))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) = Empty
Prop: Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty) = Empty
Prop: Empty = Empty
Prop: SUCC (height (Empty)) = SUCC (height (Empty))
Prop: SUCC (height (Empty)) = SUCC (height (Empty))
Prop: SUCC (height (Empty)) = SUCC (height (Node (ZERO) (Empty) (Empty)))
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
validate generalize_common_subterm_goal
Prop: height (Empty) = mainNew (Top)
Prop: height (Empty) = mainNew (Top)
Prop: height (Empty) = mainNew (Top)
Lemma List
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 943


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)(rank : 0.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 944


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true -> height (Empty) = mainNew (zipper1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 945


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true -> height (Empty) = mainNew (zipper1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> ZERO = mainNew (zipper1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 946


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> ZERO = mainNew (zipper1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true -> ZERO = mainNew (Top)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 947


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true -> ZERO = mainNew (Top)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat1) (btree2) (zipper2))) = true -> ZERO = mainNew (Left (nat1) (btree2) (zipper2))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 948


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat1) (btree2) (zipper2))) = true -> ZERO = mainNew (Left (nat1) (btree2) (zipper2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
true = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 949


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
true = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (mainNew (zipper2))(rank:10.)
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
rewrite <- IH1 in goal at 2(rank:18.)
=================================================
Progress: 950


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
ZERO = SUCC (mainNew (zipper2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 951


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 952


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (btree3)) (mainNew (zipper2)) = true

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 8
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 0(rank:25.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:17.)
=================================================
Progress: 953


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (btree3)) (mainNew (zipper2)) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 954


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 7
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:16.)
rewrite <- Case2 in goal at 0(rank:16.)
rewrite <- Cond1 in goal at 0(rank:16.)
rewrite <- Cond2 in goal at 0(rank:24.)
=================================================
Progress: 955


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree2)) (height (btree3))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) (ZERO)
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = lq (height (Empty)) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Empty)) (ZERO)
validate generalize_common_subterm_goal
Prop: lq (height (repr (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Top)))) (SUCC (SUCC (SUCC (ZERO)))) = lq (height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (SUCC (SUCC (SUCC (ZERO))))
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (ZERO) = lq (height (Node (ZERO) (Empty) (Empty))) (ZERO)
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Node (ZERO) (Empty) (Empty))) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (height (Empty)) = true
Prop: lq (height (repr (Right (SUCC (SUCC (ZERO))) (Empty) (Top)))) (height (Empty)) = true
Prop: lq (height (repr (Top))) (height (Empty)) = true
asdf
Lemma List
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree2)) (height (btree3))

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 956


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree2)) (height (btree3))

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro btree1(rank:7.)
intro zipper1(rank:7.)
induction btree1(rank:16.)
induction nat1(rank:16.)
induction zipper1(rank:17.)
intro btree2(rank:7.)
=================================================
Progress: 957


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree1(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
---------------------------------------
forall (nat1:nat) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:7.)
=================================================
Progress: 958


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 959


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro zipper1(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction btree1(rank:16.)
induction nat1(rank:16.)
=================================================
Progress: 960


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
---------------------------------------
forall (nat1:nat) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:9.)
=================================================
Progress: 961


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 962


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 963


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 964


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 965


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 966


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 967


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:9.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 968


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:18.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 969


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 970


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 971


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 972


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 973


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 974


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:19.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 975


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree4)) (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 976


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 977


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 978


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:8.)
=================================================
Progress: 979


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 980


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 981


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 982


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 983


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 984


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 985


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:19.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 986


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (ZERO) = lq (height (btree1)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 987


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (ZERO) = lq (height (btree1)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 5
intro btree1(rank:7.)
intro zipper1(rank:7.)
induction btree1(rank:16.)
induction zipper1(rank:17.)
intro btree2(rank:7.)
=================================================
Progress: 988


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree1(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:7.)
=================================================
Progress: 989


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 990


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro zipper1(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 991


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:9.)
=================================================
Progress: 992


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 993


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 994


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 995


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:8.)
=================================================
Progress: 996


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 997


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 998


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:16.)
rewrite <- Cond2 in goal at 0(rank:16.)
=================================================
Progress: 999


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 1000


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1001


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 1002


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 1003


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:9.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 1004


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:11.)
=================================================
Progress: 1005


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1006


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1007


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1008


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 1009


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- Cond1 in goal at 0(rank:17.)
rewrite <- Cond2 in goal at 0(rank:17.)
=================================================
Progress: 1010


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 1011


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
rewrite <- IH2 in goal at 0
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (ZERO)))) = lq (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (SUCC (ZERO)))))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (repr (Top))) (SUCC (ZERO))
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (ZERO) = lq (height (repr (Left (ZERO) (Empty) (Top)))) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (repr (Top))) (SUCC (ZERO))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Empty)) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Empty)) (SUCC (ZERO))
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (SUCC (SUCC (SUCC (ZERO)))) = lq (height (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (SUCC (SUCC (SUCC (SUCC (ZERO)))))
asdf
=================================================
Progress: 1012


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1013


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:8.)
=================================================
Progress: 1014


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 1015


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 1016


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:9.)
=================================================
Progress: 1017


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
lq (height (repr (zipper1))) (ZERO) = lq (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 1018


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
lq (height (repr (zipper1))) (ZERO) = lq (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
nat2 : nat
IH1 : lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1019


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
nat2 : nat
IH1 : lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
nat2 : nat
IH1 : lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:16.)
rewrite <- Cond2 in goal at 0(rank:16.)
=================================================
Progress: 1020


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (ZERO) = lq (height (btree1)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 1021


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (ZERO) = lq (height (btree1)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 3
intro btree1(rank:7.)
intro btree2(rank:7.)
induction btree1(rank:16.)
=================================================
Progress: 1022


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree1(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:7.)
=================================================
Progress: 1023


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
forall (btree1:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 1024


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 1025


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 1026


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
intro btree1
intro btree2
intro Cond1
intro Cond2
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (SUCC (ZERO))
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Empty)) (ZERO)
=================================================
Progress: 1027


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
---------------------------------------
forall (btree1:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1028


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 1029


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 1030


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:16.)
rewrite <- Cond2 in goal at 0(rank:16.)
=================================================
Progress: 1031


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1032


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:8.)
=================================================
Progress: 1033


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 1034


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1035


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (btree2)) (mainNew (Top)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1036


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1037


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 1038


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- Cond1 in goal at 0(rank:17.)
rewrite <- Cond2 in goal at 0(rank:17.)
=================================================
Progress: 1039


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 1040


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree2)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
rewrite <- Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (mainNew (Top))
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (SUCC (SUCC (ZERO))) = lq (height (Node (ZERO) (Empty) (Empty))) (mainNew (Left (ZERO) (Empty) (Top)))
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (mainNew (Top))
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = true
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
=================================================
Progress: 1041


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (height (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
rewrite <- Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: lq (height (repr (Right (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
asdf
=================================================
Progress: 1042


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
nat2 : nat
IH1 : lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
nat2 : nat
IH1 : lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree2)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Right (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Top)))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Right (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Top)))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Top))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (mainNew (Top))
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: lq (height (repr (Right (SUCC (SUCC (ZERO))) (Empty) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = true
asdf
=================================================
Progress: 1043


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
nat2 : nat
IH1 : lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
nat1 : nat
nat2 : nat
IH1 : lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (height (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (ZERO) (height (Node (ZERO) (Empty) (Empty)))
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
asdf
=================================================
Progress: 1044


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1045


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (Empty)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:8.)
=================================================
Progress: 1046


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 1047


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
---------------------------------------
lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 1048


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:16.)
rewrite <- Cond2 in goal at 0(rank:16.)
=================================================
Progress: 1049


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree2)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO))))))) = lq (height (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (mainNew (Top))
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Right (ZERO) (Empty) (Top)))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Top))
previous tactics
simpl in goal
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = true
=================================================
Progress: 1050


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (height (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (ZERO) (height (Empty))
previous tactics
simpl in goal
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Left (SUCC (ZERO)) (Empty) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
asdf
=================================================
Progress: 1051


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree2)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
rewrite <- Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Node (ZERO) (Empty) (Empty))) (mainNew (Top))
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (height (Node (SUCC (ZERO)) (Empty) (Empty))) (mainNew (Top))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (mainNew (Top))
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Right (ZERO) (Empty) (Right (ZERO) (Empty) (Left (ZERO) (Empty) (Top)))))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
asdf
=================================================
Progress: 1052


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Cond1 : lq (height (btree2)) (mainNew (zipper1)) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (height (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
rewrite <- Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (ZERO) (height (Empty))
previous tactics
simpl in goal
intro btree2
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Right (ZERO) (Node (ZERO) (Empty) (Empty)) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Right (ZERO) (Empty) (Left (ZERO) (Empty) (Left (ZERO) (Empty) (Top)))))) (SUCC (ZERO)) = true
asdf
=================================================
Progress: 1053


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 1054


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1055


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Left (nat2) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat2) (btree3) (zipper2)))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:8.)
=================================================
Progress: 1056


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
---------------------------------------
forall (nat1:nat) (btree1:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:9.)
=================================================
Progress: 1057


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
---------------------------------------
forall (nat1:nat) (btree1:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (Empty)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (Empty)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1058


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (Empty)) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (Empty)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1059


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 1060


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (btree2)) = true -> lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
=================================================
Progress: 1061


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 1062


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (ZERO) = lq (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1063


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (ZERO) = lq (ZERO) (ZERO)

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (ZERO) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (SUCC (nat3)) = lq (ZERO) (SUCC (nat3))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1064


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (ZERO) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (SUCC (nat3)) = lq (ZERO) (SUCC (nat3))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (ZERO) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (height (repr (zipper2))) (nat3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 0(rank:18.)
=================================================
Progress: 1065


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 1066


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Top)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Top))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1067


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (Left (nat3) (btree3) (zipper2))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (Left (nat3) (btree3) (zipper2)))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:8.)
=================================================
Progress: 1068


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
---------------------------------------
forall (btree1:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:9.)
=================================================
Progress: 1069


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
---------------------------------------
forall (btree1:btree), lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (btree1)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (Empty)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (Empty)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1070


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (height (Empty)) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (Empty)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1071


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true->lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 1072


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
---------------------------------------
lq (ZERO) (height (btree2)) = true -> lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
rewrite <- Cond1 in goal at 0(rank:17.)
rewrite <- Cond2 in goal at 0(rank:17.)
=================================================
Progress: 1073


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 0(rank:18.)
=================================================
Progress: 1074


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
case lq (height (btree3)) (mainNew (zipper2))(rank:10.)
=================================================
Progress: 1075


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (mainNew (zipper2))(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
=================================================
Progress: 1076


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:11.)
rewrite Cond1 in goal at 0(rank:26.)
=================================================
Progress: 1077


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11.)
=================================================
Progress: 1078


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11.)
=================================================
Progress: 1079


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 1080


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 1081


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (ZERO) (height (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
=================================================
Progress: 1082


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (ZERO) (height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:10.)
=================================================
Progress: 1083


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 1084


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
case lq (height (btree3)) (mainNew (zipper2))(rank:10.)
=================================================
Progress: 1085


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (mainNew (zipper2))(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
=================================================
Progress: 1086


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:11.)
rewrite Cond1 in goal at 0(rank:26.)
=================================================
Progress: 1087


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11.)
=================================================
Progress: 1088


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11.)
=================================================
Progress: 1089


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 1090


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:21.)
=================================================
Progress: 1091


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (ZERO) (height (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
=================================================
Progress: 1092


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (ZERO) (height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:10.)
=================================================
Progress: 1093


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 1094


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
case lq (height (btree3)) (mainNew (zipper2))(rank:10.)
=================================================
Progress: 1095


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (mainNew (zipper2))(rank:11.)
rewrite Cond1 in goal at 0(rank:18.)
=================================================
Progress: 1096


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (repr (zipper2)))(rank:11.)
rewrite Cond1 in goal at 0(rank:26.)
=================================================
Progress: 1097


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11.)
=================================================
Progress: 1098


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11.)
=================================================
Progress: 1099


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 0(rank:19.)
=================================================
Progress: 1100


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (mainNew (zipper2)))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (mainNew (zipper2))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 0(rank:19.)
=================================================
Progress: 1101


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (ZERO) (height (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree3)) (height (repr (zipper2)))(rank:10.)
=================================================
Progress: 1102


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (ZERO) (height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:10.)
=================================================
Progress: 1103


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
=================================================
Progress: 1104


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (SUCC (height (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH3 in goal at 0
Prop: ZERO = SUCC (ZERO)
Prop: ZERO = SUCC (ZERO)
Prop: SUCC (ZERO) = SUCC (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (ZERO)
Prop: ZERO = SUCC (ZERO)
Prop: ZERO = SUCC (ZERO)
Prop: height (Node (SUCC (ZERO)) (Empty) (Empty)) = SUCC (height (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: height (Empty) = SUCC (height (Empty))
Prop: height (Empty) = SUCC (height (Empty))
Prop: SUCC (height (Empty)) = SUCC (SUCC (height (Empty)))
Prop: SUCC (height (Empty)) = SUCC (SUCC (height (Empty)))
Prop: SUCC (height (Empty)) = SUCC (SUCC (height (Empty)))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
validate generalize_common_subterm_goal
Prop: height (Empty) = mainNew (Top)
Prop: height (Empty) = mainNew (Left (ZERO) (Empty) (Top))
Prop: height (Empty) = mainNew (Right (ZERO) (Empty) (Top))
Prop: SUCC (height (Empty)) = SUCC (mainNew (Top))
Prop: SUCC (height (Empty)) = SUCC (mainNew (Left (ZERO) (Empty) (Top)))
Prop: SUCC (height (Node (ZERO) (Empty) (Empty))) = SUCC (mainNew (Top))
asdf
=================================================
Progress: 1105


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- IH1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 2(rank:28.)
rewrite <- IH2 in goal at 0(rank:28.)
rewrite <- IH2 in goal at 1(rank:28.)
rewrite <- IH2 in goal at 2(rank:28.)
rewrite <- IH1 in goal at 1(rank:28.)
=================================================
Progress: 1106


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 1107


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:14.)
=================================================
Progress: 1108


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
height (btree3) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
rewrite <- IH1 in goal at 0
rewrite IH3 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: height (Node (ZERO) (Empty) (Empty)) = SUCC (height (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))))
Prop: height (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) = SUCC (height (Node (ZERO) (Empty) (Empty)))
Prop: height (Empty) = SUCC (height (Empty))
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
rewrite <- IH1 in goal at 0
rewrite IH3 in goal at 0
validate generalize_common_subterm_goal
Prop: mainNew (Top) = SUCC (height (Node (ZERO) (Empty) (Empty)))
Prop: mainNew (Top) = SUCC (height (Node (ZERO) (Empty) (Empty)))
Prop: mainNew (Top) = SUCC (height (Empty))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)) = Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty)
Prop: Empty = Node (ZERO) (Empty) (Empty)
Prop: Empty = Empty
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
validate generalize_common_subterm_goal
Prop: height (Empty) = mainNew (Left (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Top))
Prop: height (Empty) = mainNew (Right (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Empty)) (Right (ZERO) (Empty) (Top)))
Prop: height (Empty) = mainNew (Top)
Prop: SUCC (height (Empty)) = SUCC (mainNew (Left (ZERO) (Empty) (Top)))
Prop: SUCC (height (Empty)) = SUCC (mainNew (Top))
Prop: SUCC (height (Empty)) = SUCC (mainNew (Top))
asdf
Lemma List
forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 1109


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree1(rank:7.)
=================================================
Progress: 1110


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree1(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
---------------------------------------
forall (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:7.)
=================================================
Progress: 1111


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
---------------------------------------
forall (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
btree2 : btree
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 1112


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
btree2 : btree
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty))) = Empty
Prop: Empty = Empty
Prop: Empty = Empty
asdf
=================================================
Progress: 1113


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1114


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree3)) (mainNew (zipper2)) = true

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 8
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 0(rank:25.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:17.)
=================================================
Progress: 1115


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree3)) (mainNew (zipper2)) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 1116


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 7
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:16.)
rewrite <- Case2 in goal at 0(rank:16.)
rewrite <- Cond1 in goal at 0(rank:16.)
rewrite <- Cond2 in goal at 0(rank:24.)
=================================================
Progress: 1117


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree4)) (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 1118


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree2)) (height (btree3))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
rewrite <- IH2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite <- Case2 in goal at 0
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (height (repr (Right (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))) (Left (ZERO) (Empty) (Top))))) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (ZERO) = lq (height (Node (ZERO) (Empty) (Empty))) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
rewrite <- IH2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) = true
Prop: lq (height (repr (Top))) (height (Empty)) = true
Prop: lq (height (repr (Top))) (height (Empty)) = true
Lemma List
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree2)) (height (btree3))

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 1119


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree2)) (height (btree3))

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction btree1(rank:16.)
induction nat1(rank:16.)
induction zipper1(rank:17.)
=================================================
Progress: 1120


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 1121


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1122


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:17.)
induction zipper1(rank:18.)
=================================================
Progress: 1123


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (ZERO) = lq (height (btree1)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 1124


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (ZERO) = lq (height (btree1)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
induction btree1(rank:16.)
induction zipper1(rank:17.)
=================================================
Progress: 1125


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 16.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1126


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (Empty)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 1127


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1128


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (height (repr (Left (nat3) (btree2) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1129


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (height (repr (Left (nat3) (btree2) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (repr (zipper2)))(rank:10.)
rewrite <- IH2 in goal at 0(rank:17.)
=================================================
Progress: 1130


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 1131


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat) (btree1:btree), lq (height (repr (Top))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1132


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat) (btree1:btree), lq (height (repr (Top))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat) (btree1:btree), lq (ZERO) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction btree1(rank:18.)
induction nat1(rank:18.)
=================================================
Progress: 1133


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (ZERO) = lq (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 1134


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (ZERO) = lq (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1135


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = lq (ZERO) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 1136


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1137


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (height (repr (Top))) (SUCC (nat2)) = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (height (repr (Left (nat3) (btree2) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1138


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (height (repr (Left (nat3) (btree2) (zipper2)))) (SUCC (nat2)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (repr (zipper2)))(rank:10.)
rewrite <- IH2 in goal at 0(rank:17.)
=================================================
Progress: 1139


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 1140


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (btree1:btree), lq (height (repr (Top))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1141


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (btree1:btree), lq (height (repr (Top))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (btree1:btree), true = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1142


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (btree1:btree), true = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
true = lq (height (Empty)) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1143


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
true = lq (height (Empty)) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (height (Node (nat3) (btree2) (btree3))) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1144


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (height (Node (nat3) (btree2) (btree3))) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH2 in goal at 0(rank:17.)
rewrite IH3 in goal at 0(rank:17.)
=================================================
Progress: 1145


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:18.)
rewrite IH3 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
=================================================
Progress: 1146


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (height (repr (zipper2)))(rank:10.)
=================================================
Progress: 1147


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:10.)
=================================================
Progress: 1148


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:10.)
=================================================
Progress: 1149


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
case lq (height (btree2)) (height (repr (zipper2)))
rewrite IH2 in goal at 0
rewrite <- Case1 in goal at 0
Prop: lq (ZERO) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (SUCC (ZERO)) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty)))) (ZERO)
validate generalize_common_subterm_goal
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (SUCC (SUCC (SUCC (ZERO)))) = lq (height (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))) (ZERO)
Prop: lq (ZERO) (SUCC (ZERO)) = lq (height (Node (ZERO) (Empty) (Empty))) (ZERO)
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Empty)) (height (repr (Top)))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (Empty)) (height (repr (Top)))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Node (ZERO) (Empty) (Empty))) (height (repr (Top)))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
case lq (height (btree2)) (height (repr (zipper2)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (ZERO) = true
asdf
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
case lq (height (btree2)) (height (repr (zipper2)))
Prop: lq (ZERO) (SUCC (ZERO)) = lq (ZERO) (SUCC (SUCC (ZERO)))
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: lq (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = lq (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))
Prop: lq (SUCC (ZERO)) (ZERO) = lq (SUCC (ZERO)) (SUCC (ZERO))
Prop: lq (SUCC (ZERO)) (ZERO) = lq (SUCC (ZERO)) (SUCC (ZERO))
=================================================
Progress: 1150


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (height (repr (zipper2)))(rank:10.)
=================================================
Progress: 1151


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2)) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:26.)
rewrite IH2 in goal at 0(rank:26.)
=================================================
Progress: 1152


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
lq (height (btree2)) (SUCC (nat2)) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (height (btree3))(rank:10.)
=================================================
Progress: 1153


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
lq (height (btree2)) (SUCC (nat2)) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:10.)
=================================================
Progress: 1154


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH3 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
=================================================
Progress: 1155


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
lq (height (btree3)) (SUCC (nat2)) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (height (btree3))(rank:10.)
=================================================
Progress: 1156


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
lq (height (btree3)) (SUCC (nat2)) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree3)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:10.)
=================================================
Progress: 1157


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree3)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
=================================================
Progress: 1158


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (SUCC (height (btree3)))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
rewrite <- IH3 in goal at 0
Prop: ZERO = SUCC (ZERO)
Prop: ZERO = SUCC (ZERO)
Prop: SUCC (ZERO) = SUCC (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = SUCC (SUCC (ZERO))
Prop: ZERO = SUCC (ZERO)
Prop: ZERO = SUCC (ZERO)
Prop: height (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) = SUCC (height (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))
Prop: height (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty))) (Empty))) = SUCC (height (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty))) (Empty))) (Empty))))
Prop: height (Empty) = SUCC (height (Empty))
Prop: SUCC (height (Empty)) = SUCC (SUCC (height (Empty)))
Prop: SUCC (height (Empty)) = SUCC (SUCC (height (Empty)))
Prop: SUCC (height (Empty)) = SUCC (SUCC (height (Empty)))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
validate generalize_common_subterm_goal
Prop: height (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) = mainNew (Left (SUCC (ZERO)) (Empty) (Top))
Prop: height (Node (ZERO) (Empty) (Empty)) = mainNew (Right (ZERO) (Empty) (Top))
Prop: height (Empty) = mainNew (Top)
=================================================
Progress: 1159


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- IH1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 2(rank:28.)
rewrite <- IH2 in goal at 0(rank:28.)
rewrite <- IH2 in goal at 1(rank:28.)
rewrite <- IH2 in goal at 2(rank:28.)
rewrite <- IH1 in goal at 1(rank:28.)
=================================================
Progress: 1160


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 1161


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:14.)
=================================================
Progress: 1162


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
height (btree3) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
rewrite IH3 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: height (Empty) = SUCC (height (Node (ZERO) (Empty) (Empty)))
Prop: height (Empty) = SUCC (height (Node (ZERO) (Empty) (Empty)))
Prop: height (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) = SUCC (height (Empty))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
rewrite IH3 in goal at 0
validate generalize_common_subterm_goal
Prop: mainNew (Left (ZERO) (Empty) (Top)) = SUCC (height (Empty))
Prop: mainNew (Top) = SUCC (height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))
Prop: mainNew (Top) = SUCC (height (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: Empty = Empty
Prop: Empty = Empty
Prop: Empty = Empty
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
validate generalize_common_subterm_goal
Prop: height (Empty) = mainNew (Top)
Prop: height (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) = mainNew (Top)
Prop: height (Empty) = mainNew (Top)
Lemma List
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 1163


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)(rank : 0.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 1164


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree1(rank:7.)
=================================================
Progress: 1165


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

---------------------------------------
forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree1(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
---------------------------------------
forall (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree2(rank:7.)
=================================================
Progress: 1166


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
---------------------------------------
forall (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
>>> intro btree2(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
btree2 : btree
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 1167


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
btree2 : btree
---------------------------------------
lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree), lq (height (btree1)) (height (btree2)) = true -> btree2 = btree1
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
btree2 = btree1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Node (ZERO) (Empty) (Empty) = Node (ZERO) (Empty) (Empty)
Prop: Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty) = Node (ZERO) (Empty) (Empty)
Prop: Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))) (Empty))) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) = Node (ZERO) (Empty) (Empty)
asdf
=================================================
Progress: 1168


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (Empty)) = true -> height (Empty) = mainNew (zipper1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1169


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (Empty)) = true -> height (Empty) = mainNew (zipper1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> ZERO = mainNew (zipper1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 1170


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> ZERO = mainNew (zipper1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> ZERO = mainNew (Top)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1171


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true -> ZERO = mainNew (Top)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat1) (btree2) (zipper2))) = true->false = true -> ZERO = mainNew (Left (nat1) (btree2) (zipper2))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1172


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat1) (btree2) (zipper2))) = true->false = true -> ZERO = mainNew (Left (nat1) (btree2) (zipper2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1173


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 1174


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat1) (btree2) (zipper2))) = true->false = true -> ZERO = mainNew (Right (nat1) (btree2) (zipper2))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1175


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat1) (btree2) (zipper2))) = true->false = true -> ZERO = mainNew (Right (nat1) (btree2) (zipper2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 1176


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
---------------------------------------
true = true->false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 1177


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Right (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
false = true -> ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat1) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (Node (nat1) (btree2) (btree3))) = true -> height (Node (nat1) (btree2) (btree3)) = mainNew (zipper1)

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 1178


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat1) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (Node (nat1) (btree2) (btree3))) = true -> height (Node (nat1) (btree2) (btree3)) = mainNew (zipper1)

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:9.)
=================================================
Progress: 1179


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->lq (mainNew (Top)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Top)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 1180


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->lq (mainNew (Top)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Top)

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat2) (btree4) (zipper2))) = true->lq (mainNew (Left (nat2) (btree4) (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Left (nat2) (btree4) (zipper2))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1181


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat2) (btree4) (zipper2))) = true->lq (mainNew (Left (nat2) (btree4) (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (Left (nat2) (btree4) (zipper2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 1182


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 1183


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 12
case lq (height (btree2)) (height (btree3))(rank:9.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 1(rank:18.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH3 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 2(rank:18.)
rewrite IH3 in goal at 0(rank:26.)
rewrite <- IH3 in goal at 1(rank:26.)
rewrite <- IH3 in goal at 2(rank:26.)
case lq (height (btree4)) (mainNew (zipper2))(rank:9.)
=================================================
Progress: 1184


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 11
case lq (height (btree4)) (mainNew (zipper2))(rank:10.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 1(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 1(rank:19.)
rewrite <- IH2 in goal at 2(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 2(rank:19.)
rewrite IH3 in goal at 0(rank:27.)
rewrite <- IH3 in goal at 1(rank:27.)
rewrite <- IH3 in goal at 2(rank:27.)
=================================================
Progress: 1185


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH3 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:19.)
=================================================
Progress: 1186


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 1187


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite IH3 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 1188


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1189


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (btree3)) (mainNew (zipper2)) = true

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 8
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:17.)
rewrite <- Cond2 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:17.)
=================================================
Progress: 1190


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (btree3)) (mainNew (zipper2)) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 1191


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (mainNew (zipper2)) (height (btree3)) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 7
Tactic List : 8
rewrite Cond2 in goal at 0(rank:16.)
rewrite <- Case2 in goal at 0(rank:16.)
rewrite <- Cond2 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:26.)
rewrite <- Cond1 in goal at 0(rank:16.)
rewrite <- Case1 in goal at 0(rank:16.)
=================================================
Progress: 1192


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (mainNew (zipper2)) (height (btree3)) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 1193


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 46
Tactic List : 1
rewrite IH3 in goal at 0(rank:9.)
=================================================
Progress: 1194


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1195


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (mainNew (zipper2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- IH1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 2(rank:28.)
rewrite <- IH2 in goal at 0(rank:28.)
rewrite <- IH2 in goal at 1(rank:28.)
rewrite <- IH2 in goal at 2(rank:28.)
rewrite <- IH1 in goal at 1(rank:28.)
=================================================
Progress: 1196


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:12.)
=================================================
Progress: 1197


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:14.)
=================================================
Progress: 1198


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
height (btree3) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
rewrite <- IH1 in goal at 0
rewrite IH3 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: height (Empty) = SUCC (height (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty)) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))))
Prop: height (Empty) = SUCC (height (Empty))
Prop: height (Empty) = SUCC (height (Empty))
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
rewrite <- IH1 in goal at 0
rewrite IH3 in goal at 0
validate generalize_common_subterm_goal
Prop: mainNew (Top) = SUCC (height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))))
Prop: mainNew (Left (ZERO) (Empty) (Top)) = SUCC (height (Empty))
Prop: mainNew (Top) = SUCC (height (Empty))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Empty)) (Empty))) (Empty)) (Empty))) = Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)
Prop: Node (ZERO) (Empty) (Empty) = Empty
Prop: Empty = Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))
Prop: SUCC (height (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Node (ZERO) (Empty) (Empty)))) = SUCC (height (Empty))
Prop: SUCC (height (Empty)) = SUCC (height (Empty))
Prop: SUCC (height (Empty)) = SUCC (height (Empty))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree4)) (mainNew (zipper2))
case lq (height (btree2)) (height (btree3))
validate generalize_common_subterm_goal
Prop: height (Empty) = mainNew (Top)
Prop: height (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) = mainNew (Top)
Prop: height (Empty) = mainNew (Right (ZERO) (Empty) (Right (ZERO) (Empty) (Top)))
=================================================
Progress: 1199


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1200


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree3)) (mainNew (zipper2)) = true

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 8
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:17.)
rewrite <- Cond2 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:17.)
=================================================
Progress: 1201


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree3)) (mainNew (zipper2)) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 1202


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (mainNew (zipper2)) (height (btree3)) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 7
Tactic List : 8
rewrite Cond2 in goal at 0(rank:16.)
rewrite <- Case2 in goal at 0(rank:16.)
rewrite <- Cond2 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:26.)
rewrite <- Cond1 in goal at 0(rank:16.)
rewrite <- Case1 in goal at 0(rank:16.)
=================================================
Progress: 1203


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (mainNew (zipper2)) (height (btree3)) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 1204


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 14
Tactic List : 4
rewrite IH3 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:17.)
rewrite <- IH2 in goal at 0(rank:17.)
rewrite <- IH3 in goal at 0(rank:17.)
=================================================
Progress: 1205


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (mainNew (zipper2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 2(rank:27.)
rewrite <- IH2 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 1(rank:27.)
rewrite <- IH2 in goal at 2(rank:27.)
rewrite <- IH1 in goal at 1(rank:27.)
=================================================
Progress: 1206


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (mainNew (zipper2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 1207


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree2))

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
lq (height (btree2)) (mainNew (zipper2)) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 7
rewrite Cond1 in goal at 0(rank:16.)
rewrite <- Cond1 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 0(rank:16.)
rewrite <- Case1 in goal at 0(rank:16.)
=================================================
Progress: 1208


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
lq (height (btree2)) (mainNew (zipper2)) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 1209


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
lq (mainNew (zipper2)) (height (btree2)) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 6
Tactic List : 7
rewrite Cond2 in goal at 0(rank:15.)
rewrite <- Cond1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:17.)
rewrite <- IH2 in goal at 0(rank:17.)
rewrite <- IH3 in goal at 0(rank:25.)
rewrite <- Cond2 in goal at 0(rank:15.)
rewrite <- Case1 in goal at 0(rank:15.)
=================================================
Progress: 1210


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
lq (mainNew (zipper2)) (height (btree2)) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 15.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 1211


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (mainNew (zipper2)) = true
Cond2 : lq (mainNew (zipper2)) (height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree4))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 29
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:7.)
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 1212


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 7.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = false
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:9.)
=================================================
Progress: 1213


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = false
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 9.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = false
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1214


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree4))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (height (btree4)) = true
Cond2 : lq (height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 1215


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:11.)
rewrite IH3 in goal at 0(rank:28.)
case lq (height (btree4)) (height (btree2))(rank:11.)
=================================================
Progress: 1216


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree2))(rank:12.)
rewrite IH3 in goal at 0(rank:29.)
=================================================
Progress: 1217


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:21.)
=================================================
Progress: 1218


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1219


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:13.)
=================================================
Progress: 1220


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1221


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (mainNew (zipper2)) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Cond2 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:13.)
=================================================
Progress: 1222


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 1223


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (mainNew (zipper2)) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Cond2 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (mainNew (zipper2)) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Cond2 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree3))

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 1224


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:11.)
rewrite IH3 in goal at 0(rank:28.)
case lq (height (btree4)) (height (btree3))(rank:11.)
=================================================
Progress: 1225


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:29.)
=================================================
Progress: 1226


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:21.)
=================================================
Progress: 1227


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 1228


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 1229


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:24.)
=================================================
Progress: 1230


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:24.)
=================================================
Progress: 1231


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:11.)
rewrite IH3 in goal at 0(rank:28.)
case lq (height (btree4)) (height (btree3))(rank:11.)
=================================================
Progress: 1232


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:29.)
=================================================
Progress: 1233


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:21.)
=================================================
Progress: 1234


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 1235


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 1236


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:24.)
=================================================
Progress: 1237


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:24.)
=================================================
Progress: 1238


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:11.)
rewrite IH3 in goal at 0(rank:28.)
case lq (height (btree4)) (height (btree2))(rank:11.)
=================================================
Progress: 1239


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree2))(rank:12.)
rewrite IH3 in goal at 0(rank:29.)
=================================================
Progress: 1240


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:21.)
=================================================
Progress: 1241


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1242


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:13.)
=================================================
Progress: 1243


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true->lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Cond2 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1244


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (mainNew (zipper2)) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Cond2 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:13.)
=================================================
Progress: 1245


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree3))) = true->lq (SUCC (height (btree3))) (mainNew (zipper2)) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Cond2 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 1246


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (mainNew (zipper2)) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Cond2 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (height (btree1)) = true->lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree2)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (repr (zipper1))) (height (btree3)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (height (repr (zipper2))) (SUCC (height (btree2))) = true->lq (SUCC (height (btree2))) (mainNew (zipper2)) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Cond2 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree3))

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 1247


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:11.)
rewrite IH3 in goal at 0(rank:28.)
case lq (height (btree4)) (height (btree2))(rank:11.)
=================================================
Progress: 1248


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree2))(rank:12.)
rewrite IH3 in goal at 0(rank:29.)
=================================================
Progress: 1249


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:21.)
=================================================
Progress: 1250


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1251


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:13.)
=================================================
Progress: 1252


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1253


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:13.)
=================================================
Progress: 1254


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 1255


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree3))

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 1256


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:11.)
rewrite IH3 in goal at 0(rank:28.)
case lq (height (btree4)) (height (btree3))(rank:11.)
=================================================
Progress: 1257


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:29.)
=================================================
Progress: 1258


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:21.)
=================================================
Progress: 1259


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 1260


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 1261


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:24.)
=================================================
Progress: 1262


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:24.)
=================================================
Progress: 1263


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:11.)
rewrite IH3 in goal at 0(rank:28.)
case lq (height (btree4)) (height (btree3))(rank:11.)
=================================================
Progress: 1264


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:29.)
=================================================
Progress: 1265


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:21.)
=================================================
Progress: 1266


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 1267


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 1268


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:24.)
=================================================
Progress: 1269


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:24.)
=================================================
Progress: 1270


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:11.)
rewrite IH3 in goal at 0(rank:28.)
case lq (height (btree4)) (height (btree2))(rank:11.)
=================================================
Progress: 1271


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree2))(rank:12.)
rewrite IH3 in goal at 0(rank:29.)
=================================================
Progress: 1272


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:21.)
=================================================
Progress: 1273


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1274


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:13.)
=================================================
Progress: 1275


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1276


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:13.)
=================================================
Progress: 1277


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 1278


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree3))

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 1279


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:11.)
rewrite IH3 in goal at 0(rank:28.)
case lq (height (btree4)) (height (btree2))(rank:11.)
=================================================
Progress: 1280


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree2))(rank:12.)
rewrite IH3 in goal at 0(rank:29.)
=================================================
Progress: 1281


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:21.)
=================================================
Progress: 1282


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1283


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:13.)
=================================================
Progress: 1284


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1285


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:13.)
=================================================
Progress: 1286


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 1287


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree3))

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 1288


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:11.)
rewrite IH3 in goal at 0(rank:28.)
case lq (height (btree4)) (height (btree3))(rank:11.)
=================================================
Progress: 1289


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:29.)
=================================================
Progress: 1290


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:21.)
=================================================
Progress: 1291


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 1292


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 1293


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:24.)
=================================================
Progress: 1294


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:24.)
=================================================
Progress: 1295


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:11.)
rewrite IH3 in goal at 0(rank:28.)
case lq (height (btree4)) (height (btree3))(rank:11.)
=================================================
Progress: 1296


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:29.)
=================================================
Progress: 1297


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:21.)
=================================================
Progress: 1298


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree3)) then height (btree2) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 1299


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree2))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 1300


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:24.)
=================================================
Progress: 1301


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree2))

7 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree3)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:24.)
=================================================
Progress: 1302


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (mainNew (zipper2)) then height (btree3) else height (btree4))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:11.)
rewrite IH3 in goal at 0(rank:28.)
case lq (height (btree4)) (height (btree2))(rank:11.)
=================================================
Progress: 1303


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree2))(rank:12.)
rewrite IH3 in goal at 0(rank:29.)
=================================================
Progress: 1304


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

5 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite IH3 in goal at 0(rank:21.)
=================================================
Progress: 1305


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (if lq (height (btree4)) (height (btree2)) then height (btree3) else height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree2))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1306


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:13.)
=================================================
Progress: 1307


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) = true -> SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
---------------------------------------
SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1308


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree3))

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH3 in goal at 0(rank:13.)
=================================================
Progress: 1309


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
SUCC (height (btree3)) = SUCC (height (btree4))

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (btree2)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree4))

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 1310


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
SUCC (height (btree2)) = SUCC (height (btree3))

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (mainNew (zipper1)) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree2))) (mainNew (zipper2)) = true->lq (mainNew (zipper2)) (SUCC (height (btree2))) = true -> SUCC (height (btree2)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : lq (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) (height (btree2)) = true
Case1 : lq (height (btree4)) (height (btree2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = false
---------------------------------------
mainNew (zipper2) = SUCC (height (btree3))

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 1311


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
mainNew (zipper2) = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (mainNew (zipper2))(rank:11.)
=================================================
Progress: 1312


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
mainNew (zipper2) = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (mainNew (zipper2))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 1(rank:28.)
rewrite <- IH1 in goal at 2(rank:28.)
=================================================
Progress: 1313


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (ZERO) then ZERO else height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1314


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (ZERO) then ZERO else height (btree2))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 1315


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite <- IH1 in goal at 0
simpl in goal
rewrite IH1 in goal at 0
parent
mainNew (zipper2)
lower
mainNew(_)
upper
_
remove upper
ZERO()
remove lower
ZERO()
remove upper
mainNew(zipper2)
remove lower
mainNew(_)
remove upper
SUCC(_)
parent
height (btree2)
lower
height(_)
upper
SUCC(_)
remove upper
height(btree2)
remove lower
height(btree2)
remove upper
height(btree2)
remove lower
height(btree2)
remove upper
height(btree2)
remove lower
height(btree2)
validate generalize_common_subterm_goal
Prop: mainNew (Top) = SUCC (height (Node (ZERO) (Empty) (Empty)))
Prop: mainNew (Top) = SUCC (height (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)))
Prop: mainNew (Top) = SUCC (height (Empty))
asdf
previous tactics
simpl in goal
intro Cond1
rewrite <- IH1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (height (Empty))
Prop: ZERO = SUCC (height (Empty))
Prop: ZERO = SUCC (height (Empty))
asdf
=================================================
Progress: 1316


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (ZERO) then mainNew (zipper2) else height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (if lq (height (Node (ZERO) (Empty) (Empty))) (ZERO) then mainNew (Top) else height (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = SUCC (if lq (height (Empty)) (ZERO) then mainNew (Top) else height (Empty))
Prop: ZERO = SUCC (if lq (height (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty)))) (ZERO) then mainNew (Top) else height (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))
asdf
previous tactics
simpl in goal
intro Cond1
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (if lq (height (Empty)) (mainNew (Top)) then mainNew (Top) else height (Empty))
Prop: ZERO = SUCC (if lq (height (Empty)) (mainNew (Top)) then mainNew (Top) else height (Empty))
Prop: ZERO = SUCC (if lq (height (Empty)) (mainNew (Top)) then mainNew (Top) else height (Empty))
asdf
=================================================
Progress: 1317


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then ZERO else height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (mainNew (zipper2))(rank:11.)
=================================================
Progress: 1318


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then ZERO else height (btree2))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
ZERO = SUCC (ZERO)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:28.)
rewrite IH1 in goal at 1(rank:28.)
rewrite IH1 in goal at 2(rank:28.)
=================================================
Progress: 1319


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (repr (Top))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1320


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (height (repr (Top))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (repr (Left (nat2) (btree2) (zipper2)))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1321


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (height (repr (Left (nat2) (btree2) (zipper2)))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (repr (zipper2)))(rank:10.)
rewrite <- IH1 in goal at 0(rank:17.)
=================================================
Progress: 1322


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (ZERO) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:18.)
induction nat1(rank:19.)
=================================================
Progress: 1323


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (nat1) = lq (ZERO) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (nat1) = lq (height (repr (zipper2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (height (repr (zipper2)))(rank:10.)
=================================================
Progress: 1324


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (nat1) = lq (height (repr (zipper2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (repr (zipper2))) (nat1) = lq (ZERO) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (height (repr (zipper2))) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:19.)
rewrite IH1 in goal at 0(rank:26.)
=================================================
Progress: 1325


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (height (btree2)) (height (repr (zipper2)))
rewrite <- Case1 in goal at 0
Prop: lq (ZERO) (SUCC (ZERO)) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty)))) (ZERO)
Prop: lq (ZERO) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (ZERO)
validate generalize_common_subterm_goal
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (SUCC (ZERO)) (ZERO) = lq (height (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))) (SUCC (ZERO))
Prop: lq (SUCC (ZERO)) (ZERO) = lq (height (Empty)) (SUCC (ZERO))
previous tactics
simpl in goal
case lq (height (btree2)) (height (repr (zipper2)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
asdf
=================================================
Progress: 1326


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (height (btree2)) (height (repr (zipper2)))
rewrite <- IH2 in goal at 0
Prop: lq (ZERO) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = lq (ZERO) (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO))))))
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = lq (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO))))
validate generalize_common_subterm_goal
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (SUCC (ZERO)) (ZERO) = lq (SUCC (ZERO)) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (height (repr (Top))) (SUCC (SUCC (ZERO)))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (repr (Top))) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (repr (Top))) (SUCC (ZERO))
asdf
previous tactics
simpl in goal
case lq (height (btree2)) (height (repr (zipper2)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (SUCC (SUCC (ZERO)))) = true
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = true
Prop: lq (height (repr (Top))) (ZERO) = true
asdf
=================================================
Progress: 1327


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat) (btree1:btree), lq (ZERO) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = lq (height (Empty)) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1328


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = lq (height (Empty)) (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = lq (height (Node (nat2) (btree2) (btree3))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1329


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = lq (height (Node (nat2) (btree2) (btree3))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite <- IH1 in goal at 0(rank:17.)
rewrite IH1 in goal at 0(rank:17.)
rewrite IH2 in goal at 0(rank:17.)
=================================================
Progress: 1330


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = lq (SUCC (height (btree3))) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
induction nat1(rank:19.)
rewrite IH2 in goal at 0(rank:18.)
=================================================
Progress: 1331


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (nat1) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite <- IH1 in goal at 2(rank:17.)
=================================================
Progress: 1332


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (nat1) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (nat1) = lq (SUCC (height (btree3))) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:19.)
rewrite <- IH1 in goal at 0(rank:26.)
=================================================
Progress: 1333


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (btree3)) (nat1) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite <- IH1 in goal at 0(rank:17.)
=================================================
Progress: 1334


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (btree3)) (nat1) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
forall (nat1:nat), lq (height (btree3)) (nat1) = lq (SUCC (height (btree3))) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:19.)
rewrite <- IH2 in goal at 0(rank:26.)
=================================================
Progress: 1335


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = lq (SUCC (if lq (ZERO) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (ZERO) (height (btree3))(rank:10.)
rewrite IH2 in goal at 0(rank:25.)
rewrite IH2 in goal at 2(rank:25.)
=================================================
Progress: 1336


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = lq (SUCC (if lq (ZERO) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (height (btree3))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (height (btree3)) = true
---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = lq (SUCC (height (btree3))) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
induction nat1(rank:19.)
rewrite IH2 in goal at 0(rank:18.)
=================================================
Progress: 1337


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (nat1) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (nat1) = lq (SUCC (if lq (ZERO) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (ZERO) (height (btree3))(rank:10.)
rewrite IH2 in goal at 0(rank:25.)
=================================================
Progress: 1338


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (nat1) = lq (SUCC (if lq (ZERO) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (height (btree3))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (height (btree3)) = true
---------------------------------------
forall (nat1:nat), lq (height (btree2)) (nat1) = lq (SUCC (height (btree3))) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:19.)
rewrite <- IH1 in goal at 0(rank:26.)
=================================================
Progress: 1339


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (btree3)) (nat1) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (btree3)) (nat1) = lq (SUCC (if lq (ZERO) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (height (btree3))(rank:10.)
=================================================
Progress: 1340


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat), lq (height (btree3)) (nat1) = lq (SUCC (if lq (ZERO) (height (btree3)) then height (btree3) else height (btree2))) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (height (btree3))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree2)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (nat1) = lq (height (btree3)) (nat1)
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Case1 : lq (ZERO) (height (btree3)) = true
---------------------------------------
forall (nat1:nat), lq (height (btree3)) (nat1) = lq (SUCC (height (btree3))) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:19.)
rewrite <- IH2 in goal at 0(rank:26.)
=================================================
Progress: 1341


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
forall (nat1:nat) (btree1:btree), lq (ZERO) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), lq (ZERO) (ZERO) = lq (height (btree1)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1342


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (btree1:btree), lq (ZERO) (ZERO) = lq (height (btree1)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), lq (ZERO) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1343


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), lq (ZERO) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), true = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1344


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree), true = lq (height (btree1)) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
true = lq (height (Empty)) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1345


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
true = lq (height (Empty)) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (height (Node (nat3) (btree2) (btree3))) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1346


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (height (Node (nat3) (btree2) (btree3))) (SUCC (nat2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:10.)
rewrite IH2 in goal at 0(rank:17.)
rewrite IH3 in goal at 0(rank:17.)
=================================================
Progress: 1347


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:18.)
rewrite IH3 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 1348


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
lq (height (btree2)) (SUCC (nat2)) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (height (btree3))(rank:10.)
=================================================
Progress: 1349


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
lq (height (btree2)) (SUCC (nat2)) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 0(rank:26.)
=================================================
Progress: 1350


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
true = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 17.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
lq (height (btree3)) (SUCC (nat2)) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (height (btree3))(rank:10.)
=================================================
Progress: 1351


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
---------------------------------------
lq (height (btree3)) (SUCC (nat2)) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (nat2)

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
Base1 : zipper1 = Top
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree), lq (ZERO) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree3)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH3 in goal at 0(rank:26.)
=================================================
Progress: 1352


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (ZERO) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 0(rank:26.)
=================================================
Progress: 1353


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (height (btree2)) (height (repr (zipper2)))
rewrite <- Case1 in goal at 0
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO) = lq (height (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty)))) (SUCC (SUCC (SUCC (SUCC (ZERO)))))
Prop: lq (SUCC (ZERO)) (ZERO) = lq (height (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty))) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (SUCC (SUCC (SUCC (ZERO)))) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
previous tactics
simpl in goal
case lq (height (btree2)) (height (repr (zipper2)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Top)))) (ZERO) = true
Prop: lq (height (repr (Right (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Left (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))))) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Empty)))) (Top))))) (ZERO) = true
asdf
=================================================
Progress: 1354


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
nat2 : nat
IH1 : forall (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (ZERO) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree2 : btree
zipper2 : zipper
IH2 : lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree2) (zipper2)
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (height (btree2)) (height (repr (zipper2)))
rewrite <- IH2 in goal at 0
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (ZERO) (SUCC (ZERO)) = lq (ZERO) (SUCC (SUCC (ZERO)))
Prop: lq (ZERO) (SUCC (ZERO)) = lq (ZERO) (SUCC (SUCC (ZERO)))
validate generalize_common_subterm_goal
Prop: lq (ZERO) (SUCC (SUCC (ZERO))) = lq (ZERO) (SUCC (SUCC (SUCC (ZERO))))
Prop: lq (ZERO) (SUCC (SUCC (ZERO))) = lq (ZERO) (SUCC (SUCC (SUCC (ZERO))))
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (repr (Top))) (SUCC (ZERO))
Prop: lq (height (repr (Right (SUCC (ZERO)) (Empty) (Top)))) (ZERO) = lq (height (repr (Right (SUCC (ZERO)) (Empty) (Top)))) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (repr (Top))) (SUCC (ZERO))
asdf
previous tactics
simpl in goal
case lq (height (btree2)) (height (repr (zipper2)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Top))) (ZERO) = true
asdf
=================================================
Progress: 1355


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (height (btree2)) (height (btree3))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (SUCC (ZERO)) = lq (height (Empty)) (ZERO)
Prop: lq (height (Empty)) (SUCC (ZERO)) = lq (height (Empty)) (ZERO)
Prop: lq (height (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (SUCC (ZERO)) = lq (height (Empty)) (ZERO)
previous tactics
simpl in goal
case lq (height (btree2)) (height (btree3))
validate generalize_common_subterm_goal
Prop: true = lq (height (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty))) (ZERO)
Prop: true = lq (height (Empty)) (ZERO)
Prop: true = lq (height (Empty)) (SUCC (SUCC (SUCC (ZERO))))
asdf
Lemma List
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1356


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1357


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)

---------------------------------------
forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (height (Empty)) (height (btree2)) = true -> lq (height (Empty)) (SUCC (nat1)) = lq (height (btree2)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1358


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (height (Empty)) (height (btree2)) = true -> lq (height (Empty)) (SUCC (nat1)) = lq (height (btree2)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (ZERO) (height (btree2)) = true -> true = lq (height (btree2)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree2(rank:11.)
=================================================
Progress: 1359


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (nat1:nat), lq (ZERO) (height (btree2)) = true -> true = lq (height (btree2)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree2(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (Empty)) = true -> true = lq (height (Empty)) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 1360


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (Empty)) = true -> true = lq (height (Empty)) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat2 : nat
btree3 : btree
btree4 : btree
IH1 : forall (nat1:nat), lq (ZERO) (height (btree3)) = true -> true = lq (height (btree3)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (height (btree4)) = true -> true = lq (height (btree4)) (nat1)
Inductive1 : btree2 = Node (nat2) (btree3) (btree4)
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (Node (nat2) (btree3) (btree4))) = true -> true = lq (height (Node (nat2) (btree3) (btree4))) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1361


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat2 : nat
btree3 : btree
btree4 : btree
IH1 : forall (nat1:nat), lq (ZERO) (height (btree3)) = true -> true = lq (height (btree3)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (height (btree4)) = true -> true = lq (height (btree4)) (nat1)
Inductive1 : btree2 = Node (nat2) (btree3) (btree4)
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (Node (nat2) (btree3) (btree4))) = true -> true = lq (height (Node (nat2) (btree3) (btree4))) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat2 : nat
btree3 : btree
btree4 : btree
IH1 : forall (nat1:nat), lq (ZERO) (height (btree3)) = true -> true = lq (height (btree3)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (height (btree4)) = true -> true = lq (height (btree4)) (nat1)
Inductive1 : btree2 = Node (nat2) (btree3) (btree4)
---------------------------------------
forall (nat1:nat), true = true -> true = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1362


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat2 : nat
btree3 : btree
btree4 : btree
IH1 : forall (nat1:nat), lq (ZERO) (height (btree3)) = true -> true = lq (height (btree3)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (height (btree4)) = true -> true = lq (height (btree4)) (nat1)
Inductive1 : btree2 = Node (nat2) (btree3) (btree4)
---------------------------------------
forall (nat1:nat), true = true -> true = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat2 : nat
btree3 : btree
btree4 : btree
IH1 : forall (nat1:nat), lq (ZERO) (height (btree3)) = true -> true = lq (height (btree3)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (height (btree4)) = true -> true = lq (height (btree4)) (nat1)
Inductive1 : btree2 = Node (nat2) (btree3) (btree4)
Cond1 : true = true
---------------------------------------
forall (nat1:nat), true = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree3)) (height (btree4))(rank:11.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 1363


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat2 : nat
btree3 : btree
btree4 : btree
IH1 : forall (nat1:nat), lq (ZERO) (height (btree3)) = true -> true = lq (height (btree3)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (height (btree4)) = true -> true = lq (height (btree4)) (nat1)
Inductive1 : btree2 = Node (nat2) (btree3) (btree4)
Cond1 : true = true
---------------------------------------
forall (nat1:nat), true = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree3)) (height (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (nat1:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (SUCC (nat1)) = lq (height (btree2)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat2 : nat
btree3 : btree
btree4 : btree
IH1 : forall (nat1:nat), lq (ZERO) (height (btree3)) = true -> true = lq (height (btree3)) (nat1)
IH2 : forall (nat1:nat), lq (ZERO) (height (btree4)) = true -> true = lq (height (btree4)) (nat1)
Inductive1 : btree2 = Node (nat2) (btree3) (btree4)
Cond1 : true = true
Case1 : lq (height (btree3)) (height (btree4)) = true
---------------------------------------
forall (nat1:nat), true = lq (SUCC (height (btree4))) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:19.)
induction nat1(rank:20.)
=================================================
Progress: 1364


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree3)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (height (btree2)) (height (btree3))
rewrite IH3 in goal at 0
Prop: lq (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = lq (SUCC (SUCC (ZERO))) (ZERO)
Prop: lq (ZERO) (SUCC (SUCC (ZERO))) = lq (ZERO) (SUCC (ZERO))
Prop: lq (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) = lq (SUCC (SUCC (ZERO))) (SUCC (ZERO))
previous tactics
simpl in goal
case lq (height (btree2)) (height (btree3))
validate generalize_common_subterm_goal
Prop: true = lq (height (Node (ZERO) (Empty) (Empty))) (ZERO)
Prop: true = lq (height (Empty)) (ZERO)
Prop: true = lq (height (Empty)) (ZERO)
asdf
Lemma List
forall (nat1:nat) (nat2:nat), lq (nat1) (SUCC (nat2)) = lq (nat1) (nat2)
End of Lemma List


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree3)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1365


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree3)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat), lq (nat1) (SUCC (nat2)) = lq (nat1) (nat2)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (SUCC (nat2)) = lq (nat1) (nat2)

---------------------------------------
forall (nat1:nat) (nat2:nat), lq (nat1) (SUCC (nat2)) = lq (nat1) (nat2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction nat1(rank:18.)
induction nat2(rank:18.)
=================================================
Progress: 1366


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (height (btree3)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (height (btree2)) (height (btree3))
rewrite <- Case1 in goal at 0
Prop: lq (height (Empty)) (SUCC (ZERO)) = lq (SUCC (ZERO)) (SUCC (ZERO))
Prop: lq (height (Empty)) (SUCC (ZERO)) = lq (SUCC (ZERO)) (ZERO)
Prop: lq (height (Empty)) (ZERO) = lq (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: lq (height (Empty)) (ZERO) = lq (ZERO) (ZERO)
Prop: lq (height (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (ZERO) = lq (ZERO) (ZERO)
Prop: lq (height (Node (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Empty) (Empty))) (SUCC (SUCC (SUCC (ZERO)))) = lq (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
previous tactics
simpl in goal
case lq (height (btree2)) (height (btree3))
validate generalize_common_subterm_goal
Prop: true = lq (height (Empty)) (ZERO)
Prop: true = lq (height (Empty)) (ZERO)
Prop: true = lq (height (Node (ZERO) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Empty)) (Node (ZERO) (Empty) (Empty))))) (Empty))) (ZERO)
asdf
Lemma List
forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)
End of Lemma List


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (height (btree3)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1367


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (height (btree3)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
intro btree1(rank:9.)
induction btree1(rank:18.)
induction nat1(rank:18.)
induction nat2(rank:18.)
intro btree2(rank:9.)
=================================================
Progress: 1368


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)
btree1 : btree
---------------------------------------
forall (nat1:nat) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree2(rank:9.)
=================================================
Progress: 1369


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)

---------------------------------------
forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree2(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)
btree2 : btree
---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1370


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)
btree1 : btree
---------------------------------------
forall (nat1:nat) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree2(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1371


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)
btree1 : btree
btree2 : btree
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)
btree1 : btree
btree2 : btree
Cond1 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (height (btree1)) (nat1) = lq (nat1) (nat2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction nat1(rank:18.)
induction nat2(rank:18.)
=================================================
Progress: 1372


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)
btree2 : btree
---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (height (Empty)) (height (btree2)) = true -> lq (height (Empty)) (nat1) = lq (nat1) (nat2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1373


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (height (Empty)) (height (btree2)) = true -> lq (height (Empty)) (nat1) = lq (nat1) (nat2)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (ZERO) (height (btree2)) = true -> lq (ZERO) (nat1) = lq (nat1) (nat2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1374


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (ZERO) (height (btree2)) = true -> lq (ZERO) (nat1) = lq (nat1) (nat2)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (nat2:nat), lq (height (btree1)) (height (btree2)) = true -> lq (height (btree1)) (nat1) = lq (nat1) (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (ZERO) (height (btree2)) = true
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (ZERO) (nat1) = lq (nat1) (nat2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction nat1(rank:19.)
induction nat2(rank:19.)
=================================================
Progress: 1375


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))

---------------------------------------
forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), lq (ZERO) (nat2) = lq (ZERO) (SUCC (nat2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1376


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), lq (ZERO) (nat2) = lq (ZERO) (SUCC (nat2))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), lq (ZERO) (nat2) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:11.)
=================================================
Progress: 1377


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), lq (ZERO) (nat2) = true

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
lq (ZERO) (ZERO) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1378


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
lq (ZERO) (ZERO) = true

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1379


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))

---------------------------------------
forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), lq (nat1) (ZERO) = lq (nat1) (SUCC (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1380


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), lq (nat1) (ZERO) = lq (nat1) (SUCC (ZERO))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), false = lq (nat1) (SUCC (ZERO))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 1381


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), false = lq (nat1) (SUCC (ZERO))

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
false = lq (ZERO) (SUCC (ZERO))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1382


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
false = lq (ZERO) (SUCC (ZERO))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1383


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat) (zipper1:zipper), lq (height (Empty)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (Empty)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1384


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat) (zipper1:zipper), lq (height (Empty)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (Empty)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat) (zipper1:zipper), lq (ZERO) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro zipper1(rank:10.)
=================================================
Progress: 1385


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat) (zipper1:zipper), lq (ZERO) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (ZERO) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1386


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (ZERO) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Cond1 : lq (ZERO) (height (repr (zipper1))) = true
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction nat1(rank:19.)
induction nat2(rank:19.)
=================================================
Progress: 1387


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (ZERO) (nat2) = lq (height (btree1)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1388


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (ZERO) (nat2) = lq (height (btree1)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (ZERO) (nat2) = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro btree1(rank:10.)
=================================================
Progress: 1389


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (ZERO) (nat2) = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
---------------------------------------
forall (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (ZERO) (nat2) = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro zipper1(rank:10.)
=================================================
Progress: 1390


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
---------------------------------------
forall (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (ZERO) (nat2) = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat2:nat), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (ZERO) (nat2) = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1391


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat2:nat), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (ZERO) (nat2) = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
---------------------------------------
forall (nat2:nat), lq (ZERO) (nat2) = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:11.)
=================================================
Progress: 1392


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
---------------------------------------
forall (nat2:nat), lq (ZERO) (nat2) = false

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
lq (ZERO) (ZERO) = false

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1393


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
lq (ZERO) (ZERO) = false

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat2 : nat
nat3 : nat
IH1 : lq (ZERO) (nat3) = false
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
lq (ZERO) (SUCC (nat3)) = false

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1394


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat2 : nat
nat3 : nat
IH1 : lq (ZERO) (nat3) = false
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
lq (ZERO) (SUCC (nat3)) = false

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat2 : nat
nat3 : nat
IH1 : lq (ZERO) (nat3) = false
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 0(rank:26.)
=================================================
Progress: 1395


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (ZERO) = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1396


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (ZERO) = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> false = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro btree1(rank:10.)
intro zipper1(rank:10.)
induction btree1(rank:19.)
induction nat1(rank:19.)
=================================================
Progress: 1397


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> false = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> false = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro zipper1(rank:10.)
=================================================
Progress: 1398


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> false = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (btree1:btree), lq (height (btree1)) (height (repr (zipper1))) = true -> false = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:11.)
=================================================
Progress: 1399


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> false = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro zipper1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (height (repr (zipper1))) = true -> false = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1400


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (height (btree1)) (height (repr (zipper1))) = true -> false = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
---------------------------------------
forall (nat1:nat), false = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 1401


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (btree1:btree), lq (height (btree1)) (height (repr (zipper1))) = true -> false = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
zipper1 : zipper
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (Empty)) (height (repr (zipper1))) = true -> false = lq (height (Empty)) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1402


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
---------------------------------------
forall (nat1:nat), false = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
false = lq (height (btree1)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1403


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
false = lq (height (btree1)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
nat3 : nat
IH1 : false = lq (height (btree1)) (nat3)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
false = lq (height (btree1)) (SUCC (nat3))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH1 in goal at 0(rank:10.)
=================================================
Progress: 1404


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
nat3 : nat
IH1 : false = lq (height (btree1)) (nat3)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
false = lq (height (btree1)) (SUCC (nat3))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
nat3 : nat
IH1 : false = lq (height (btree1)) (nat3)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
lq (height (btree1)) (nat3) = lq (height (btree1)) (SUCC (nat3))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
rewrite IH1 in goal at 0
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (SUCC (ZERO)) (SUCC (ZERO)) = lq (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
Prop: lq (ZERO) (SUCC (SUCC (ZERO))) = lq (ZERO) (SUCC (SUCC (SUCC (ZERO))))
validate generalize_common_subterm_goal
Prop: lq (ZERO) (SUCC (SUCC (ZERO))) = lq (ZERO) (SUCC (SUCC (SUCC (ZERO))))
Prop: lq (ZERO) (SUCC (ZERO)) = lq (ZERO) (SUCC (SUCC (ZERO)))
Prop: lq (SUCC (ZERO)) (ZERO) = lq (SUCC (ZERO)) (SUCC (ZERO))
previous tactics
validate generalize_common_subterm_goal
Prop: false = lq (height (Empty)) (SUCC (ZERO))
Prop: false = lq (height (Empty)) (SUCC (ZERO))
Prop: false = lq (height (Empty)) (SUCC (ZERO))
asdf
Lemma List
forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))
End of Lemma List


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
nat3 : nat
IH1 : false = lq (height (btree1)) (nat3)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
lq (height (btree1)) (nat3) = lq (height (btree1)) (SUCC (nat3))

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1405


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
nat3 : nat
IH1 : false = lq (height (btree1)) (nat3)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
lq (height (btree1)) (nat3) = lq (height (btree1)) (SUCC (nat3))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))

---------------------------------------
forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (nat1) (SUCC (nat2))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
induction nat1(rank:20.)
induction nat2(rank:20.)
=================================================
Progress: 1406


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
zipper1 : zipper
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (height (Empty)) (height (repr (zipper1))) = true -> false = lq (height (Empty)) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
zipper1 : zipper
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (repr (zipper1))) = true -> false = lq (ZERO) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 1407


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
zipper1 : zipper
btree1 : btree
Base2 : btree1 = Empty
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (repr (zipper1))) = true -> false = lq (ZERO) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
zipper1 : zipper
btree1 : btree
Base2 : btree1 = Empty
Cond1 : lq (ZERO) (height (repr (zipper1))) = true
---------------------------------------
forall (nat1:nat), false = lq (ZERO) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:12.)
=================================================
Progress: 1408


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
zipper1 : zipper
btree1 : btree
Base2 : btree1 = Empty
Cond1 : lq (ZERO) (height (repr (zipper1))) = true
---------------------------------------
forall (nat1:nat), false = lq (ZERO) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 12.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
zipper1 : zipper
btree1 : btree
Base2 : btree1 = Empty
Cond1 : lq (ZERO) (height (repr (zipper1))) = true
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
false = lq (ZERO) (ZERO)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1409


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
zipper1 : zipper
btree1 : btree
Base2 : btree1 = Empty
Cond1 : lq (ZERO) (height (repr (zipper1))) = true
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
false = lq (ZERO) (ZERO)

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
zipper1 : zipper
btree1 : btree
Base2 : btree1 = Empty
Cond1 : lq (ZERO) (height (repr (zipper1))) = true
nat1 : nat
nat3 : nat
IH1 : false = lq (ZERO) (nat3)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
false = lq (ZERO) (SUCC (nat3))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1410


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
zipper1 : zipper
btree1 : btree
Base2 : btree1 = Empty
Cond1 : lq (ZERO) (height (repr (zipper1))) = true
nat1 : nat
nat3 : nat
IH1 : false = lq (ZERO) (nat3)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
false = lq (ZERO) (SUCC (nat3))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
zipper1 : zipper
btree1 : btree
Base2 : btree1 = Empty
Cond1 : lq (ZERO) (height (repr (zipper1))) = true
nat1 : nat
nat3 : nat
IH1 : false = lq (ZERO) (nat3)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 0(rank:27.)
=================================================
Progress: 1411


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), lq (ZERO) (nat2) = lq (height (btree1)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1412


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), lq (ZERO) (nat2) = lq (height (btree1)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), lq (ZERO) (nat2) = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:11.)
=================================================
Progress: 1413


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat), lq (ZERO) (nat2) = false

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
lq (ZERO) (ZERO) = false

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1414


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
lq (ZERO) (ZERO) = false

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat3 : nat
IH1 : lq (ZERO) (nat3) = false
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
lq (ZERO) (SUCC (nat3)) = false

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1415


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat3 : nat
IH1 : lq (ZERO) (nat3) = false
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
lq (ZERO) (SUCC (nat3)) = false

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat3 : nat
IH1 : lq (ZERO) (nat3) = false
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 0(rank:26.)
=================================================
Progress: 1416


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), lq (nat1) (ZERO) = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1417


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), lq (nat1) (ZERO) = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), false = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 1418


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), false = lq (height (btree1)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
false = lq (height (btree1)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1419


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
false = lq (height (btree1)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
nat3 : nat
IH1 : false = lq (height (btree1)) (nat3)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
false = lq (height (btree1)) (SUCC (nat3))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH1 in goal at 0(rank:10.)
=================================================
Progress: 1420


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
nat3 : nat
IH1 : false = lq (height (btree1)) (nat3)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
false = lq (height (btree1)) (SUCC (nat3))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
nat2 : nat
Base1 : nat2 = ZERO
nat1 : nat
nat3 : nat
IH1 : false = lq (height (btree1)) (nat3)
Inductive1 : nat1 = SUCC (nat3)
---------------------------------------
lq (height (btree1)) (nat3) = lq (height (btree1)) (SUCC (nat3))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
rewrite IH1 in goal at 0
Prop: lq (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = lq (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO))))
Prop: lq (SUCC (ZERO)) (ZERO) = lq (SUCC (ZERO)) (SUCC (ZERO))
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: lq (SUCC (ZERO)) (ZERO) = lq (SUCC (ZERO)) (SUCC (ZERO))
Prop: lq (ZERO) (SUCC (SUCC (ZERO))) = lq (ZERO) (SUCC (SUCC (SUCC (ZERO))))
Prop: lq (ZERO) (SUCC (ZERO)) = lq (ZERO) (SUCC (SUCC (ZERO)))
previous tactics
validate generalize_common_subterm_goal
Prop: false = lq (height (Empty)) (SUCC (ZERO))
Prop: false = lq (height (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Empty)) (Empty))) (SUCC (ZERO))
Prop: false = lq (height (Empty)) (SUCC (SUCC (SUCC (ZERO))))
asdf
=================================================
Progress: 1421


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree3)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
case lq (height (btree2)) (height (btree3))
rewrite <- IH2 in goal at 0
rewrite IH3 in goal at 0
Prop: lq (ZERO) (SUCC (ZERO)) = lq (ZERO) (ZERO)
Prop: lq (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = lq (SUCC (ZERO)) (SUCC (ZERO))
Prop: lq (ZERO) (SUCC (ZERO)) = lq (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: lq (SUCC (ZERO)) (SUCC (ZERO)) = lq (SUCC (ZERO)) (ZERO)
Prop: lq (ZERO) (SUCC (ZERO)) = lq (ZERO) (ZERO)
Prop: lq (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = lq (SUCC (ZERO)) (SUCC (ZERO))
Prop: lq (height (Empty)) (SUCC (ZERO)) = lq (height (Empty)) (ZERO)
Prop: lq (height (Empty)) (SUCC (ZERO)) = lq (height (Empty)) (ZERO)
Prop: lq (height (Empty)) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (SUCC (ZERO))
asdf
previous tactics
simpl in goal
rewrite IH2 in goal at 0
case lq (height (btree2)) (height (btree3))
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = lq (height (Empty)) (ZERO)
Prop: true = lq (height (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))) (ZERO)
Prop: true = lq (height (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (ZERO)
asdf
previous tactics
simpl in goal
rewrite IH2 in goal at 0
case lq (height (btree2)) (height (btree3))
validate generalize_common_subterm_goal
Prop: lq (height (Empty)) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (SUCC (ZERO))
Prop: lq (height (Empty)) (SUCC (SUCC (ZERO))) = lq (height (Node (SUCC (ZERO)) (Empty) (Empty))) (SUCC (ZERO))
Prop: lq (height (Empty)) (SUCC (ZERO)) = lq (height (Node (SUCC (ZERO)) (Empty) (Empty))) (ZERO)
asdf
=================================================
Progress: 1422


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (height (btree3)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
case lq (height (btree2)) (height (btree3))
rewrite <- IH2 in goal at 0
rewrite <- Case1 in goal at 0
Prop: lq (height (Empty)) (ZERO) = lq (ZERO) (ZERO)
Prop: lq (height (Empty)) (ZERO) = lq (ZERO) (ZERO)
Prop: lq (height (Empty)) (SUCC (SUCC (ZERO))) = lq (SUCC (SUCC (ZERO))) (ZERO)
validate generalize_common_subterm_goal
Prop: lq (height (Empty)) (ZERO) = lq (ZERO) (ZERO)
Prop: lq (height (Empty)) (ZERO) = lq (ZERO) (ZERO)
Prop: lq (height (Empty)) (ZERO) = lq (ZERO) (ZERO)
previous tactics
simpl in goal
rewrite IH2 in goal at 0
case lq (height (btree2)) (height (btree3))
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = lq (height (Empty)) (ZERO)
Prop: true = lq (height (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Empty)))) (SUCC (ZERO))
Prop: true = lq (height (Empty)) (SUCC (ZERO))
asdf
previous tactics
simpl in goal
rewrite IH2 in goal at 0
case lq (height (btree2)) (height (btree3))
validate generalize_common_subterm_goal
Prop: lq (height (Node (SUCC (ZERO)) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))))) (SUCC (ZERO)) = lq (height (Node (ZERO) (Empty) (Empty))) (ZERO)
Prop: lq (height (Empty)) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (SUCC (ZERO))
Prop: lq (height (Empty)) (SUCC (ZERO)) = lq (height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (ZERO)
asdf
=================================================
Progress: 1423


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (SUCC (nat2)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH3 in goal at 0
case lq (height (btree2)) (height (btree3))
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))))) (Empty))) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = lq (height (Node (ZERO) (Empty) (Empty))) (SUCC (SUCC (SUCC (ZERO))))
Prop: lq (height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (SUCC (ZERO))
Prop: lq (height (Empty)) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (SUCC (ZERO))
previous tactics
simpl in goal
rewrite IH3 in goal at 0
case lq (height (btree2)) (height (btree3))
rewrite <- IH3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = lq (height (Empty)) (ZERO)
Prop: true = lq (height (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Empty) (Empty)))) (SUCC (ZERO))
Prop: true = lq (height (Empty)) (SUCC (ZERO))
asdf
previous tactics
simpl in goal
rewrite IH3 in goal at 0
case lq (height (btree2)) (height (btree3))
Prop: lq (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) = lq (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
Prop: lq (SUCC (ZERO)) (SUCC (ZERO)) = lq (SUCC (ZERO)) (ZERO)
Prop: lq (ZERO) (SUCC (ZERO)) = lq (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: lq (ZERO) (SUCC (SUCC (ZERO))) = lq (ZERO) (SUCC (ZERO))
Prop: lq (SUCC (ZERO)) (SUCC (ZERO)) = lq (SUCC (ZERO)) (ZERO)
Prop: lq (SUCC (ZERO)) (SUCC (ZERO)) = lq (SUCC (ZERO)) (ZERO)
=================================================
Progress: 1424


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
true = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (height (btree3)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH3 in goal at 0
case lq (height (btree2)) (height (btree3))
rewrite <- IH3 in goal at 0
rewrite <- Case1 in goal at 0
Prop: lq (height (Empty)) (ZERO) = lq (ZERO) (ZERO)
Prop: lq (height (Node (SUCC (ZERO)) (Empty) (Empty))) (ZERO) = lq (ZERO) (ZERO)
Prop: lq (height (Empty)) (ZERO) = lq (ZERO) (ZERO)
previous tactics
simpl in goal
rewrite IH3 in goal at 0
case lq (height (btree2)) (height (btree3))
rewrite <- IH3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = lq (height (Node (SUCC (ZERO)) (Empty) (Empty))) (SUCC (ZERO))
Prop: true = lq (height (Empty)) (SUCC (ZERO))
Prop: true = lq (height (Empty)) (ZERO)
asdf
previous tactics
simpl in goal
rewrite IH3 in goal at 0
case lq (height (btree2)) (height (btree3))
Prop: lq (SUCC (ZERO)) (SUCC (ZERO)) = lq (SUCC (ZERO)) (ZERO)
Prop: lq (ZERO) (SUCC (ZERO)) = lq (ZERO) (ZERO)
Prop: lq (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = lq (SUCC (ZERO)) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: lq (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (ZERO)))) = lq (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))
Prop: lq (ZERO) (SUCC (ZERO)) = lq (ZERO) (ZERO)
Prop: lq (ZERO) (SUCC (ZERO)) = lq (ZERO) (ZERO)
Prop: lq (height (Empty)) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (SUCC (ZERO))
Prop: lq (height (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Empty)) (Empty)) (Empty))) (SUCC (ZERO)) = lq (height (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty)))) (Empty)) (Empty)) (Empty))) (ZERO)
Prop: lq (height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (SUCC (ZERO)) = lq (height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (ZERO)
Lemma List
forall (nat1:nat) (btree1:btree) (nat2:nat), lq (height (btree1)) (nat1) = lq (nat1) (nat2)
End of Lemma List


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (height (btree3)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1425


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
Base1 : zipper1 = Top
btree1 : btree
nat3 : nat
btree2 : btree
btree3 : btree
IH2 : true = lq (height (btree2)) (SUCC (nat2))
IH3 : true = lq (height (btree3)) (SUCC (nat2))
Inductive2 : btree1 = Node (nat3) (btree2) (btree3)
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (btree2)) (height (btree3)) = lq (height (btree3)) (nat2)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (nat2:nat), lq (height (btree1)) (nat1) = lq (nat1) (nat2)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), lq (height (btree1)) (nat1) = lq (nat1) (nat2)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), lq (height (btree1)) (nat1) = lq (nat1) (nat2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
induction btree1(rank:18.)
induction nat1(rank:18.)
induction nat2(rank:18.)
=================================================
Progress: 1426


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (repr (zipper2))) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree3)) (height (repr (zipper2)))(rank:11.)
=================================================
Progress: 1427


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (repr (zipper2))) (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (height (repr (zipper2))) (nat1)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:20.)
rewrite IH1 in goal at 0(rank:29.)
=================================================
Progress: 1428


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (ZERO) = lq (height (btree1)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1429


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (ZERO) = lq (height (btree1)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (height (btree1)) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (SUCC (nat3)) = lq (height (btree1)) (SUCC (nat3))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1430


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (height (btree1)) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (SUCC (nat3)) = lq (height (btree1)) (SUCC (nat3))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (height (btree1)) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (height (repr (zipper2))) (nat3) = lq (height (btree1)) (SUCC (nat3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 1431


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (btree1)) (SUCC (nat2))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree3)) (height (repr (zipper2)))(rank:11.)
=================================================
Progress: 1432


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:13.)
=================================================
Progress: 1433


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (repr (zipper2))) (SUCC (nat2))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree1)) (SUCC (nat2))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- IH2 in goal at 0
case lq (height (btree3)) (height (repr (zipper2)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Left (SUCC (ZERO)) (Empty) (Top))))) (ZERO) = lq (height (Empty)) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Empty)) (SUCC (ZERO))
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (ZERO) = lq (height (Empty)) (SUCC (ZERO))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- IH2 in goal at 0
case lq (height (btree3)) (height (repr (zipper2)))
Prop: lq (SUCC (ZERO)) (ZERO) = lq (SUCC (ZERO)) (SUCC (ZERO))
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (SUCC (ZERO)) (ZERO) = lq (SUCC (ZERO)) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (ZERO) (ZERO) = lq (ZERO) (SUCC (ZERO))
Prop: lq (SUCC (SUCC (ZERO))) (ZERO) = lq (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (repr (Top))) (SUCC (ZERO))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (repr (Top))) (SUCC (ZERO))
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (ZERO) = lq (height (repr (Right (ZERO) (Empty) (Top)))) (SUCC (ZERO))
asdf
=================================================
Progress: 1434


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree3)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
rewrite <- Case1 in goal at 0
Prop: lq (ZERO) (SUCC (ZERO)) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (SUCC (SUCC (ZERO))) = lq (height (Empty)) (ZERO)
Prop: lq (SUCC (SUCC (ZERO))) (ZERO) = lq (height (Empty)) (SUCC (SUCC (ZERO)))
validate generalize_common_subterm_goal
Prop: lq (ZERO) (ZERO) = lq (height (Node (SUCC (ZERO)) (Empty) (Empty))) (ZERO)
Prop: lq (SUCC (SUCC (ZERO))) (ZERO) = lq (height (Empty)) (SUCC (SUCC (ZERO)))
Prop: lq (ZERO) (SUCC (ZERO)) = lq (height (Empty)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (ZERO) = true
asdf
Lemma List
forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree3)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1435


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree3)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
intro btree1(rank:9.)
induction btree1(rank:18.)
induction nat1(rank:18.)
induction nat2(rank:18.)
intro zipper1(rank:9.)
=================================================
Progress: 1436


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro btree1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
---------------------------------------
forall (nat1:nat) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro zipper1(rank:9.)
=================================================
Progress: 1437


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro zipper1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1438


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
---------------------------------------
forall (nat1:nat) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro zipper1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1439


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
btree1 : btree
zipper1 : zipper
Cond1 : lq (height (btree1)) (height (repr (zipper1))) = true
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction nat1(rank:18.)
induction nat2(rank:18.)
=================================================
Progress: 1440


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
zipper1 : zipper
---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (height (Empty)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (Empty)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1441


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (height (Empty)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (Empty)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (ZERO) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1442


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (ZERO) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (nat1) (nat2) = lq (height (btree1)) (nat1)
zipper1 : zipper
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (ZERO) (height (repr (zipper1))) = true
---------------------------------------
forall (nat1:nat) (nat2:nat), lq (nat1) (nat2) = lq (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction nat1(rank:19.)
induction nat2(rank:19.)
=================================================
Progress: 1443


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
rewrite <- Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (ZERO) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (ZERO) = lq (ZERO) (height (Empty))
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Left (SUCC (ZERO)) (Empty) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (ZERO) = true
asdf
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree1))
End of Lemma List


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1444


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1445


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (Empty))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 1446


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (Empty))

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1447


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), true = true -> lq (height (repr (zipper1))) (nat1) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1448


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), true = true -> lq (height (repr (zipper1))) (nat1) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
Cond1 : true = true
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
induction nat1(rank:18.)
induction zipper1(rank:19.)
rewrite IH1 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
=================================================
Progress: 1449


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1450


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (ZERO) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction nat1(rank:19.)
induction zipper1(rank:20.)
=================================================
Progress: 1451


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (ZERO) = lq (height (btree1)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1452


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (ZERO) = lq (height (btree1)) (ZERO)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (repr (zipper1))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
induction btree1(rank:18.)
induction zipper1(rank:19.)
=================================================
Progress: 1453


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree3)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
rewrite <- Case1 in goal at 0
Prop: lq (ZERO) (SUCC (SUCC (ZERO))) = lq (height (Node (ZERO) (Empty) (Empty))) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty))) (Empty)))) (Node (SUCC (SUCC (ZERO))) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))))) (ZERO)
Prop: lq (SUCC (ZERO)) (ZERO) = lq (height (Node (ZERO) (Empty) (Empty))) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: lq (ZERO) (SUCC (ZERO)) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (SUCC (ZERO)) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (SUCC (ZERO)) = lq (height (Empty)) (ZERO)
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Empty)) (height (repr (Top)))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Empty)) (height (repr (Top)))
Prop: lq (height (repr (Top))) (ZERO) = lq (height (Empty)) (height (repr (Top)))
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Left (ZERO) (Node (ZERO) (Empty) (Empty)) (Top)))) (ZERO) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Left (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)) (Node (SUCC (ZERO)) (Empty) (Empty))))) (Top)))) (SUCC (ZERO)) = true
asdf
Lemma List
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))
End of Lemma List


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree3)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1454


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree3)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))(rank : 0.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction btree1(rank:10.)
=================================================
Progress: 1455


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (Empty)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (height (repr (zipper1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1456


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (Empty)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (Empty)) (height (repr (zipper1)))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (repr (zipper1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:12.)
=================================================
Progress: 1457


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (ZERO) (height (repr (zipper1)))

1 goal(s) more...

3 conjecture(s) more...
>>> induction zipper1(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (repr (Top))) = true -> lq (height (repr (Top))) (nat1) = lq (ZERO) (height (repr (Top)))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:11.)
=================================================
Progress: 1458


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (repr (Top))) = true -> lq (height (repr (Top))) (nat1) = lq (ZERO) (height (repr (Top)))

3 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (height (repr (zipper2))) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (height (repr (zipper2)))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (repr (Left (nat2) (btree2) (zipper2)))) = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (nat1) = lq (ZERO) (height (repr (Left (nat2) (btree2) (zipper2))))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1459


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (height (repr (zipper2))) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (height (repr (zipper2)))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), lq (ZERO) (height (repr (Left (nat2) (btree2) (zipper2)))) = true -> lq (height (repr (Left (nat2) (btree2) (zipper2)))) (nat1) = lq (ZERO) (height (repr (Left (nat2) (btree2) (zipper2))))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (height (repr (zipper2))) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (height (repr (zipper2)))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), true = true -> lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (nat1) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 1460


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (height (repr (zipper2))) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (height (repr (zipper2)))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
---------------------------------------
forall (nat1:nat), true = true -> lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (nat1) = true

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (height (repr (zipper2))) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (height (repr (zipper2)))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (nat1) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (height (repr (zipper2)))(rank:12.)
=================================================
Progress: 1461


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (height (repr (zipper2))) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (height (repr (zipper2)))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree2)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree2))) (nat1) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (repr (zipper2)))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (height (repr (zipper1))) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (height (repr (zipper1)))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat2 : nat
btree2 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (ZERO) (height (repr (zipper2))) = true -> lq (height (repr (zipper2))) (nat1) = lq (ZERO) (height (repr (zipper2)))
Inductive1 : zipper1 = Left (nat2) (btree2) (zipper2)
Cond1 : true = true
Case1 : lq (height (btree2)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:20.)
induction nat1(rank:21.)
=================================================
Progress: 1462


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
rewrite <- Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (ZERO) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (ZERO) = lq (ZERO) (height (Node (ZERO) (Empty) (Empty)))
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (ZERO) = lq (ZERO) (height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
asdf
=================================================
Progress: 1463


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1464


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro nat1(rank:10.)
intro zipper1(rank:10.)
induction zipper1(rank:20.)
=================================================
Progress: 1465


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:12.)
=================================================
Progress: 1466


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
>>> intro zipper1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1467


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 1468


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1469


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 1470


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 1471


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 1472


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top))

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2)))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1473


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2)))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1474


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 1475


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case lq (height (btree2)) (height (btree3))(rank:11.)
rewrite Cond1 in goal at 0(rank:26.)
case lq (height (btree4)) (height (repr (zipper2)))(rank:11.)
case lq (height (btree4)) (mainNew (zipper2))(rank:11.)
=================================================
Progress: 1476


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (repr (zipper2)))(rank:12.)
rewrite Cond1 in goal at 0(rank:27.)
case lq (height (btree4)) (mainNew (zipper2))(rank:12.)
=================================================
Progress: 1477


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
case lq (height (btree4)) (mainNew (zipper2))(rank:12.)
=================================================
Progress: 1478


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite Cond1 in goal at 0(rank:27.)
case lq (height (btree4)) (height (repr (zipper2)))(rank:12.)
=================================================
Progress: 1479


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (mainNew (zipper2))(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 1480


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (repr (zipper2)))(rank:13.)
rewrite Cond1 in goal at 0(rank:28.)
=================================================
Progress: 1481


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (mainNew (zipper2))(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 1482


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 1483


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (repr (zipper2)))(rank:13.)
rewrite Cond1 in goal at 0(rank:28.)
=================================================
Progress: 1484


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 1485


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:13.)
=================================================
Progress: 1486


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:13.)
=================================================
Progress: 1487


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:13.)
=================================================
Progress: 1488


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:13.)
=================================================
Progress: 1489


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:13.)
=================================================
Progress: 1490


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:13.)
=================================================
Progress: 1491


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case3 in goal at 0(rank:21.)
=================================================
Progress: 1492


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case3 in goal at 0(rank:21.)
=================================================
Progress: 1493


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case3 in goal at 0(rank:21.)
=================================================
Progress: 1494


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case3 in goal at 0(rank:21.)
=================================================
Progress: 1495


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case3 in goal at 0(rank:21.)
=================================================
Progress: 1496


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree1)) (mainNew (zipper1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (height (btree3)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = lq (SUCC (height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case3 in goal at 0(rank:21.)
=================================================
Progress: 1497


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

---------------------------------------
forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction btree1(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Empty))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1498


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (ZERO) (height (Empty)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Empty))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro nat1(rank:10.)
intro zipper1(rank:10.)
induction zipper1(rank:20.)
=================================================
Progress: 1499


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:12.)
=================================================
Progress: 1500


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro zipper1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1501


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
---------------------------------------
forall (nat1:nat), lq (ZERO) (mainNew (zipper1)) = true->false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 1502


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
forall (nat1:nat), false = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = false

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1503


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (height (Node (nat2) (btree2) (btree3))) (mainNew (zipper1)) = true->lq (ZERO) (height (Node (nat2) (btree2) (btree3))) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (Node (nat2) (btree2) (btree3)))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 1504


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
---------------------------------------
forall (nat1:nat) (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 1505


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper1)) = true->true = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = true

0 goal(s) more...

3 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1506


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Top)) = true->true = true -> lq (height (repr (Top))) (SUCC (nat1)) = true

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = true

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1507


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (Left (nat3) (btree4) (zipper2))) = true->true = true -> lq (height (repr (Left (nat3) (btree4) (zipper2)))) (SUCC (nat1)) = true

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1508


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
---------------------------------------
lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true->true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 1509


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
---------------------------------------
true = true -> lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (repr (zipper2)))(rank:11.)
rewrite <- Cond1 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:20.)
=================================================
Progress: 1510


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (nat1:nat) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (nat1:nat) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
nat1 : nat
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- IH3 in goal at 0(rank:21.)
=================================================
Progress: 1511


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = true

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:11.)
case lq (height (btree4)) (height (repr (zipper2)))(rank:11.)
case lq (height (btree4)) (mainNew (zipper2))(rank:11.)
=================================================
Progress: 1512


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (repr (zipper2)))(rank:12.)
rewrite Cond1 in goal at 0(rank:27.)
case lq (height (btree4)) (mainNew (zipper2))(rank:12.)
=================================================
Progress: 1513


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
case lq (height (btree4)) (mainNew (zipper2))(rank:12.)
=================================================
Progress: 1514


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

1 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case lq (height (btree2)) (height (btree3))(rank:12.)
rewrite Cond1 in goal at 0(rank:27.)
case lq (height (btree4)) (height (repr (zipper2)))(rank:12.)
=================================================
Progress: 1515


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (mainNew (zipper2))(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 1516


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (repr (zipper2)))(rank:13.)
rewrite Cond1 in goal at 0(rank:28.)
=================================================
Progress: 1517


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (mainNew (zipper2))(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 1518


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 1519


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (repr (zipper2)))(rank:13.)
rewrite Cond1 in goal at 0(rank:28.)
=================================================
Progress: 1520


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

2 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 12.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case lq (height (btree2)) (height (btree3))(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
=================================================
Progress: 1521


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:13.)
=================================================
Progress: 1522


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:13.)
=================================================
Progress: 1523


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (if lq (height (btree4)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree4))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (mainNew (zipper2))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:13.)
=================================================
Progress: 1524


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:13.)
=================================================
Progress: 1525


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (nat1) = lq (height (btree3)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree4)) (height (repr (zipper2)))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:13.)
=================================================
Progress: 1526


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (if lq (height (btree2)) (height (btree3)) then height (btree3) else height (btree2)) (mainNew (zipper2))

3 goal(s) more...

3 conjecture(s) more...
>>> case lq (height (btree2)) (height (btree3))(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:13.)
=================================================
Progress: 1527


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case3 in goal at 0(rank:21.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 1528


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case3 in goal at 0(rank:21.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 1529


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case3 in goal at 0(rank:21.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 1530


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case3 in goal at 0(rank:21.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 1531


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree2)) (height (btree3)) = true
Case3 : lq (height (btree4)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case3 in goal at 0(rank:21.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 1532


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = lq (height (btree3)) (mainNew (zipper2))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 13.)


1st goal of : forall (btree1:btree) (nat1:nat) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree1)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree1))
nat1 : nat
btree1 : btree
nat2 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree2))
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (ZERO) (height (btree3)) = true -> lq (height (repr (zipper1))) (SUCC (nat1)) = lq (ZERO) (height (btree3))
Inductive1 : btree1 = Node (nat2) (btree2) (btree3)
zipper1 : zipper
nat3 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->true = true -> lq (height (repr (zipper2))) (SUCC (nat1)) = true
Inductive2 : zipper1 = Left (nat3) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : true = true
Case1 : lq (height (btree4)) (mainNew (zipper2)) = true
Case2 : lq (height (btree4)) (height (repr (zipper2))) = true
Case3 : lq (height (btree2)) (height (btree3)) = true
---------------------------------------
lq (height (repr (zipper2))) (nat1) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case3 in goal at 0(rank:21.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 1533


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (ZERO) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (height (repr (zipper2))) (nat3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (ZERO) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (height (repr (zipper2))) (nat3) = lq (height (btree3)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- Case1 in goal at 0
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Node (ZERO) (Empty) (Empty))) (ZERO)
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
asdf
Lemma List
forall (nat1:nat) (btree1:btree) (nat2:nat), lq (nat1) (nat2) = lq (height (btree1)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (ZERO) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (height (repr (zipper2))) (nat3) = lq (height (btree3)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1534


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (ZERO) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (height (repr (zipper2))) (nat3) = lq (height (btree3)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (btree1:btree) (nat2:nat), lq (nat1) (nat2) = lq (height (btree1)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (btree1:btree) (nat2:nat), lq (nat1) (nat2) = lq (height (btree1)) (nat1)

---------------------------------------
forall (nat1:nat) (btree1:btree) (nat2:nat), lq (nat1) (nat2) = lq (height (btree1)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
induction btree1(rank:18.)
induction nat1(rank:18.)
induction nat2(rank:18.)
=================================================
Progress: 1535


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (ZERO) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (height (repr (zipper2))) (nat3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat) (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (ZERO) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (height (repr (zipper2))) (nat3) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Node (SUCC (ZERO)) (Empty) (Empty)))
Prop: lq (height (repr (Top))) (ZERO) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Top))) (ZERO) = true
asdf
=================================================
Progress: 1536


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree3)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
rewrite <- Case1 in goal at 0
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (SUCC (ZERO)) (SUCC (ZERO)) = lq (height (Empty)) (SUCC (ZERO))
Prop: lq (SUCC (ZERO)) (ZERO) = lq (height (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: lq (SUCC (SUCC (ZERO))) (ZERO) = lq (height (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty))) (SUCC (SUCC (ZERO)))
Prop: lq (ZERO) (ZERO) = lq (height (Node (ZERO) (Empty) (Empty))) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = true
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
asdf
=================================================
Progress: 1537


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (ZERO) (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
rewrite <- Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Left (ZERO) (Empty) (Right (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))) (Left (ZERO) (Empty) (Top)))))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (ZERO) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Left (SUCC (ZERO)) (Empty) (Top)))) (ZERO) = lq (ZERO) (height (Empty))
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree3)) (height (repr (zipper2)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = true
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (ZERO) = true
asdf
=================================================
Progress: 1538


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 1539


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree3)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- Cond2 in goal at 0
case lq (height (btree3)) (height (repr (zipper2)))
rewrite Cond2 in goal at 0
rewrite <- Case1 in goal at 0
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- Cond2 in goal at 0
case lq (height (btree3)) (height (repr (zipper2)))
rewrite Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (ZERO) = true
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = true
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- Cond2 in goal at 0
case lq (height (btree3)) (height (repr (zipper2)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (SUCC (ZERO))) = lq (ZERO) (height (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))
Prop: lq (height (repr (Top))) (ZERO) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (ZERO) = lq (ZERO) (height (Empty))
=================================================
Progress: 1540


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 1541


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : lq (height (btree2)) (mainNew (zipper2)) = true->lq (ZERO) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = true
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree3)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- Cond2 in goal at 0
case lq (height (btree3)) (height (repr (zipper2)))
rewrite Cond2 in goal at 0
rewrite <- Case1 in goal at 0
Prop: lq (SUCC (ZERO)) (ZERO) = lq (height (Empty)) (SUCC (ZERO))
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (SUCC (ZERO)) = lq (height (Node (ZERO) (Empty) (Empty))) (ZERO)
validate generalize_common_subterm_goal
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty)) (Empty))) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- Cond2 in goal at 0
case lq (height (btree3)) (height (repr (zipper2)))
rewrite Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = true
Prop: lq (height (repr (Left (SUCC (ZERO)) (Empty) (Right (ZERO) (Empty) (Top))))) (ZERO) = true
Prop: lq (height (repr (Left (ZERO) (Empty) (Left (SUCC (ZERO)) (Empty) (Top))))) (SUCC (ZERO)) = true
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- Cond2 in goal at 0
case lq (height (btree3)) (height (repr (zipper2)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (ZERO) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Left (ZERO) (Empty) (Top)))) (ZERO) = lq (ZERO) (height (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))
asdf
=================================================
Progress: 1542


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond2 in goal at 0(rank:18.)
=================================================
Progress: 1543


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
nat1 : nat
nat2 : nat
IH1 : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat2) = lq (height (btree1)) (nat2)
Inductive1 : nat1 = SUCC (nat2)
zipper1 : zipper
nat3 : nat
btree3 : btree
zipper2 : zipper
IH2 : forall (btree1:btree) (btree2:btree), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (SUCC (nat2)) = lq (height (btree1)) (SUCC (nat2))
Inductive2 : zipper1 = Left (nat3) (btree3) (zipper2)
btree2 : btree
btree1 : btree
Base1 : btree1 = Empty
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (ZERO) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (nat2) = lq (height (btree3)) (height (repr (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- Cond2 in goal at 0
case lq (height (btree3)) (height (repr (zipper2)))
rewrite Cond2 in goal at 0
rewrite <- Case1 in goal at 0
Prop: lq (SUCC (ZERO)) (ZERO) = lq (height (Empty)) (SUCC (ZERO))
Prop: lq (ZERO) (SUCC (ZERO)) = lq (height (Empty)) (ZERO)
Prop: lq (SUCC (ZERO)) (SUCC (ZERO)) = lq (height (Empty)) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: lq (ZERO) (ZERO) = lq (height (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
Prop: lq (ZERO) (ZERO) = lq (height (Empty)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- Cond2 in goal at 0
case lq (height (btree3)) (height (repr (zipper2)))
rewrite Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Top))) (ZERO) = true
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (SUCC (ZERO)) = true
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite <- Cond2 in goal at 0
case lq (height (btree3)) (height (repr (zipper2)))
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (ZERO) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Empty))
Prop: lq (height (repr (Top))) (SUCC (ZERO)) = lq (ZERO) (height (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty))) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Empty) (Empty)) (Empty)) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)))))) (Empty)) (Node (ZERO) (Empty) (Empty))))
=================================================
Progress: 1544


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
mainNew (zipper2) = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (mainNew (zipper2))(rank:11.)
=================================================
Progress: 1545


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
mainNew (zipper2) = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
mainNew (zipper2) = SUCC (mainNew (zipper2))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 1(rank:28.)
rewrite <- IH1 in goal at 2(rank:28.)
=================================================
Progress: 1546


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (ZERO) then ZERO else height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1547


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (ZERO) then ZERO else height (btree2))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 1548


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (height (btree2))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
mainNew (zipper2) = SUCC (height (btree2))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite <- IH1 in goal at 0
simpl in goal
rewrite IH1 in goal at 0
parent
mainNew (zipper2)
lower
mainNew(_)
upper
_
remove upper
ZERO()
remove lower
ZERO()
remove upper
mainNew(zipper2)
remove lower
mainNew(_)
remove upper
SUCC(_)
parent
height (btree2)
lower
height(_)
upper
SUCC(_)
remove upper
height(btree2)
remove lower
height(btree2)
remove upper
height(btree2)
remove lower
height(btree2)
remove upper
height(btree2)
remove lower
height(btree2)
validate generalize_common_subterm_goal
Prop: mainNew (Left (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (SUCC (ZERO)) (Empty) (Empty))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty))) (Empty)) (Empty)) (Empty))) (Top)) = SUCC (height (Empty))
Prop: mainNew (Top) = SUCC (height (Empty))
Prop: mainNew (Left (SUCC (ZERO)) (Empty) (Top)) = SUCC (height (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)))
asdf
previous tactics
simpl in goal
intro Cond1
rewrite <- IH1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (height (Empty))
Prop: ZERO = SUCC (height (Node (ZERO) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty))) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))))
Prop: ZERO = SUCC (height (Empty))
asdf
=================================================
Progress: 1549


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (ZERO) then mainNew (zipper2) else height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (if lq (height (Empty)) (ZERO) then mainNew (Right (ZERO) (Empty) (Left (ZERO) (Empty) (Top))) else height (Empty))
Prop: ZERO = SUCC (if lq (height (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) (ZERO) then mainNew (Top) else height (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty)))
Prop: ZERO = SUCC (if lq (height (Empty)) (ZERO) then mainNew (Top) else height (Empty))
asdf
previous tactics
simpl in goal
intro Cond1
validate generalize_common_subterm_goal
Prop: ZERO = SUCC (if lq (height (Node (SUCC (SUCC (ZERO))) (Empty) (Empty))) (mainNew (Top)) then mainNew (Top) else height (Node (SUCC (SUCC (ZERO))) (Empty) (Empty)))
Prop: ZERO = SUCC (if lq (height (Node (ZERO) (Empty) (Empty))) (mainNew (Top)) then mainNew (Top) else height (Node (ZERO) (Empty) (Empty)))
Prop: ZERO = SUCC (if lq (height (Empty)) (mainNew (Top)) then mainNew (Top) else height (Empty))
asdf
=================================================
Progress: 1550


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree2))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then ZERO else height (btree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree2)) (mainNew (zipper2))(rank:11.)
=================================================
Progress: 1551


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
---------------------------------------
ZERO = SUCC (if lq (height (btree2)) (mainNew (zipper2)) then ZERO else height (btree2))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree2)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
nat1 : nat
btree2 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> ZERO = mainNew (zipper2)
Inductive1 : zipper1 = Left (nat1) (btree2) (zipper2)
Cond1 : true = true
Case1 : lq (height (btree2)) (mainNew (zipper2)) = true
---------------------------------------
ZERO = SUCC (ZERO)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:28.)
rewrite IH1 in goal at 1(rank:28.)
rewrite IH1 in goal at 2(rank:28.)
=================================================
Progress: 1552


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (btree1)) (nat1)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (repr (zipper2))) (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (height (btree3)) (height (repr (zipper2)))(rank:11.)
=================================================
Progress: 1553


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3))) (nat1) = lq (height (repr (zipper2))) (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (height (repr (zipper2))) (nat1)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:20.)
rewrite IH1 in goal at 0(rank:29.)
=================================================
Progress: 1554


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (height (repr (zipper2)))) (nat1) = lq (height (btree1)) (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (ZERO) = lq (height (btree1)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1555


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (ZERO) = lq (height (btree1)) (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (height (btree1)) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (SUCC (nat3)) = lq (height (btree1)) (SUCC (nat3))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1556


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (height (btree1)) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (SUCC (height (repr (zipper2)))) (SUCC (nat3)) = lq (height (btree1)) (SUCC (nat3))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper1))) (nat1) = lq (height (btree1)) (nat1)
btree1 : btree
btree2 : btree
zipper1 : zipper
nat2 : nat
btree3 : btree
zipper2 : zipper
IH1 : forall (nat1:nat), lq (height (btree2)) (mainNew (zipper2)) = true->lq (height (btree1)) (height (btree2)) = true -> lq (height (repr (zipper2))) (nat1) = lq (height (btree1)) (nat1)
Inductive1 : zipper1 = Left (nat2) (btree3) (zipper2)
Cond1 : lq (height (btree2)) (SUCC (if lq (height (btree3)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree3))) = true
Cond2 : lq (height (btree1)) (height (btree2)) = true
Case1 : lq (height (btree3)) (height (repr (zipper2))) = true
nat1 : nat
nat3 : nat
IH2 : lq (SUCC (height (repr (zipper2)))) (nat3) = lq (height (btree1)) (nat3)
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
lq (height (repr (zipper2))) (nat3) = lq (height (btree1)) (SUCC (nat3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 1557


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree4)) (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree4)) (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite <- Case2 in goal at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (height (Empty)) = lq (height (Empty)) (height (Empty))
Prop: lq (height (repr (Top))) (height (Empty)) = lq (height (Empty)) (height (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty))) (Empty)) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Empty)))) (Empty))))
Prop: lq (height (repr (Top))) (height (Empty)) = lq (height (Empty)) (height (Empty))
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (height (repr (Left (ZERO) (Empty) (Left (ZERO) (Empty) (Top))))) (height (Empty)) = lq (height (Empty)) (mainNew (Left (ZERO) (Empty) (Left (ZERO) (Empty) (Top))))
Prop: lq (height (repr (Top))) (height (Empty)) = lq (height (Empty)) (mainNew (Top))
Prop: lq (height (repr (Right (ZERO) (Empty) (Top)))) (height (Empty)) = lq (height (Empty)) (mainNew (Right (ZERO) (Empty) (Top)))
previous tactics
simpl in goal
intro Cond1
intro Cond2
case lq (height (btree2)) (height (btree3))
case lq (height (btree4)) (mainNew (zipper2))
rewrite <- IH2 in goal at 0
reflexivity
rewrite Cond1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: lq (height (repr (Top))) (height (Empty)) = true
Prop: lq (height (repr (Top))) (height (Empty)) = true
Prop: lq (height (repr (Top))) (height (Empty)) = true
Lemma List
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree4)) (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree4)) (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 1558


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true(rank : 0.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 1559


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree4)) (mainNew (zipper2))

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 1560


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree1)) = true -> height (btree1) = mainNew (zipper1)
btree1 : btree
nat1 : nat
btree2 : btree
btree3 : btree
IH1 : forall (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree2)) = true -> height (btree2) = mainNew (zipper1)
IH2 : forall (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (height (repr (zipper1))) (height (btree3)) = true -> height (btree3) = mainNew (zipper1)
Inductive1 : btree1 = Node (nat1) (btree2) (btree3)
zipper1 : zipper
nat2 : nat
btree4 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree3))) (mainNew (zipper2)) = true->lq (height (repr (zipper2))) (SUCC (height (btree3))) = true -> SUCC (height (btree3)) = mainNew (zipper2)
Inductive2 : zipper1 = Left (nat2) (btree4) (zipper2)
Cond1 : lq (height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree4)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree4)) (height (btree3)) = true
Case1 : lq (height (btree2)) (height (btree3)) = true
Case2 : lq (height (btree4)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree3)) = lq (height (btree4)) (height (btree2))

5 goal(s) more...

1 conjecture(s) more...
>>> assert forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))(rank : 0.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree1(rank:8.)
=================================================
Progress: 1561


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true

---------------------------------------
forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (Empty)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1562


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (Empty)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (Empty)) = lq (height (btree2)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1563


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))

---------------------------------------
forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree1(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (Empty)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (Empty))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1564


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (Empty)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro zipper1(rank:8.)
=================================================
Progress: 1565


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (Empty)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (Empty)) = lq (height (btree2)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree2)) (mainNew (zipper1)) = true -> false = lq (height (btree2)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree2(rank:9.)
=================================================
Progress: 1566


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (Empty)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (Empty))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (ZERO) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = false

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro btree3(rank:8.)
=================================================
Progress: 1567


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro zipper1(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
---------------------------------------
lq (ZERO) (mainNew (zipper1)) = true -> false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 1568


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (ZERO) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = false

1 goal(s) more...

2 conjecture(s) more...
>>> intro btree3(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (ZERO) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = false

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree2(rank:9.)
=================================================
Progress: 1569


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
---------------------------------------
lq (ZERO) (mainNew (zipper1)) = true -> false = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:8.)
=================================================
Progress: 1570


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 8.)


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
false = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro zipper1
intro Cond1
rewrite <- Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: false = lq (ZERO) (mainNew (Top))
Prop: false = lq (ZERO) (mainNew (Top))
Prop: false = lq (ZERO) (mainNew (Top))
previous tactics
simpl in goal
intro zipper1
intro Cond1
Lemma List
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))
End of Lemma List


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
false = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1571


1st goal of : forall (btree1:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = true
btree1 : btree
Base1 : btree1 = Empty
zipper1 : zipper
Cond1 : lq (ZERO) (mainNew (zipper1)) = true
---------------------------------------
false = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))(rank : 0.)


1st goal of : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))

---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 1572


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree2)) (mainNew (zipper1)) = true -> false = lq (height (btree2)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (Empty)) (mainNew (zipper1)) = true -> false = lq (height (Empty)) (mainNew (zipper1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1573


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (ZERO) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = false

1 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (Empty)) = true->lq (ZERO) (height (Empty)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (Empty)) = false

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 1574


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (zipper1:zipper), lq (height (Empty)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (Empty)) = true->lq (ZERO) (height (Empty)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (Empty)) = false

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat1) (btree4) (btree5))) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (Node (nat1) (btree4) (btree5))) = true->lq (ZERO) (height (Node (nat1) (btree4) (btree5))) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (Node (nat1) (btree4) (btree5))) = false

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1575


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
---------------------------------------
forall (zipper1:zipper), lq (height (Node (nat1) (btree4) (btree5))) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (Node (nat1) (btree4) (btree5))) = true->lq (ZERO) (height (Node (nat1) (btree4) (btree5))) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (Node (nat1) (btree4) (btree5))) = false

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 1576


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (Empty)) (mainNew (zipper1)) = true -> false = lq (height (Empty)) (mainNew (zipper1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:11.)
=================================================
Progress: 1577


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (Top)) = true->lq (if lq (height (btree3)) (height (repr (Top))) then height (repr (Top)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (Top)) = true -> lq (height (repr (Top))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 1578


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (Top)) = true->lq (if lq (height (btree3)) (height (repr (Top))) then height (repr (Top)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (Top)) = true -> lq (height (repr (Top))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false

3 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (Left (nat2) (btree6) (zipper2))) = true->lq (if lq (height (btree3)) (height (repr (Left (nat2) (btree6) (zipper2)))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (Left (nat2) (btree6) (zipper2))) = true -> lq (height (repr (Left (nat2) (btree6) (zipper2)))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1579


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (Left (nat2) (btree6) (zipper2))) = true->lq (if lq (height (btree3)) (height (repr (Left (nat2) (btree6) (zipper2)))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (Left (nat2) (btree6) (zipper2))) = true -> lq (height (repr (Left (nat2) (btree6) (zipper2)))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
---------------------------------------
lq (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true->lq (if lq (height (btree3)) (SUCC (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true -> lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6)) (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) = false

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1580


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
---------------------------------------
lq (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true->lq (if lq (height (btree3)) (SUCC (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true -> lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6)) (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) = false

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true
---------------------------------------
lq (if lq (height (btree3)) (SUCC (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true -> lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6)) (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) = false

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 1581


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true
---------------------------------------
lq (if lq (height (btree3)) (SUCC (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true -> lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6)) (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) = false

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true
Cond2 : lq (if lq (height (btree3)) (SUCC (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true
---------------------------------------
true = true->lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true -> lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6)) (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) = false

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 1582


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true
Cond2 : lq (if lq (height (btree3)) (SUCC (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true
---------------------------------------
true = true->lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true -> lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6)) (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) = false

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true
Cond2 : lq (if lq (height (btree3)) (SUCC (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true
Cond3 : true = true
---------------------------------------
lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true -> lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6)) (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) = false

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 1583


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true
Cond2 : lq (if lq (height (btree3)) (SUCC (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true
Cond3 : true = true
---------------------------------------
lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true -> lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6)) (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) = false

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true
Cond2 : lq (if lq (height (btree3)) (SUCC (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true
Cond3 : true = true
Cond4 : lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true
---------------------------------------
lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6)) (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) = false

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (height (btree4)) (height (btree5))(rank:10.)
rewrite <- IH3 in goal at 0(rank:21.)
case lq (height (btree6)) (height (repr (zipper2)))(rank:10.)
=================================================
Progress: 1584


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true
Cond2 : lq (if lq (height (btree3)) (SUCC (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true
Cond3 : true = true
Cond4 : lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true
---------------------------------------
lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6)) (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) = false

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree5))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree5))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (height (btree5))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree5))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
Cond1 : lq (height (btree5)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true
Cond2 : lq (if lq (height (btree3)) (SUCC (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (height (btree5))) = true
Cond3 : true = true
Cond4 : lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true
Case1 : lq (height (btree4)) (height (btree5)) = true
---------------------------------------
lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6)) (height (btree5)) = false

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree6)) (height (repr (zipper2)))(rank:11.)
rewrite <- IH3 in goal at 0(rank:22.)
=================================================
Progress: 1585


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true
Cond2 : lq (if lq (height (btree3)) (SUCC (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true
Cond3 : true = true
Cond4 : lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true
---------------------------------------
lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6)) (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) = false

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree6)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true
Cond2 : lq (if lq (height (btree3)) (SUCC (height (repr (zipper2)))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true
Cond3 : true = true
Cond4 : lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true
Case1 : lq (height (btree6)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) = false

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree4)) (height (btree5))(rank:11.)
rewrite <- IH3 in goal at 0(rank:22.)
=================================================
Progress: 1586


1st goal of : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))

---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true -> false = lq (ZERO) (mainNew (Top))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1587


1st goal of : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true -> false = lq (ZERO) (mainNew (Top))

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat1) (btree1) (zipper2))) = true -> false = lq (ZERO) (mainNew (Left (nat1) (btree1) (zipper2)))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1588


1st goal of : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat1) (btree1) (zipper2))) = true -> false = lq (ZERO) (mainNew (Left (nat1) (btree1) (zipper2)))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1589


1st goal of : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
---------------------------------------
true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Cond1 : true = true
---------------------------------------
false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 1590


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))

2 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
zipper1 : zipper
Base3 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true->lq (ZERO) (mainNew (Top)) = true -> false = lq (ZERO) (mainNew (Top))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1591


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
zipper1 : zipper
Base3 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true->lq (ZERO) (mainNew (Top)) = true -> false = lq (ZERO) (mainNew (Top))

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
zipper1 : zipper
nat1 : nat
btree3 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat1) (btree3) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat1) (btree3) (zipper2))) = true->false = true->lq (ZERO) (mainNew (Left (nat1) (btree3) (zipper2))) = true -> false = lq (ZERO) (mainNew (Left (nat1) (btree3) (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1592


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
zipper1 : zipper
nat1 : nat
btree3 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat1) (btree3) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat1) (btree3) (zipper2))) = true->false = true->lq (ZERO) (mainNew (Left (nat1) (btree3) (zipper2))) = true -> false = lq (ZERO) (mainNew (Left (nat1) (btree3) (zipper2)))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
zipper1 : zipper
nat1 : nat
btree3 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat1) (btree3) (zipper2)
---------------------------------------
true = true->false = true->true = true -> false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1593


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
zipper1 : zipper
nat1 : nat
btree3 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat1) (btree3) (zipper2)
---------------------------------------
true = true->false = true->true = true -> false = true

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
zipper1 : zipper
nat1 : nat
btree3 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat1) (btree3) (zipper2)
Cond1 : true = true
---------------------------------------
false = true->true = true -> false = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 1594


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
zipper1 : zipper
nat1 : nat
btree3 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat1) (btree3) (zipper2)
Cond1 : true = true
---------------------------------------
false = true->true = true -> false = true

3 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
zipper1 : zipper
nat1 : nat
btree3 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat1) (btree3) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat1) (btree3) (zipper2))) = true->false = true->lq (ZERO) (mainNew (Right (nat1) (btree3) (zipper2))) = true -> false = lq (ZERO) (mainNew (Right (nat1) (btree3) (zipper2)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1595


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
zipper1 : zipper
nat1 : nat
btree3 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat1) (btree3) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat1) (btree3) (zipper2))) = true->false = true->lq (ZERO) (mainNew (Right (nat1) (btree3) (zipper2))) = true -> false = lq (ZERO) (mainNew (Right (nat1) (btree3) (zipper2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
zipper1 : zipper
nat1 : nat
btree3 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat1) (btree3) (zipper2)
---------------------------------------
true = true->false = true->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1596


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
zipper1 : zipper
nat1 : nat
btree3 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat1) (btree3) (zipper2)
---------------------------------------
true = true->false = true->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
zipper1 : zipper
nat1 : nat
btree3 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat1) (btree3) (zipper2)
Cond1 : true = true
---------------------------------------
false = true->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 1597


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
Base2 : btree2 = Empty
zipper1 : zipper
nat1 : nat
btree3 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Right (nat1) (btree3) (zipper2)
Cond1 : true = true
---------------------------------------
false = true->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (Node (nat1) (btree3) (btree4))) (mainNew (zipper1)) = true -> false = lq (height (Node (nat1) (btree3) (btree4))) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1598


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (Node (nat1) (btree3) (btree4))) (mainNew (zipper1)) = true -> false = lq (height (Node (nat1) (btree3) (btree4))) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 1599


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
---------------------------------------
forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Top)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Top))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1600


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (ZERO) (mainNew (Top)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Top)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Top))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat2) (btree5) (zipper2))) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Left (nat2) (btree5) (zipper2))) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Left (nat2) (btree5) (zipper2)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1601


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Left (nat2) (btree5) (zipper2))) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Left (nat2) (btree5) (zipper2))) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Left (nat2) (btree5) (zipper2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
---------------------------------------
true = true->false = true->lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true -> false = lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1602


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
---------------------------------------
true = true->false = true->lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true -> false = lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : true = true
---------------------------------------
false = true->lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true -> false = lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 1603


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : true = true
---------------------------------------
false = true->lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true -> false = lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5))

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat2) (btree5) (zipper2))) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Right (nat2) (btree5) (zipper2))) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Right (nat2) (btree5) (zipper2)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1604


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
---------------------------------------
lq (ZERO) (mainNew (Right (nat2) (btree5) (zipper2))) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Right (nat2) (btree5) (zipper2))) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Right (nat2) (btree5) (zipper2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
---------------------------------------
true = true->false = true->lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true -> false = lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 1605


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
---------------------------------------
true = true->false = true->lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true -> false = lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : true = true
---------------------------------------
false = true->lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true -> false = lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 1606


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
Base1 : btree1 = Empty
btree2 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree3)) (mainNew (zipper1)) = true -> false = lq (height (btree3)) (mainNew (zipper1))
IH2 : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true->false = true->lq (height (btree4)) (mainNew (zipper1)) = true -> false = lq (height (btree4)) (mainNew (zipper1))
Inductive1 : btree2 = Node (nat1) (btree3) (btree4)
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (ZERO) (mainNew (zipper2)) = true->false = true->lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true -> false = lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : true = true
---------------------------------------
false = true->lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true -> false = lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5))

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (Node (nat1) (btree3) (btree4))) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (Node (nat1) (btree3) (btree4))) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (Node (nat1) (btree3) (btree4))) = lq (height (btree2)) (mainNew (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 1607


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (height (Node (nat1) (btree3) (btree4))) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (Node (nat1) (btree3) (btree4))) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (Node (nat1) (btree3) (btree4))) = lq (height (btree2)) (mainNew (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree2)) (mainNew (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction btree2(rank:8.)
=================================================
Progress: 1608


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
---------------------------------------
forall (btree2:btree) (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree2)) (mainNew (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction btree2(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (Empty)) (height (repr (zipper1))) then height (repr (zipper1)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (Empty)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1609


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (Empty)) (height (repr (zipper1))) then height (repr (zipper1)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (Empty)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (Empty)) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (ZERO) (height (repr (zipper1))) then height (repr (zipper1)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:10.)
=================================================
Progress: 1610


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (ZERO) (height (repr (zipper1))) then height (repr (zipper1)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Top)) = true->lq (if lq (ZERO) (height (repr (Top))) then height (repr (Top)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (Top)) = true -> lq (height (repr (Top))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (Top))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 1611


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
Base2 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Top)) = true->lq (if lq (ZERO) (height (repr (Top))) then height (repr (Top)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (Top)) = true -> lq (height (repr (Top))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (Top))

3 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Left (nat2) (btree5) (zipper2))) = true->lq (if lq (ZERO) (height (repr (Left (nat2) (btree5) (zipper2)))) then height (repr (Left (nat2) (btree5) (zipper2))) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (Left (nat2) (btree5) (zipper2))) = true -> lq (height (repr (Left (nat2) (btree5) (zipper2)))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (Left (nat2) (btree5) (zipper2)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1612


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Left (nat2) (btree5) (zipper2))) = true->lq (if lq (ZERO) (height (repr (Left (nat2) (btree5) (zipper2)))) then height (repr (Left (nat2) (btree5) (zipper2))) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (Left (nat2) (btree5) (zipper2))) = true -> lq (height (repr (Left (nat2) (btree5) (zipper2)))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (Left (nat2) (btree5) (zipper2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
---------------------------------------
lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true->lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true->true = true -> lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 1613


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
---------------------------------------
lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true->lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true->true = true -> lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
---------------------------------------
lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true->true = true -> lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 1614


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
---------------------------------------
lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true->true = true -> lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
---------------------------------------
true = true -> lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 1615


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
---------------------------------------
true = true -> lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
---------------------------------------
lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (btree3)) (height (btree4))(rank:10.)
rewrite <- Cond2 in goal at 0(rank:17.)
case lq (height (btree5)) (height (repr (zipper2)))(rank:10.)
rewrite Cond2 in goal at 0(rank:17.)
rewrite <- Cond1 in goal at 0(rank:17.)
=================================================
Progress: 1616


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
---------------------------------------
lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (btree4))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (height (btree4))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (height (btree4)) = true
Cond3 : true = true
Case1 : lq (height (btree3)) (height (btree4)) = true
---------------------------------------
lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (height (btree4)) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (btree5)) (height (repr (zipper2)))(rank:11.)
rewrite Cond2 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:18.)
rewrite <- Cond2 in goal at 0(rank:18.)
=================================================
Progress: 1617


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
---------------------------------------
lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree5)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
Case1 : lq (height (btree5)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (btree3)) (height (btree4))(rank:11.)
rewrite Cond2 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:18.)
rewrite <- Cond2 in goal at 0(rank:18.)
=================================================
Progress: 1618


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree5))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (height (btree5))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree5))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
Cond1 : lq (height (btree5)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true
Cond2 : lq (if lq (height (btree3)) (SUCC (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (height (btree5))) = true
Cond3 : true = true
Cond4 : lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true
Case1 : lq (height (btree4)) (height (btree5)) = true
---------------------------------------
lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree6)) (height (btree5)) = false

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree6)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree5))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (height (btree5))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree5))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
Cond1 : lq (height (btree5)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true
Cond2 : lq (if lq (height (btree3)) (SUCC (height (repr (zipper2)))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (height (btree5))) = true
Cond3 : true = true
Cond4 : lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true
Case1 : lq (height (btree4)) (height (btree5)) = true
Case2 : lq (height (btree6)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree5)) = false

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 1619


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
Cond1 : lq (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true
Cond2 : lq (if lq (height (btree3)) (SUCC (height (repr (zipper2)))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4))) = true
Cond3 : true = true
Cond4 : lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true
Case1 : lq (height (btree6)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (if lq (height (btree4)) (height (btree5)) then height (btree5) else height (btree4)) = false

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree4)) (height (btree5))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (btree3:btree) (zipper1:zipper), lq (height (btree2)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree2)) = true->lq (height (btree1)) (height (btree2)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree2)) = lq (height (btree3)) (height (btree1))
btree1 : btree
Base1 : btree1 = Empty
btree3 : btree
btree2 : btree
nat1 : nat
btree4 : btree
btree5 : btree
IH1 : forall (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree4)) = true->lq (ZERO) (height (btree4)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = false
IH2 : forall (zipper1:zipper), lq (height (btree5)) (mainNew (zipper1)) = true->lq (if lq (height (btree3)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree3)) (height (btree5)) = true->lq (ZERO) (height (btree5)) = true->lq (height (btree3)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree5)) = false
Inductive1 : btree2 = Node (nat1) (btree4) (btree5)
zipper1 : zipper
nat2 : nat
btree6 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree5))) (mainNew (zipper2)) = true->lq (if lq (height (btree3)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree3)) (SUCC (height (btree5))) = true->true = true->lq (height (btree3)) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree5))) = false
Inductive2 : zipper1 = Left (nat2) (btree6) (zipper2)
Cond1 : lq (height (btree5)) (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6)) = true
Cond2 : lq (if lq (height (btree3)) (SUCC (height (repr (zipper2)))) then height (repr (Left (nat2) (btree6) (zipper2))) else height (btree3)) (SUCC (height (btree5))) = true
Cond3 : true = true
Cond4 : lq (height (btree3)) (SUCC (if lq (height (btree6)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree6))) = true
Case1 : lq (height (btree6)) (height (repr (zipper2))) = true
Case2 : lq (height (btree4)) (height (btree5)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree5)) = false

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 1620


1st goal of : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Cond1 : true = true
---------------------------------------
false = true

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (zipper1:zipper), lq (ZERO) (mainNew (zipper1)) = true -> false = lq (ZERO) (mainNew (zipper1))
zipper1 : zipper
nat1 : nat
btree1 : btree
zipper2 : zipper
IH1 : lq (ZERO) (mainNew (zipper2)) = true -> false = lq (ZERO) (mainNew (zipper2))
Inductive1 : zipper1 = Left (nat1) (btree1) (zipper2)
Cond1 : true = true
---------------------------------------
lq (ZERO) (mainNew (zipper2)) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: lq (ZERO) (mainNew (Top)) = true
Prop: lq (ZERO) (mainNew (Top)) = true
Prop: lq (ZERO) (mainNew (Top)) = true
asdf
previous tactics
simpl in goal
intro Cond1
=================================================
Progress: 1621


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (height (btree4))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (height (btree4)) = true
Cond3 : true = true
Case1 : lq (height (btree3)) (height (btree4)) = true
---------------------------------------
lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (height (btree4)) = true

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree5)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (height (btree4))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (height (repr (zipper2))) (height (btree4)) = true
Cond3 : true = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree5)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree4)) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite Cond2 in goal at 0(rank:19.)
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- Cond2 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:19.)
=================================================
Progress: 1622


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
Case1 : lq (height (btree5)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (btree4))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (height (btree4))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (height (repr (zipper2))) (height (btree4)) = true
Cond3 : true = true
Case1 : lq (height (btree5)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (height (btree4)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree4)) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite Cond2 in goal at 0(rank:19.)
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- Cond2 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:19.)
=================================================
Progress: 1623


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
---------------------------------------
lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 17.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
---------------------------------------
true = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 1624


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Left (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (btree5)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
---------------------------------------
true = true

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Right (nat2) (btree5) (zipper2))) = true->lq (if lq (ZERO) (height (repr (Right (nat2) (btree5) (zipper2)))) then height (repr (Right (nat2) (btree5) (zipper2))) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (Right (nat2) (btree5) (zipper2))) = true -> lq (height (repr (Right (nat2) (btree5) (zipper2)))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (Right (nat2) (btree5) (zipper2)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 20
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1625


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Right (nat2) (btree5) (zipper2))) = true->lq (if lq (ZERO) (height (repr (Right (nat2) (btree5) (zipper2)))) then height (repr (Right (nat2) (btree5) (zipper2))) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (Right (nat2) (btree5) (zipper2))) = true -> lq (height (repr (Right (nat2) (btree5) (zipper2)))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (Right (nat2) (btree5) (zipper2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
---------------------------------------
lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true->lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true->true = true -> lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 1626


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
---------------------------------------
lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true->lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true->true = true -> lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
---------------------------------------
lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true->true = true -> lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 1627


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
---------------------------------------
lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true->true = true -> lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
---------------------------------------
true = true -> lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:8.)
=================================================
Progress: 1628


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
---------------------------------------
true = true -> lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
---------------------------------------
lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (repr (zipper2))) (height (btree5))(rank:9.)
rewrite <- Cond2 in goal at 0(rank:16.)
case lq (height (btree3)) (height (btree4))(rank:9.)
rewrite Cond2 in goal at 0(rank:16.)
rewrite <- Cond1 in goal at 0(rank:16.)
=================================================
Progress: 1629


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
---------------------------------------
lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (repr (zipper2))) (height (btree5))(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
Case1 : lq (height (repr (zipper2))) (height (btree5)) = true
---------------------------------------
lq (height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (btree3)) (height (btree4))(rank:10.)
rewrite Cond2 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:17.)
rewrite <- Cond1 in goal at 0(rank:17.)
rewrite <- Cond2 in goal at 0(rank:17.)
=================================================
Progress: 1630


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
---------------------------------------
lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (btree4))(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (height (btree4))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (height (btree4)) = true
Cond3 : true = true
Case1 : lq (height (btree3)) (height (btree4)) = true
---------------------------------------
lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (height (btree4)) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (repr (zipper2))) (height (btree5))(rank:10.)
rewrite Cond2 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 0(rank:17.)
rewrite <- Cond1 in goal at 0(rank:17.)
rewrite <- Cond2 in goal at 0(rank:17.)
=================================================
Progress: 1631


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
Case1 : lq (height (repr (zipper2))) (height (btree5)) = true
---------------------------------------
lq (height (btree5)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (btree4))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (height (btree4))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (height (btree5)) (height (btree4)) = true
Cond3 : true = true
Case1 : lq (height (repr (zipper2))) (height (btree5)) = true
Case2 : lq (height (btree3)) (height (btree4)) = true
---------------------------------------
lq (height (btree5)) (height (btree4)) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite Cond2 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
=================================================
Progress: 1632


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (height (btree4))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (height (btree4)) = true
Cond3 : true = true
Case1 : lq (height (btree3)) (height (btree4)) = true
---------------------------------------
lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (height (btree4)) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (repr (zipper2))) (height (btree5))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (height (btree4))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (height (btree5)) (height (btree4)) = true
Cond3 : true = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (repr (zipper2))) (height (btree5)) = true
---------------------------------------
lq (height (btree5)) (height (btree4)) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite Cond2 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 0(rank:18.)
rewrite <- Case1 in goal at 0(rank:18.)
=================================================
Progress: 1633


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
---------------------------------------
lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 16.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 1634


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
Base1 : btree2 = Empty
zipper1 : zipper
nat2 : nat
btree5 : btree
zipper2 : zipper
IH3 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (ZERO) (height (repr (zipper2))) then height (repr (zipper2)) else height (Empty)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (ZERO) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (ZERO) (mainNew (zipper2))
Inductive2 : zipper1 = Right (nat2) (btree5) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree5)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree5)) = true
Cond2 : lq (if lq (height (repr (zipper2))) (height (btree5)) then height (btree5) else height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = true
Cond3 : true = true
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (Node (nat2) (btree5) (btree6))) (height (repr (zipper1))) then height (repr (zipper1)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (Node (nat2) (btree5) (btree6))) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (Node (nat2) (btree5) (btree6))) (mainNew (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 20
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 1635


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (Node (nat2) (btree5) (btree6))) (height (repr (zipper1))) then height (repr (zipper1)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (Node (nat2) (btree5) (btree6))) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (Node (nat2) (btree5) (btree6))) (mainNew (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper1))) then height (repr (zipper1)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction zipper1(rank:9.)
=================================================
Progress: 1636


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
---------------------------------------
forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper1))) then height (repr (zipper1)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction zipper1(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Top)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (Top))) then height (repr (Top)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (Top)) = true -> lq (height (repr (Top))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (Top))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 1637


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
Base1 : zipper1 = Top
---------------------------------------
lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Top)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (Top))) then height (repr (Top)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (Top)) = true -> lq (height (repr (Top))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (Top))

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Left (nat3) (btree7) (zipper2))) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (Left (nat3) (btree7) (zipper2)))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (Left (nat3) (btree7) (zipper2))) = true -> lq (height (repr (Left (nat3) (btree7) (zipper2)))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (Left (nat3) (btree7) (zipper2)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 1638


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
---------------------------------------
lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (Left (nat3) (btree7) (zipper2))) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (Left (nat3) (btree7) (zipper2)))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (Left (nat3) (btree7) (zipper2))) = true -> lq (height (repr (Left (nat3) (btree7) (zipper2)))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (Left (nat3) (btree7) (zipper2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
---------------------------------------
lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true->lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true -> lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 1639


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
---------------------------------------
lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true->lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true -> lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
---------------------------------------
lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true -> lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 1640


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
---------------------------------------
lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true -> lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
---------------------------------------
lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true -> lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:8.)
=================================================
Progress: 1641


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
---------------------------------------
lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true -> lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 8.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (height (btree3)) (height (btree4))(rank:9.)
case lq (height (btree5)) (height (btree6))(rank:9.)
case lq (height (btree7)) (height (repr (zipper2)))(rank:9.)
case lq (height (btree7)) (mainNew (zipper2))(rank:9.)
rewrite Cond3 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1642


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (btree4))(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (height (btree4)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (height (btree5)) (height (btree6))(rank:10.)
case lq (height (btree7)) (height (repr (zipper2)))(rank:10.)
case lq (height (btree7)) (mainNew (zipper2))(rank:10.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite Cond3 in goal at 0(rank:25.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 1643


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree5)) (height (btree6))(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (height (btree6)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree5)) (height (btree6)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (height (btree3)) (height (btree4))(rank:10.)
case lq (height (btree7)) (height (repr (zipper2)))(rank:10.)
case lq (height (btree7)) (mainNew (zipper2))(rank:10.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite Cond3 in goal at 0(rank:25.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 1644


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree7)) (height (repr (zipper2)))(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree7)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (height (btree3)) (height (btree4))(rank:10.)
case lq (height (btree5)) (height (btree6))(rank:10.)
case lq (height (btree7)) (mainNew (zipper2))(rank:10.)
rewrite Cond3 in goal at 0(rank:25.)
rewrite <- IH1 in goal at 0(rank:28.)
rewrite <- IH2 in goal at 0(rank:28.)
=================================================
Progress: 1645


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree7)) (mainNew (zipper2))(rank : 9.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2)) = true
Case1 : lq (height (btree7)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (height (btree3)) (height (btree4))(rank:10.)
rewrite Cond3 in goal at 0(rank:25.)
case lq (height (btree5)) (height (btree6))(rank:10.)
case lq (height (btree7)) (height (repr (zipper2)))(rank:10.)
=================================================
Progress: 1646


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (height (btree4)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree5)) (height (btree6))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (height (btree6)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree5)) (height (btree6)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (height (btree4)) = lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (btree7)) (height (repr (zipper2)))(rank:11.)
rewrite <- IH2 in goal at 0(rank:21.)
case lq (height (btree7)) (mainNew (zipper2))(rank:11.)
rewrite <- IH1 in goal at 0(rank:21.)
rewrite Cond3 in goal at 0(rank:26.)
=================================================
Progress: 1647


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (height (btree4)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree7)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree7)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree4)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (btree5)) (height (btree6))(rank:11.)
rewrite <- IH2 in goal at 0(rank:29.)
case lq (height (btree7)) (mainNew (zipper2))(rank:11.)
rewrite Cond3 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:29.)
=================================================
Progress: 1648


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (height (btree4)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree7)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree7)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (height (btree4)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (height (btree5)) (height (btree6))(rank:11.)
rewrite Cond3 in goal at 0(rank:26.)
case lq (height (btree7)) (height (repr (zipper2)))(rank:11.)
=================================================
Progress: 1649


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (height (btree6)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree5)) (height (btree6)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (btree4))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (height (btree6)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree5)) (height (btree6)) = true
Case2 : lq (height (btree3)) (height (btree4)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (height (btree4)) = lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (btree7)) (height (repr (zipper2)))(rank:11.)
rewrite <- IH2 in goal at 0(rank:21.)
case lq (height (btree7)) (mainNew (zipper2))(rank:11.)
rewrite <- IH1 in goal at 0(rank:21.)
rewrite Cond3 in goal at 0(rank:26.)
=================================================
Progress: 1650


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (height (btree6)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree5)) (height (btree6)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree7)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree5)) (height (btree6)) = true
Case2 : lq (height (btree7)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (btree3)) (height (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:21.)
case lq (height (btree7)) (mainNew (zipper2))(rank:11.)
rewrite Cond3 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 0(rank:29.)
=================================================
Progress: 1651


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (height (btree6)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree5)) (height (btree6)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree7)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree6)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (height (btree6)) (mainNew (zipper2)) = true
Case1 : lq (height (btree5)) (height (btree6)) = true
Case2 : lq (height (btree7)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (height (btree6)) (mainNew (zipper2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (height (btree3)) (height (btree4))(rank:11.)
rewrite <- IH1 in goal at 0(rank:21.)
rewrite Cond3 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 0(rank:21.)
rewrite <- IH4 in goal at 0(rank:21.)
case lq (height (btree7)) (height (repr (zipper2)))(rank:11.)
=================================================
Progress: 1652


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree7)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (btree4))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree7)) (height (repr (zipper2))) = true
Case2 : lq (height (btree3)) (height (btree4)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree4)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (btree5)) (height (btree6))(rank:11.)
rewrite <- IH2 in goal at 0(rank:29.)
case lq (height (btree7)) (mainNew (zipper2))(rank:11.)
rewrite Cond3 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:29.)
=================================================
Progress: 1653


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree7)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree5)) (height (btree6))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree7)) (height (repr (zipper2))) = true
Case2 : lq (height (btree5)) (height (btree6)) = true
---------------------------------------
lq (height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (btree3)) (height (btree4))(rank:11.)
rewrite <- IH2 in goal at 0(rank:21.)
case lq (height (btree7)) (mainNew (zipper2))(rank:11.)
rewrite Cond3 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 0(rank:29.)
=================================================
Progress: 1654


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree7)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree7)) (mainNew (zipper2))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2)) = true
Case1 : lq (height (btree7)) (height (repr (zipper2))) = true
Case2 : lq (height (btree7)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (height (btree3)) (height (btree4))(rank:11.)
rewrite Cond3 in goal at 0(rank:26.)
case lq (height (btree5)) (height (btree6))(rank:11.)
=================================================
Progress: 1655


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2)) = true
Case1 : lq (height (btree7)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree3)) (height (btree4))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2)) = true
Case1 : lq (height (btree7)) (mainNew (zipper2)) = true
Case2 : lq (height (btree3)) (height (btree4)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (height (btree4)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (height (btree5)) (height (btree6))(rank:11.)
rewrite Cond3 in goal at 0(rank:26.)
case lq (height (btree7)) (height (repr (zipper2)))(rank:11.)
=================================================
Progress: 1656


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2)) = true
Case1 : lq (height (btree7)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree5)) (height (btree6))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree6)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (height (btree6)) (mainNew (zipper2)) = true
Case1 : lq (height (btree7)) (mainNew (zipper2)) = true
Case2 : lq (height (btree5)) (height (btree6)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (height (btree6)) (mainNew (zipper2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (height (btree3)) (height (btree4))(rank:11.)
rewrite <- IH1 in goal at 0(rank:21.)
rewrite Cond3 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 0(rank:21.)
rewrite <- IH4 in goal at 0(rank:21.)
case lq (height (btree7)) (height (repr (zipper2)))(rank:11.)
=================================================
Progress: 1657


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2)) = true
Case1 : lq (height (btree7)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree7)) (height (repr (zipper2)))(rank : 10.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2)) = true
Case1 : lq (height (btree7)) (mainNew (zipper2)) = true
Case2 : lq (height (btree7)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (height (btree3)) (height (btree4))(rank:11.)
rewrite Cond3 in goal at 0(rank:26.)
case lq (height (btree5)) (height (btree6))(rank:11.)
=================================================
Progress: 1658


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (height (btree6)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree5)) (height (btree6)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (height (btree4)) = lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree7)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree5)) (height (btree6)) = true
Case3 : lq (height (btree7)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree4)) = lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (height (btree7)) (mainNew (zipper2))(rank:12.)
rewrite <- IH2 in goal at 0(rank:30.)
rewrite Cond3 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:30.)
=================================================
Progress: 1659


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (height (btree6)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree5)) (height (btree6)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (height (btree4)) = lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree7)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree6)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (height (btree6)) (mainNew (zipper2)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree5)) (height (btree6)) = true
Case3 : lq (height (btree7)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (height (btree4)) = lq (height (btree6)) (mainNew (zipper2))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (btree7)) (height (repr (zipper2)))(rank:12.)
rewrite <- IH1 in goal at 0(rank:22.)
rewrite Cond3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:22.)
rewrite <- IH4 in goal at 0(rank:22.)
=================================================
Progress: 1660


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree7)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree4)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree5)) (height (btree6))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree7)) (height (repr (zipper2))) = true
Case3 : lq (height (btree5)) (height (btree6)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree4)) = lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case lq (height (btree7)) (mainNew (zipper2))(rank:12.)
rewrite <- IH2 in goal at 0(rank:30.)
rewrite Cond3 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:30.)
=================================================
Progress: 1661


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree7)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree4)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree7)) (mainNew (zipper2))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree7)) (height (repr (zipper2))) = true
Case3 : lq (height (btree7)) (mainNew (zipper2)) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree4)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree5)) (height (btree6))(rank:12.)
rewrite Cond3 in goal at 0(rank:19.)
=================================================
Progress: 1662


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree7)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (height (btree4)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree5)) (height (btree6))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (height (btree6)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (height (btree6)) (mainNew (zipper2)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree7)) (mainNew (zipper2)) = true
Case3 : lq (height (btree5)) (height (btree6)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (height (btree4)) = lq (height (btree6)) (mainNew (zipper2))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (height (btree7)) (height (repr (zipper2)))(rank:12.)
rewrite <- IH1 in goal at 0(rank:22.)
rewrite Cond3 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:22.)
rewrite <- IH4 in goal at 0(rank:22.)
=================================================
Progress: 1663


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree7)) (mainNew (zipper2)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (height (btree4)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree7)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (mainNew (zipper2)) = true
Cond2 : lq (if lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2)) = true
Case1 : lq (height (btree3)) (height (btree4)) = true
Case2 : lq (height (btree7)) (mainNew (zipper2)) = true
Case3 : lq (height (btree7)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree4)) = lq (if lq (height (btree5)) (height (btree6)) then height (btree6) else height (btree5)) (mainNew (zipper2))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (height (btree5)) (height (btree6))(rank:12.)
rewrite Cond3 in goal at 0(rank:19.)
=================================================
Progress: 1664


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (height (btree6)) (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree5)) (height (btree6)) = true
Case2 : lq (height (btree3)) (height (btree4)) = true
---------------------------------------
lq (if lq (height (btree7)) (height (repr (zipper2))) then height (repr (zipper2)) else height (btree7)) (height (btree4)) = lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (height (btree7)) (height (repr (zipper2)))(rank : 11.)


1st goal of : forall (btree1:btree) (btree2:btree) (zipper1:zipper), lq (height (btree1)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree1)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree1)) = lq (height (btree2)) (mainNew (zipper1))
btree1 : btree
nat1 : nat
btree3 : btree
btree4 : btree
IH1 : forall (btree2:btree) (zipper1:zipper), lq (height (btree3)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree3)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree3)) = lq (height (btree2)) (mainNew (zipper1))
IH2 : forall (btree2:btree) (zipper1:zipper), lq (height (btree4)) (mainNew (zipper1)) = true->lq (if lq (height (btree2)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree2)) (height (btree4)) = true->lq (height (btree2)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (height (btree4)) = lq (height (btree2)) (mainNew (zipper1))
Inductive1 : btree1 = Node (nat1) (btree3) (btree4)
btree2 : btree
nat2 : nat
btree5 : btree
btree6 : btree
IH3 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree5)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree5)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree5)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree5)) (mainNew (zipper1))
IH4 : forall (zipper1:zipper), lq (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) (mainNew (zipper1)) = true->lq (if lq (height (btree6)) (height (repr (zipper1))) then height (repr (zipper1)) else height (btree6)) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = true->lq (height (btree6)) (mainNew (zipper1)) = true -> lq (height (repr (zipper1))) (SUCC (if lq (height (btree3)) (height (btree4)) then height (btree4) else height (btree3))) = lq (height (btree6)) (mainNew (zipper1))
Inductive2 : btree2 = Node (nat2) (btree5) (btree6)
zipper1 : zipper
nat3 : nat
btree7 : btree
zipper2 : zipper
IH5 : lq (SUCC (height (btree4))) (mainNew (zipper2)) = true->lq (if lq (SUCC (height (btree6))) (height (repr (zipper2))) then height (repr (zipper2)) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true->lq (SUCC (height (btree6))) (mainNew (zipper2)) = true -> lq (height (repr (zipper2))) (SUCC (height (btree4))) = lq (SUCC (height (btree6))) (mainNew (zipper2))
Inductive3 : zipper1 = Left (nat3) (btree7) (zipper2)
Cond1 : lq (height (btree4)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Cond2 : lq (if lq (height (btree6)) (height (repr (zipper2))) then height (repr (Left (nat3) (btree7) (zipper2))) else height (Node (nat2) (btree5) (btree6))) (SUCC (height (btree4))) = true
Cond3 : lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7)) = true
Case1 : lq (height (btree5)) (height (btree6)) = true
Case2 : lq (height (btree3)) (height (btree4)) = true
Case3 : lq (height (btree7)) (height (repr (zipper2))) = true
---------------------------------------
lq (height (repr (zipper2))) (height (btree4)) = lq (height (btree6)) (if lq (height (btree7)) (mainNew (zipper2)) then mainNew (zipper2) else height (btree7))

4 goal(s) more...

2 conjecture(s) more...
