Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:nat list) (y:nat list), (reverse (reverse (x)) @ y) = reverse (reverse ((x @ y)))(rank : 0.)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))

---------------------------------------
forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:4.)
=================================================
Progress: 2


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))

---------------------------------------
forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> induction nat_list1(rank : 4.)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (nat_list2:nat list), (reverse (reverse ((Nil))) @ nat_list2) = reverse (reverse (((Nil) @ nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 3


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (nat_list2:nat list), (reverse (reverse ((Nil))) @ nat_list2) = reverse (reverse (((Nil) @ nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (nat_list2:nat list), nat_list2 = reverse (reverse (nat_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction nat_list2(rank:5.)
=================================================
Progress: 4


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (nat_list2:nat list), nat_list2 = reverse (reverse (nat_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> induction nat_list2(rank : 5.)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
Base2 : nat_list2 = (Nil)
---------------------------------------
(Nil) = reverse (reverse ((Nil)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 5


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
Base2 : nat_list2 = (Nil)
---------------------------------------
(Nil) = reverse (reverse ((Nil)))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : nat_list3 = reverse (reverse (nat_list3))
Inductive1 : nat_list2 = (nat1::nat_list3)
---------------------------------------
(nat1::nat_list3) = reverse (reverse ((nat1::nat_list3)))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 6


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : nat_list3 = reverse (reverse (nat_list3))
Inductive1 : nat_list2 = (nat1::nat_list3)
---------------------------------------
(nat1::nat_list3) = reverse (reverse ((nat1::nat_list3)))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : nat_list3 = reverse (reverse (nat_list3))
Inductive1 : nat_list2 = (nat1::nat_list3)
---------------------------------------
(nat1::nat_list3) = reverse ((reverse (nat_list3) @ (nat1::(Nil))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
parent
(nat1::nat_list3)
lower
Cons(_, nat_list3)
upper
_
remove upper
nat_list3
remove lower
_
remove upper
Cons(nat1, nat_list3)
remove lower
Cons(nat1, _)
remove upper
Cons(nat1, Cons(nat2, nat_list4))
remove lower
Cons(nat1, Cons(nat2, _))
remove upper
Cons(nat1, Cons(nat2, Cons(nat3, nat_list5)))
remove lower
Cons(nat1, Cons(nat2, Cons(nat3, _)))
parent
(nat1::(Nil))
lower
Cons(_, Nil())
upper
reverse(@(reverse(nat_list3), _))
remove upper
Cons(nat1, Nil())
remove lower
Cons(nat1, Nil())
validate generalize_common_subterm_goal
Prop: (ZERO::(Nil)) = reverse ((reverse ((Nil)) @ (ZERO::(Nil))))
Prop: (SUCC (SUCC (ZERO))::(Nil)) = reverse ((reverse ((Nil)) @ (SUCC (SUCC (ZERO))::(Nil))))
Prop: (SUCC (SUCC (ZERO))::(Nil)) = reverse ((reverse ((Nil)) @ (SUCC (SUCC (ZERO))::(Nil))))
Lemma List
forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
End of Lemma List


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : nat_list3 = reverse (reverse (nat_list3))
Inductive1 : nat_list2 = (nat1::nat_list3)
---------------------------------------
(nat1::nat_list3) = reverse ((reverse (nat_list3) @ (nat1::(Nil))))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 7


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : nat_list3 = reverse (reverse (nat_list3))
Inductive1 : nat_list2 = (nat1::nat_list3)
---------------------------------------
(nat1::nat_list3) = reverse ((reverse (nat_list3) @ (nat1::(Nil))))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))(rank : 0.)


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))

---------------------------------------
forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:6.)
=================================================
Progress: 8


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))

---------------------------------------
forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat_list1(rank : 6.)


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (nat1:nat), (nat1::(Nil)) = reverse ((reverse ((Nil)) @ (nat1::(Nil))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 9


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (nat1:nat), (nat1::(Nil)) = reverse ((reverse ((Nil)) @ (nat1::(Nil))))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), (nat1::nat_list2) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (nat1:nat), (nat1::(nat2::nat_list2)) = reverse ((reverse ((nat2::nat_list2)) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 10


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), (nat1::nat_list2) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (nat1:nat), (nat1::(nat2::nat_list2)) = reverse ((reverse ((nat2::nat_list2)) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), (nat1::nat_list2) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (nat1:nat), (nat1::(nat2::nat_list2)) = reverse (((reverse (nat_list2) @ (nat2::(Nil))) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro nat1(rank:5.)
rewrite IH1 in goal at 0(rank:13.)
=================================================
Progress: 11


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), (nat1::nat_list2) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (nat1:nat), (nat1::(nat2::nat_list2)) = reverse (((reverse (nat_list2) @ (nat2::(Nil))) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5.)


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), (nat1::nat_list2) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
(nat1::(nat2::nat_list2)) = reverse (((reverse (nat_list2) @ (nat2::(Nil))) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:5.)
=================================================
Progress: 12


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), (nat1::nat_list2) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
(nat1::(nat2::nat_list2)) = reverse (((reverse (nat_list2) @ (nat2::(Nil))) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 5.)


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), (nat1::nat_list2) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
(nat1::reverse ((reverse (nat_list2) @ (nat2::(Nil))))) = reverse (((reverse (nat_list2) @ (nat2::(Nil))) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
rewrite IH1 in goal at 0
Prop: (ZERO::reverse ((Nil))) = reverse (((Nil) @ (ZERO::(Nil))))
Prop: (SUCC (SUCC (ZERO))::reverse ((Nil))) = reverse (((Nil) @ (SUCC (SUCC (ZERO))::(Nil))))
Prop: (ZERO::reverse ((Nil))) = reverse (((Nil) @ (ZERO::(Nil))))
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Prop: (ZERO::(SUCC (SUCC (ZERO))::(Nil))) = reverse (((reverse ((Nil)) @ (SUCC (SUCC (ZERO))::(Nil))) @ (ZERO::(Nil))))
Prop: (SUCC (ZERO)::(SUCC (SUCC (ZERO))::(Nil))) = reverse (((reverse ((Nil)) @ (SUCC (SUCC (ZERO))::(Nil))) @ (SUCC (ZERO)::(Nil))))
Prop: (ZERO::(ZERO::(ZERO::(Nil)))) = reverse (((reverse ((ZERO::(Nil))) @ (ZERO::(Nil))) @ (ZERO::(Nil))))
Lemma List
forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))
End of Lemma List


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), (nat1::nat_list2) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
(nat1::reverse ((reverse (nat_list2) @ (nat2::(Nil))))) = reverse (((reverse (nat_list2) @ (nat2::(Nil))) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 13


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), (nat1::nat_list2) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
(nat1::reverse ((reverse (nat_list2) @ (nat2::(Nil))))) = reverse (((reverse (nat_list2) @ (nat2::(Nil))) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))(rank : 0.)


1st goal of : forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))

---------------------------------------
forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8.)
=================================================
Progress: 14


1st goal of : forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))

---------------------------------------
forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 8.)


1st goal of : forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (nat1:nat), (nat1::reverse ((Nil))) = reverse (((Nil) @ (nat1::(Nil))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 15


1st goal of : forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (nat1:nat), (nat1::reverse ((Nil))) = reverse (((Nil) @ (nat1::(Nil))))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), (nat1::reverse (any_list2)) = reverse ((any_list2 @ (nat1::(Nil))))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (nat1:nat), (nat1::reverse ((any1::any_list2))) = reverse (((any1::any_list2) @ (nat1::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 16


1st goal of : forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), (nat1::reverse (any_list2)) = reverse ((any_list2 @ (nat1::(Nil))))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (nat1:nat), (nat1::reverse ((any1::any_list2))) = reverse (((any1::any_list2) @ (nat1::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), (nat1::reverse (any_list2)) = reverse ((any_list2 @ (nat1::(Nil))))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (nat1:nat), (nat1::(reverse (any_list2) @ (any1::(Nil)))) = (reverse ((any_list2 @ (nat1::(Nil)))) @ (any1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro nat1(rank:7.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 17


1st goal of : forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), (nat1::reverse (any_list2)) = reverse ((any_list2 @ (nat1::(Nil))))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (nat1:nat), (nat1::(reverse (any_list2) @ (any1::(Nil)))) = (reverse ((any_list2 @ (nat1::(Nil)))) @ (any1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), (nat1::reverse (any_list2)) = reverse ((any_list2 @ (nat1::(Nil))))
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
---------------------------------------
(nat1::(reverse (any_list2) @ (any1::(Nil)))) = (reverse ((any_list2 @ (nat1::(Nil)))) @ (any1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:7.)
=================================================
Progress: 18


1st goal of : forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), (nat1::reverse (any_list2)) = reverse ((any_list2 @ (nat1::(Nil))))
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
---------------------------------------
(nat1::(reverse (any_list2) @ (any1::(Nil)))) = (reverse ((any_list2 @ (nat1::(Nil)))) @ (any1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 7.)


1st goal of : forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), (nat1::reverse (any_list2)) = reverse ((any_list2 @ (nat1::(Nil))))
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
---------------------------------------
(nat1::(reverse (any_list2) @ (any1::(Nil)))) = ((nat1::reverse (any_list2)) @ (any1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 19


1st goal of : forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), (nat1::reverse (any_list2)) = reverse ((any_list2 @ (nat1::(Nil))))
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
---------------------------------------
(nat1::(reverse (any_list2) @ (any1::(Nil)))) = ((nat1::reverse (any_list2)) @ (any1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), (nat1::nat_list2) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
(nat1::reverse ((reverse (nat_list2) @ (nat2::(Nil))))) = reverse (((reverse (nat_list2) @ (nat2::(Nil))) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
original goal
forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
lemma
forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))
tactics
assert forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))
induction any_list1
reflexivity
simpl in goal
intro nat1
rewrite <- IH1 in goal at 0
reflexivity
Deduplication: 1
Tactic List : 4
rewrite lemma3 in goal at 0(rank:13.)
rewrite <- lemma3 in goal at 0(rank:21.)
rewrite <- lemma3 in goal at 2(rank:13.)
rewrite <- lemma3 in goal at 1(rank:21.)
=================================================
Progress: 20


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), (nat1::nat_list2) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (nat1:nat), (nat1::(nat2::nat_list2)) = reverse (((reverse (nat_list2) @ (nat2::(Nil))) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), (nat1::nat_list2) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (nat1:nat), (nat1::reverse ((reverse (nat_list2) @ (nat2::(Nil))))) = reverse (((reverse (nat_list2) @ (nat2::(Nil))) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
Prop: (ZERO::reverse ((Nil))) = reverse (((Nil) @ (ZERO::(Nil))))
Prop: (ZERO::reverse ((Nil))) = reverse (((Nil) @ (ZERO::(Nil))))
Prop: (ZERO::reverse ((6::(Nil)))) = reverse (((6::(Nil)) @ (ZERO::(Nil))))
previous tactics
simpl in goal
parent
(nat2::nat_list2)
lower
Cons(_, nat_list2)
upper
Cons(nat1, _)
remove upper
Cons(nat2, nat_list2)
remove lower
Cons(nat2, _)
remove upper
Cons(nat2, Cons(nat3, nat_list3))
remove lower
Cons(nat2, Cons(nat3, _))
remove upper
Cons(nat2, Cons(nat3, Cons(nat4, nat_list4)))
remove lower
Cons(nat2, Cons(nat3, Cons(nat4, _)))
parent
(nat2::(Nil))
lower
Cons(_, Nil())
upper
reverse(@(@(reverse(nat_list2), _), Cons(nat1, Nil())))
remove upper
Cons(nat2, Nil())
remove lower
Cons(nat2, Nil())
validate generalize_common_subterm_goal
Prop: (ZERO::(ZERO::(Nil))) = reverse (((reverse ((Nil)) @ (ZERO::(Nil))) @ (ZERO::(Nil))))
Prop: (ZERO::(ZERO::(ZERO::(SUCC (ZERO)::(Nil))))) = reverse (((reverse ((ZERO::(SUCC (ZERO)::(Nil)))) @ (ZERO::(Nil))) @ (ZERO::(Nil))))
Prop: (ZERO::(SUCC (SUCC (ZERO))::(Nil))) = reverse (((reverse ((Nil)) @ (SUCC (SUCC (ZERO))::(Nil))) @ (ZERO::(Nil))))
=================================================
Progress: 21


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), (nat1::nat_list2) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
(nat1::reverse ((reverse (nat_list2) @ (nat2::(Nil))))) = reverse (((reverse (nat_list2) @ (nat2::(Nil))) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), (nat1::nat_list2) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
reverse (((reverse (nat_list2) @ (nat2::(Nil))) @ (nat1::(Nil)))) = reverse (((reverse (nat_list2) @ (nat2::(Nil))) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 22


1st goal of : forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (nat1:nat), (nat1::nat_list2) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
reverse (((reverse (nat_list2) @ (nat2::(Nil))) @ (nat1::(Nil)))) = reverse (((reverse (nat_list2) @ (nat2::(Nil))) @ (nat1::(Nil))))

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : nat_list3 = reverse (reverse (nat_list3))
Inductive1 : nat_list2 = (nat1::nat_list3)
---------------------------------------
(nat1::nat_list3) = reverse ((reverse (nat_list3) @ (nat1::(Nil))))

1 goal(s) more...

0 conjecture(s) more...
original goal
forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
lemma
forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
tactics
assert forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
induction nat_list1
reflexivity
simpl in goal
intro nat1
rewrite IH1 in goal at 0
assert forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))
induction any_list1
reflexivity
simpl in goal
intro nat1
rewrite <- IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
Deduplication: 3
Tactic List : 5
rewrite lemma4 in goal at 0(rank:12.)
rewrite <- lemma3 in goal at 0(rank:12.)
rewrite lemma4 in goal at 2(rank:20.)
rewrite <- lemma4 in goal at 0(rank:12.)
rewrite lemma4 in goal at 1(rank:12.)
=================================================
Progress: 23


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : nat_list3 = reverse (reverse (nat_list3))
Inductive1 : nat_list2 = (nat1::nat_list3)
---------------------------------------
(nat1::nat_list3) = reverse ((reverse (nat_list3) @ (nat1::(Nil))))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 12.)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : nat_list3 = reverse (reverse (nat_list3))
Inductive1 : nat_list2 = (nat1::nat_list3)
---------------------------------------
reverse ((reverse (nat_list3) @ (nat1::(Nil)))) = reverse ((reverse (nat_list3) @ reverse ((reverse ((Nil)) @ (nat1::(Nil))))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 24


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : nat_list3 = reverse (reverse (nat_list3))
Inductive1 : nat_list2 = (nat1::nat_list3)
---------------------------------------
reverse ((reverse (nat_list3) @ (nat1::(Nil)))) = reverse ((reverse (nat_list3) @ reverse ((reverse ((Nil)) @ (nat1::(Nil))))))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), (reverse (reverse (nat_list3)) @ nat_list2) = reverse (reverse ((nat_list3 @ nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), (reverse (reverse ((nat1::nat_list3))) @ nat_list2) = reverse (reverse (((nat1::nat_list3) @ nat_list2)))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 25


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), (reverse (reverse (nat_list3)) @ nat_list2) = reverse (reverse ((nat_list3 @ nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), (reverse (reverse ((nat1::nat_list3))) @ nat_list2) = reverse (reverse (((nat1::nat_list3) @ nat_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), (reverse (reverse (nat_list3)) @ nat_list2) = reverse (reverse ((nat_list3 @ nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ nat_list2) = reverse ((reverse ((nat_list3 @ nat_list2)) @ (nat1::(Nil))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 10
intro nat_list2(rank:3.)
rewrite <- lemma3 in goal at 0(rank:11.)
rewrite <- lemma4 in goal at 0(rank:11.)
rewrite <- lemma3 in goal at 2(rank:19.)
rewrite lemma4 in goal at 1(rank:19.)
rewrite lemma4 in goal at 2(rank:19.)
rewrite <- lemma3 in goal at 1(rank:19.)
rewrite lemma4 in goal at 0(rank:19.)
rewrite <- lemma4 in goal at 1(rank:19.)
rewrite <- lemma4 in goal at 2(rank:19.)
=================================================
Progress: 26


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), (reverse (reverse (nat_list3)) @ nat_list2) = reverse (reverse ((nat_list3 @ nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ nat_list2) = reverse ((reverse ((nat_list3 @ nat_list2)) @ (nat1::(Nil))))

0 goal(s) more...

0 conjecture(s) more...
>>> intro nat_list2(rank : 3.)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), (reverse (reverse (nat_list3)) @ nat_list2) = reverse (reverse ((nat_list3 @ nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
---------------------------------------
(reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ nat_list2) = reverse ((reverse ((nat_list3 @ nat_list2)) @ (nat1::(Nil))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
rewrite <- lemma3 in goal at 0(rank:11.)
rewrite <- lemma4 in goal at 0(rank:11.)
rewrite lemma4 in goal at 0(rank:19.)
rewrite lemma4 in goal at 1(rank:19.)
rewrite <- lemma3 in goal at 1(rank:19.)
rewrite <- lemma3 in goal at 2(rank:19.)
rewrite <- lemma4 in goal at 1(rank:19.)
rewrite lemma4 in goal at 2(rank:19.)
rewrite <- lemma4 in goal at 2(rank:19.)
=================================================
Progress: 27


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), (reverse (reverse (nat_list3)) @ nat_list2) = reverse (reverse ((nat_list3 @ nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ nat_list2) = reverse ((reverse ((nat_list3 @ nat_list2)) @ (nat1::(Nil))))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 11.)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), (reverse (reverse (nat_list3)) @ nat_list2) = reverse (reverse ((nat_list3 @ nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), ((nat1::reverse (reverse (nat_list3))) @ nat_list2) = (nat1::reverse (reverse ((nat_list3 @ nat_list2))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 28


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), (reverse (reverse (nat_list3)) @ nat_list2) = reverse (reverse ((nat_list3 @ nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), ((nat1::reverse (reverse (nat_list3))) @ nat_list2) = (nat1::reverse (reverse ((nat_list3 @ nat_list2))))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), (reverse (reverse (nat_list3)) @ nat_list2) = reverse (reverse ((nat_list3 @ nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), (nat1::(reverse (reverse (nat_list3)) @ nat_list2)) = (nat1::reverse (reverse ((nat_list3 @ nat_list2))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
intro nat_list2(rank:3.)
rewrite <- IH1 in goal at 0(rank:11.)
rewrite lemma4 in goal at 1(rank:19.)
rewrite lemma4 in goal at 2(rank:19.)
rewrite lemma3 in goal at 0(rank:19.)
rewrite lemma4 in goal at 0(rank:19.)
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 29


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), (reverse (reverse (nat_list3)) @ nat_list2) = reverse (reverse ((nat_list3 @ nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), (nat1::(reverse (reverse (nat_list3)) @ nat_list2)) = (nat1::reverse (reverse ((nat_list3 @ nat_list2))))

0 goal(s) more...

0 conjecture(s) more...
>>> intro nat_list2(rank : 3.)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), (reverse (reverse (nat_list3)) @ nat_list2) = reverse (reverse ((nat_list3 @ nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
---------------------------------------
(nat1::(reverse (reverse (nat_list3)) @ nat_list2)) = (nat1::reverse (reverse ((nat_list3 @ nat_list2))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite IH1 in goal at 0(rank:11.)
rewrite <- IH1 in goal at 0(rank:11.)
rewrite lemma4 in goal at 2(rank:19.)
rewrite lemma4 in goal at 0(rank:19.)
rewrite lemma4 in goal at 1(rank:19.)
rewrite lemma3 in goal at 0(rank:19.)
=================================================
Progress: 30


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), (reverse (reverse (nat_list3)) @ nat_list2) = reverse (reverse ((nat_list3 @ nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ nat_list2) = reverse ((reverse ((nat_list3 @ nat_list2)) @ (nat1::(Nil))))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lemma4 in goal at 0(rank : 11.)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), (reverse (reverse (nat_list3)) @ nat_list2) = reverse (reverse ((nat_list3 @ nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), ((nat1::nat_list3) @ nat_list2) = (nat1::(nat_list3 @ nat_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0.)
=================================================
Progress: 31


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), (reverse (reverse (nat_list3)) @ nat_list2) = reverse (reverse ((nat_list3 @ nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), ((nat1::nat_list3) @ nat_list2) = (nat1::(nat_list3 @ nat_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0.)


No conjecture
Proof Success
Proof
assert forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
induction nat_list1
simpl in goal
induction nat_list2
reflexivity
simpl in goal
assert forall (nat1:nat) (nat_list1:nat list), (nat1::nat_list1) = reverse ((reverse (nat_list1) @ (nat1::(Nil))))
induction nat_list1
reflexivity
simpl in goal
intro nat1
rewrite IH1 in goal at 0
assert forall (any_list1:any list) (nat1:nat), (nat1::reverse (any_list1)) = reverse ((any_list1 @ (nat1::(Nil))))
induction any_list1
reflexivity
simpl in goal
intro nat1
rewrite <- IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
reflexivity
simpl in goal
rewrite <- lemma4 in goal at 0
reflexivity
Qed
File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
