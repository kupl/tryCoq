Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:nat list) (y:nat list), (reverse (reverse (x)) @ y) = reverse (reverse ((x @ y)))(rank : 0)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))

---------------------------------------
forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))

---------------------------------------
forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> induction nat_list1(rank : 4)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (nat_list2:nat list), (reverse (reverse ((Nil))) @ nat_list2) = reverse (reverse (((Nil) @ nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 3


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (nat_list2:nat list), (reverse (reverse ((Nil))) @ nat_list2) = reverse (reverse (((Nil) @ nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (nat_list2:nat list), nat_list2 = reverse (reverse (nat_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro nat_list2(rank:4)
=================================================
Progress: 4


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (nat_list2:nat list), nat_list2 = reverse (reverse (nat_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> intro nat_list2(rank : 4)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
---------------------------------------
nat_list2 = reverse (reverse (nat_list2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat_list2
New Env

;;
Lemma List
forall (nat_list2:nat list), nat_list2 = reverse (reverse (nat_list2))
End of Lemma List


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
---------------------------------------
nat_list2 = reverse (reverse (nat_list2))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 5


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), (reverse (reverse (nat_list1)) @ nat_list2) = reverse (reverse ((nat_list1 @ nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
---------------------------------------
nat_list2 = reverse (reverse (nat_list2))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat_list2:nat list), nat_list2 = reverse (reverse (nat_list2))(rank : 0)


1st goal of : forall (nat_list1:nat list), nat_list1 = reverse (reverse (nat_list1))

---------------------------------------
forall (nat_list1:nat list), nat_list1 = reverse (reverse (nat_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat_list1(rank:5)
=================================================
Progress: 6


1st goal of : forall (nat_list1:nat list), nat_list1 = reverse (reverse (nat_list1))

---------------------------------------
forall (nat_list1:nat list), nat_list1 = reverse (reverse (nat_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat_list1(rank : 5)


1st goal of : forall (nat_list1:nat list), nat_list1 = reverse (reverse (nat_list1))
nat_list1 : nat list
---------------------------------------
nat_list1 = reverse (reverse (nat_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
New Env

;;
Lemma List
forall (nat_list1:nat list), nat_list1 = reverse (reverse (nat_list1))
End of Lemma List


1st goal of : forall (nat_list1:nat list), nat_list1 = reverse (reverse (nat_list1))
nat_list1 : nat list
---------------------------------------
nat_list1 = reverse (reverse (nat_list1))

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 7


1st goal of : forall (nat_list1:nat list), nat_list1 = reverse (reverse (nat_list1))
nat_list1 : nat list
---------------------------------------
nat_list1 = reverse (reverse (nat_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat_list1:nat list), nat_list1 = reverse (reverse (nat_list1))(rank : 0)


1st goal of : forall (nat_list1:nat list), nat_list1 = reverse (reverse (nat_list1))

---------------------------------------
forall (nat_list1:nat list), nat_list1 = reverse (reverse (nat_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat_list1(rank:7)
=================================================
Progress: 8


1st goal of : forall (nat_list1:nat list), nat_list1 = reverse (reverse (nat_list1))

---------------------------------------
forall (nat_list1:nat list), nat_list1 = reverse (reverse (nat_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat_list1(rank : 7)


1st goal of : forall (nat_list1:nat list), nat_list1 = reverse (reverse (nat_list1))
nat_list1 : nat list
---------------------------------------
nat_list1 = reverse (reverse (nat_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
File "_none_", lines 81-83, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 81-83, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 196, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
