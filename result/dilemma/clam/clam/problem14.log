Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:nat list), sorted (sort (x)) = true(rank : 0)


1st goal of : forall (nat_list1:nat list), sorted (sort (nat_list1)) = true

---------------------------------------
forall (nat_list1:nat list), sorted (sort (nat_list1)) = true

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (nat_list1:nat list), sorted (sort (nat_list1)) = true

---------------------------------------
forall (nat_list1:nat list), sorted (sort (nat_list1)) = true

0 goal(s) more...

0 conjecture(s) more...
>>> induction nat_list1(rank : 4)


1st goal of : forall (nat_list1:nat list), sorted (sort (nat_list1)) = true
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
sorted (sort ((Nil))) = true

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (nat_list1:nat list), sorted (sort (nat_list1)) = true
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
sorted (sort ((Nil))) = true

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (nat_list1:nat list), sorted (sort (nat_list1)) = true
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : sorted (sort (nat_list2)) = true
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
sorted (sort ((nat1::nat_list2))) = true

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (nat_list1:nat list), sorted (sort (nat_list1)) = true
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : sorted (sort (nat_list2)) = true
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
sorted (sort ((nat1::nat_list2))) = true

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (nat_list1:nat list), sorted (sort (nat_list1)) = true
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : sorted (sort (nat_list2)) = true
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
sorted (insort (nat1) (sort (nat_list2))) = true

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:3)
=================================================
Progress: 5


1st goal of : forall (nat_list1:nat list), sorted (sort (nat_list1)) = true
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : sorted (sort (nat_list2)) = true
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
sorted (insort (nat1) (sort (nat_list2))) = true

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 3)


1st goal of : forall (nat_list1:nat list), sorted (sort (nat_list1)) = true
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : sorted (sort (nat_list2)) = true
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
sorted (insort (nat1) (sort (nat_list2))) = sorted (sort (nat_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
New Env

;;
Lemma List
forall (arg1:any list) (nat1:nat), sorted (insort (nat1) (arg1)) = sorted (arg1)
End of Lemma List


1st goal of : forall (nat_list1:nat list), sorted (sort (nat_list1)) = true
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : sorted (sort (nat_list2)) = true
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
sorted (insort (nat1) (sort (nat_list2))) = sorted (sort (nat_list2))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (nat_list1:nat list), sorted (sort (nat_list1)) = true
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : sorted (sort (nat_list2)) = true
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
sorted (insort (nat1) (sort (nat_list2))) = sorted (sort (nat_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg1:any list) (nat1:nat), sorted (insort (nat1) (arg1)) = sorted (arg1)(rank : 0)


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)

---------------------------------------
forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6)
=================================================
Progress: 7


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)

---------------------------------------
forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (nat1:nat), sorted (insort (nat1) ((Nil))) = sorted ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 8


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (nat1:nat), sorted (insort (nat1) ((Nil))) = sorted ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), sorted (insort (nat1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (nat1:nat), sorted (insort (nat1) ((any1::any_list2))) = sorted ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 9


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), sorted (insort (nat1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (nat1:nat), sorted (insort (nat1) ((any1::any_list2))) = sorted ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), sorted (insort (nat1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (nat1:nat), sorted (if match (nat1, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat1::(any1::any_list2)) else (any1::insort (nat1) (any_list2))) = sorted ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5)
=================================================
Progress: 10


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), sorted (insort (nat1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (nat1:nat), sorted (if match (nat1, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat1::(any1::any_list2)) else (any1::insort (nat1) (any_list2))) = sorted ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5)


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), sorted (insort (nat1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
---------------------------------------
sorted (if match (nat1, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat1::(any1::any_list2)) else (any1::insort (nat1) (any_list2))) = sorted ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (nat1, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6)
=================================================
Progress: 11


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), sorted (insort (nat1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
---------------------------------------
sorted (if match (nat1, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (nat1::(any1::any_list2)) else (any1::insort (nat1) (any_list2))) = sorted ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (nat1, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), sorted (insort (nat1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
Case1 : match (nat1, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if if match (any1, nat1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true then sorted ((any1::any_list2)) else false = sorted ((any1::any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if match (any1, nat1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true(rank:7)
=================================================
Progress: 12


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), sorted (insort (nat1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
Case1 : match (nat1, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if if match (any1, nat1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true then sorted ((any1::any_list2)) else false = sorted ((any1::any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case if match (any1, nat1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), sorted (insort (nat1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
Case1 : match (nat1, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : if match (any1, nat1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true = true
---------------------------------------
sorted ((any1::any_list2)) = sorted ((any1::any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 13


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), sorted (insort (nat1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
Case1 : match (nat1, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : if match (any1, nat1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true = true
---------------------------------------
sorted ((any1::any_list2)) = sorted ((any1::any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), sorted (insort (nat1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
Case1 : match (nat1, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : if match (any1, nat1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true = false
---------------------------------------
false = sorted ((any1::any_list2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
intro nat1
case match (nat1, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
case if match (any1, nat1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true
reflexivity
New Env

;;
Lemma List
forall (any1:any) (any_list2:any list), false = sorted ((any1::any_list2))
End of Lemma List


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), sorted (insort (nat1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
Case1 : match (nat1, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : if match (any1, nat1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true = false
---------------------------------------
false = sorted ((any1::any_list2))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 14


1st goal of : forall (any_list1:any list) (nat1:nat), sorted (insort (nat1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat), sorted (insort (nat1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
nat1 : nat
Case1 : match (nat1, any1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : if match (any1, nat1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true = false
---------------------------------------
false = sorted ((any1::any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list2:any list), false = sorted ((any1::any_list2))(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any1(rank:7)
intro any_list1(rank:7)
=================================================
Progress: 15


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))
any1 : any
---------------------------------------
forall (any_list1:any list), false = sorted ((any1::any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro any_list1(rank:7)
=================================================
Progress: 16


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))
any_list1 : any list
---------------------------------------
forall (any1:any), false = sorted ((any1::any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
New Env

;;
Lemma List
forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))
End of Lemma List


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))
any_list1 : any list
---------------------------------------
forall (any1:any), false = sorted ((any1::any_list1))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 17


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))
any_list1 : any list
---------------------------------------
forall (any1:any), false = sorted ((any1::any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any1(rank:9)
intro any_list1(rank:9)
=================================================
Progress: 18


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))
any1 : any
---------------------------------------
forall (any_list1:any list), false = sorted ((any1::any_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))
any1 : any
any_list1 : any list
---------------------------------------
false = sorted ((any1::any_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 19


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any1(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))
any1 : any
---------------------------------------
forall (any_list1:any list), false = sorted ((any1::any_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro any_list1(rank:9)
=================================================
Progress: 20


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))

---------------------------------------
forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))
any_list1 : any list
---------------------------------------
forall (any1:any), false = sorted ((any1::any_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 21


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))
any1 : any
---------------------------------------
forall (any_list1:any list), false = sorted ((any1::any_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list), false = sorted ((any1::any_list1))
any1 : any
any_list1 : any list
---------------------------------------
false = sorted ((any1::any_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
File "_none_", lines 81-83, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 81-83, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 196, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
