Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:int list), sorted (sort (x)) = true(rank : 0)


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true

---------------------------------------
forall (int_list1:int list), sorted (sort (int_list1)) = true

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4)
=================================================
Progress: 2


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true

---------------------------------------
forall (int_list1:int list), sorted (sort (int_list1)) = true

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4)


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
sorted (sort ((Nil))) = true

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
sorted (sort ((Nil))) = true

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : sorted (sort (int_list2)) = true
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
sorted (sort ((int1::int_list2))) = true

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : sorted (sort (int_list2)) = true
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
sorted (sort ((int1::int_list2))) = true

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : sorted (sort (int_list2)) = true
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
sorted (insort (int1) (sort (int_list2))) = true

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:3)
=================================================
Progress: 5


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : sorted (sort (int_list2)) = true
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
sorted (insort (int1) (sort (int_list2))) = true

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 3)


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : sorted (sort (int_list2)) = true
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
sorted (insort (int1) (sort (int_list2))) = sorted (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
Lemma : forall (arg1:any list) (int1:int), sorted (insort (int1) (arg1)) = sorted (arg1)
File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
Fatal error: exception Invalid_argument("Random.int")
Raised at Stdlib.invalid_arg in file "stdlib.ml", line 30, characters 20-45
Called from Dilemma__Validate.generator in file "lib/validate.ml", line 46, characters 19-56
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", line 94, characters 34-52
Called from Stdlib__List.map in file "list.ml", line 87, characters 15-19
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", lines 91-96, characters 8-14
Called from Stdlib__List.init in file "list.ml", line 66, characters 13-16
Called from Dilemma__Validate.validate in file "lib/validate.ml", lines 89-100, characters 4-11
Called from Dilemma__Finder.naive_generalize in file "lib/finder.ml", line 1235, characters 10-64
Called from Dilemma__Finder.advanced_generalize in file "lib/finder.ml", line 1308, characters 50-72
Called from Dilemma__Finder.find_lemma in file "lib/finder.ml", line 1328, characters 22-43
Called from Stdlib__List.map in file "list.ml", line 83, characters 15-19
Called from Dilemma__Engine.progress in file "lib/engine.ml", line 197, characters 12-77
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 291, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
