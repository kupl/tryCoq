Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:int list), sorted (sort (x)) = true(rank : 0.)


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true

---------------------------------------
forall (int_list1:int list), sorted (sort (int_list1)) = true

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction int_list1(rank:4.)
=================================================
Progress: 2


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true

---------------------------------------
forall (int_list1:int list), sorted (sort (int_list1)) = true

0 goal(s) more...

0 conjecture(s) more...
>>> induction int_list1(rank : 4.)


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
sorted (sort ((Nil))) = true

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 3


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
Base1 : int_list1 = (Nil)
---------------------------------------
sorted (sort ((Nil))) = true

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : sorted (sort (int_list2)) = true
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
sorted (sort ((int1::int_list2))) = true

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 4


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : sorted (sort (int_list2)) = true
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
sorted (sort ((int1::int_list2))) = true

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : sorted (sort (int_list2)) = true
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
sorted (insort (int1) (sort (int_list2))) = true

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:3.)
=================================================
Progress: 5


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : sorted (sort (int_list2)) = true
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
sorted (insort (int1) (sort (int_list2))) = true

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 3.)


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : sorted (sort (int_list2)) = true
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
sorted (insort (int1) (sort (int_list2))) = sorted (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
Prop: sorted (insort (-0) ((0::(Nil)))) = sorted ((0::(Nil)))
Prop: sorted (insort (-0) ((Nil))) = sorted ((Nil))
Prop: sorted (insort (0) ((Nil))) = sorted ((Nil))
previous tactics
simpl in goal
parent
insort (int1) (sort (int_list2))
lower
insort(_, sort(int_list2))
upper
sorted(_)
remove upper
sort(int_list2)
remove lower
sort(int_list2)
remove upper
insort(int1, sort(int_list2))
remove lower
insort(int1, sort(int_list2))
remove upper
insort(int1, insort(int2, sort(int_list3)))
remove lower
insort(int1, insort(int2, sort(int_list3)))
remove upper
insort(int1, insort(int2, insort(int3, sort(int_list4))))
remove lower
insort(int1, insort(int2, insort(int3, sort(int_list4))))
validate generalize_common_subterm_goal
Prop: sorted (insort (0) (sort ((0::(Nil))))) = true
Prop: sorted (insort (0) (sort ((0::(Nil))))) = true
Prop: sorted (insort (0) (sort ((Nil)))) = true
Lemma List
forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)
End of Lemma List


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : sorted (sort (int_list2)) = true
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
sorted (insort (int1) (sort (int_list2))) = sorted (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (int_list1:int list), sorted (sort (int_list1)) = true
int_list1 : int list
int1 : int
int_list2 : int list
IH1 : sorted (sort (int_list2)) = true
Inductive1 : int_list1 = (int1::int_list2)
---------------------------------------
sorted (insort (int1) (sort (int_list2))) = sorted (sort (int_list2))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)(rank : 0.)


1st goal of : forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)

---------------------------------------
forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:6.)
=================================================
Progress: 7


1st goal of : forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)

---------------------------------------
forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int1:int), sorted (insort (int1) ((Nil))) = sorted ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 8


1st goal of : forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (int1:int), sorted (insort (int1) ((Nil))) = sorted ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), sorted (insort (int1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int1:int), sorted (insort (int1) ((any1::any_list2))) = sorted ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 9


1st goal of : forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), sorted (insort (int1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int1:int), sorted (insort (int1) ((any1::any_list2))) = sorted ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), sorted (insort (int1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int1:int), sorted (if match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int1::(any1::any_list2)) else (any1::insort (int1) (any_list2))) = sorted ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro int1(rank:5.)
=================================================
Progress: 10


1st goal of : forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), sorted (insort (int1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (int1:int), sorted (if match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int1::(any1::any_list2)) else (any1::insort (int1) (any_list2))) = sorted ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro int1(rank : 5.)


1st goal of : forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), sorted (insort (int1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
int1 : int
---------------------------------------
sorted (if match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int1::(any1::any_list2)) else (any1::insort (int1) (any_list2))) = sorted ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:6.)
=================================================
Progress: 11


1st goal of : forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), sorted (insort (int1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
int1 : int
---------------------------------------
sorted (if match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int1::(any1::any_list2)) else (any1::insort (int1) (any_list2))) = sorted ((any1::any_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> case match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), sorted (insort (int1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
int1 : int
Case1 : match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if if match (any1, int1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true then sorted ((any1::any_list2)) else false = sorted ((any1::any_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if match (any1, int1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true(rank:7.)
=================================================
Progress: 12


1st goal of : forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), sorted (insort (int1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
int1 : int
Case1 : match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if if match (any1, int1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true then sorted ((any1::any_list2)) else false = sorted ((any1::any_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> case if match (any1, int1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true(rank : 7.)


1st goal of : forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), sorted (insort (int1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
int1 : int
Case1 : match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : if match (any1, int1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true = true
---------------------------------------
sorted ((any1::any_list2)) = sorted ((any1::any_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 13


1st goal of : forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), sorted (insort (int1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
int1 : int
Case1 : match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : if match (any1, int1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true = true
---------------------------------------
sorted ((any1::any_list2)) = sorted ((any1::any_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (any_list1:any list) (int1:int), sorted (insort (int1) (any_list1)) = sorted (any_list1)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (int1:int), sorted (insort (int1) (any_list2)) = sorted (any_list2)
Inductive1 : any_list1 = (any1::any_list2)
int1 : int
Case1 : match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case2 : if match (any1, int1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true = false
---------------------------------------
false = sorted ((any1::any_list2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
intro int1
case match (int1, any1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true
case if match (any1, int1) with
| (Zero, Pos _) -> true
| (Zero, _) -> false
| (Neg _, Zero) -> true
| (_, Zero) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then false else true
reflexivity
validate generalize_common_subterm_goal
Prop: false = sorted ((3::(Nil)))
Prop: false = sorted ((0::(Nil)))
Prop: false = sorted ((4::(Nil)))
asdf
File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 284, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
