Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (x:nat list) (y:nat list), reverse (reverse ((x @ y))) = (reverse (reverse (x)) @ reverse (reverse (y)))(rank : 0)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))

---------------------------------------
forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction nat_list1(rank:12)
induction nat_list2(rank:12)
=================================================
Progress: 2


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))

---------------------------------------
forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> induction nat_list1(rank : 12)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (nat_list2:nat list), reverse (reverse (((Nil) @ nat_list2))) = (reverse (reverse ((Nil))) @ reverse (reverse (nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 3


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (nat_list2:nat list), reverse (reverse (((Nil) @ nat_list2))) = (reverse (reverse ((Nil))) @ reverse (reverse (nat_list2)))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), reverse (reverse (((nat1::nat_list3) @ nat_list2))) = (reverse (reverse ((nat1::nat_list3))) @ reverse (reverse (nat_list2)))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 4


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), reverse (reverse (((nat1::nat_list3) @ nat_list2))) = (reverse (reverse ((nat1::nat_list3))) @ reverse (reverse (nat_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), reverse ((reverse ((nat_list3 @ nat_list2)) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ reverse (reverse (nat_list2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction nat_list2(rank:4)
=================================================
Progress: 5


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
forall (nat_list2:nat list), reverse ((reverse ((nat_list3 @ nat_list2)) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ reverse (reverse (nat_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> induction nat_list2(rank : 4)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
---------------------------------------
reverse ((reverse ((nat_list3 @ (Nil))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ reverse (reverse ((Nil))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 6


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
---------------------------------------
reverse ((reverse ((nat_list3 @ (Nil))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ reverse (reverse ((Nil))))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
---------------------------------------
reverse ((reverse ((nat_list3 @ (Nil))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (arg1:any list) (nat_list3:nat list), reverse ((reverse ((nat_list3 @ (Nil))) @ arg1)) = (reverse ((reverse (nat_list3) @ arg1)) @ (Nil))
Model : arg1: (2::(Nil)), nat_list3: (Nil)
Model : arg1: (Nil), nat_list3: (ZERO::(Nil))
Model : arg1: (Nil), nat_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((reverse (((Nil) @ (Nil))) @ (2::(Nil)))) = (reverse ((reverse ((Nil)) @ (2::(Nil)))) @ (Nil))
reverse ((reverse (((ZERO::(Nil)) @ (Nil))) @ (Nil))) = (reverse ((reverse ((ZERO::(Nil))) @ (Nil))) @ (Nil))
reverse ((reverse (((Nil) @ (Nil))) @ (Nil))) = (reverse ((reverse ((Nil)) @ (Nil))) @ (Nil))
Simplifying took 0.000298 seconds
Result : true
advanced_generalize done


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
---------------------------------------
reverse ((reverse ((nat_list3 @ (Nil))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 7


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
---------------------------------------
reverse ((reverse ((nat_list3 @ (Nil))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg1:any list) (nat_list3:nat list), reverse ((reverse ((nat_list3 @ (Nil))) @ arg1)) = (reverse ((reverse (nat_list3) @ arg1)) @ (Nil))(rank : 0)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))

---------------------------------------
forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:6)
=================================================
Progress: 8


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))

---------------------------------------
forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat_list1(rank : 6)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), reverse ((reverse (((Nil) @ (Nil))) @ any_list1)) = (reverse ((reverse ((Nil)) @ any_list1)) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 9


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), reverse ((reverse (((Nil) @ (Nil))) @ any_list1)) = (reverse ((reverse ((Nil)) @ any_list1)) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), reverse (any_list1) = (reverse (any_list1) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:7)
=================================================
Progress: 10


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), reverse (any_list1) = (reverse (any_list1) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 7)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
reverse ((Nil)) = (reverse ((Nil)) @ (Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 11


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
reverse ((Nil)) = (reverse ((Nil)) @ (Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
reverse ((any1::any_list2)) = (reverse ((any1::any_list2)) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 12


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
reverse ((any1::any_list2)) = (reverse ((any1::any_list2)) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(reverse (any_list2) @ (any1::(Nil))) = ((reverse (any_list2) @ (any1::(Nil))) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (arg2:any list), arg2 = (arg2 @ (Nil))
Model : arg2: (0::(5::(Nil)))
Model : arg2: (Nil)
Model : arg2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(0::(5::(Nil))) = ((0::(5::(Nil))) @ (Nil))
(Nil) = ((Nil) @ (Nil))
(Nil) = ((Nil) @ (Nil))
Simplifying took 0.000151 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(reverse (any_list2) @ (any1::(Nil))) = ((reverse (any_list2) @ (any1::(Nil))) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 13


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(reverse (any_list2) @ (any1::(Nil))) = ((reverse (any_list2) @ (any1::(Nil))) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (arg2:any list), arg2 = (arg2 @ (Nil))(rank : 0)


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))

---------------------------------------
forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 14


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))

---------------------------------------
forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
(Nil) = ((Nil) @ (Nil))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 15


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
(Nil) = ((Nil) @ (Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = ((any1::any_list2) @ (Nil))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 16


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = ((any1::any_list2) @ (Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::(any_list2 @ (Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:7)
=================================================
Progress: 17


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::(any_list2 @ (Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 7)


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::any_list2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 18


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::any_list2)

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(reverse (any_list2) @ (any1::(Nil))) = ((reverse (any_list2) @ (any1::(Nil))) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- lemma3 in goal at 0(rank:6)
=================================================
Progress: 19


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(reverse (any_list2) @ (any1::(Nil))) = ((reverse (any_list2) @ (any1::(Nil))) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 6)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(reverse (any_list2) @ (any1::(Nil))) = (reverse (any_list2) @ (any1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 20


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(reverse (any_list2) @ (any1::(Nil))) = (reverse (any_list2) @ (any1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
forall (any_list1:any list), reverse ((reverse (((nat1::nat_list2) @ (Nil))) @ any_list1)) = (reverse ((reverse ((nat1::nat_list2)) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 21


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
forall (any_list1:any list), reverse ((reverse (((nat1::nat_list2) @ (Nil))) @ any_list1)) = (reverse ((reverse ((nat1::nat_list2)) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
forall (any_list1:any list), reverse (((reverse ((nat_list2 @ (Nil))) @ (nat1::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro any_list1(rank:5)
rewrite <- lemma3 in goal at 0(rank:13)
rewrite <- lemma3 in goal at 1(rank:13)
rewrite <- lemma3 in goal at 2(rank:13)
=================================================
Progress: 22


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
forall (any_list1:any list), reverse (((reverse ((nat_list2 @ (Nil))) @ (nat1::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any_list1(rank : 5)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
any_list1 : any list
---------------------------------------
reverse (((reverse ((nat_list2 @ (Nil))) @ (nat1::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- lemma3 in goal at 0(rank:13)
rewrite <- lemma3 in goal at 1(rank:13)
rewrite <- lemma3 in goal at 2(rank:13)
=================================================
Progress: 23


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))

---------------------------------------
forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))

0 goal(s) more...

0 conjecture(s) more...
>>> induction nat_list2(rank : 12)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
---------------------------------------
forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ (Nil)))) = (reverse (reverse (nat_list1)) @ reverse (reverse ((Nil))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 24


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
---------------------------------------
forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ (Nil)))) = (reverse (reverse (nat_list1)) @ reverse (reverse ((Nil))))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
---------------------------------------
forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ (Nil)))) = (reverse (reverse (nat_list1)) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:5)
=================================================
Progress: 25


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
---------------------------------------
forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ (Nil)))) = (reverse (reverse (nat_list1)) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> induction nat_list1(rank : 5)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
nat_list1 : nat list
Base2 : nat_list1 = (Nil)
---------------------------------------
reverse (reverse (((Nil) @ (Nil)))) = (reverse (reverse ((Nil))) @ (Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 26


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
nat_list1 : nat list
Base2 : nat_list1 = (Nil)
---------------------------------------
reverse (reverse (((Nil) @ (Nil)))) = (reverse (reverse ((Nil))) @ (Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : reverse (reverse ((nat_list3 @ (Nil)))) = (reverse (reverse (nat_list3)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
reverse (reverse (((nat1::nat_list3) @ (Nil)))) = (reverse (reverse ((nat1::nat_list3))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 27


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : reverse (reverse ((nat_list3 @ (Nil)))) = (reverse (reverse (nat_list3)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
reverse (reverse (((nat1::nat_list3) @ (Nil)))) = (reverse (reverse ((nat1::nat_list3))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : reverse (reverse ((nat_list3 @ (Nil)))) = (reverse (reverse (nat_list3)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
reverse ((reverse ((nat_list3 @ (Nil))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (arg3:any list) (nat_list3:nat list), reverse ((reverse ((nat_list3 @ (Nil))) @ arg3)) = (reverse ((reverse (nat_list3) @ arg3)) @ (Nil))
Model : arg3: (Nil), nat_list3: (Nil)
Model : arg3: (7::(Nil)), nat_list3: (Nil)
Model : arg3: (5::(Nil)), nat_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((reverse (((Nil) @ (Nil))) @ (Nil))) = (reverse ((reverse ((Nil)) @ (Nil))) @ (Nil))
reverse ((reverse (((Nil) @ (Nil))) @ (7::(Nil)))) = (reverse ((reverse ((Nil)) @ (7::(Nil)))) @ (Nil))
reverse ((reverse (((Nil) @ (Nil))) @ (5::(Nil)))) = (reverse ((reverse ((Nil)) @ (5::(Nil)))) @ (Nil))
Simplifying took 0.000427 seconds
Result : true
advanced_generalize done


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : reverse (reverse ((nat_list3 @ (Nil)))) = (reverse (reverse (nat_list3)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
reverse ((reverse ((nat_list3 @ (Nil))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 28


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : reverse (reverse ((nat_list3 @ (Nil)))) = (reverse (reverse (nat_list3)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
reverse ((reverse ((nat_list3 @ (Nil))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg3:any list) (nat_list3:nat list), reverse ((reverse ((nat_list3 @ (Nil))) @ arg3)) = (reverse ((reverse (nat_list3) @ arg3)) @ (Nil))(rank : 0)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))

---------------------------------------
forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:6)
=================================================
Progress: 29


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))

---------------------------------------
forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat_list1(rank : 6)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), reverse ((reverse (((Nil) @ (Nil))) @ any_list1)) = (reverse ((reverse ((Nil)) @ any_list1)) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 30


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), reverse ((reverse (((Nil) @ (Nil))) @ any_list1)) = (reverse ((reverse ((Nil)) @ any_list1)) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), reverse (any_list1) = (reverse (any_list1) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:7)
=================================================
Progress: 31


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list), reverse (any_list1) = (reverse (any_list1) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 7)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
reverse ((Nil)) = (reverse ((Nil)) @ (Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 32


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
reverse ((Nil)) = (reverse ((Nil)) @ (Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
reverse ((any1::any_list2)) = (reverse ((any1::any_list2)) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 33


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
reverse ((any1::any_list2)) = (reverse ((any1::any_list2)) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(reverse (any_list2) @ (any1::(Nil))) = ((reverse (any_list2) @ (any1::(Nil))) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (arg4:any list), arg4 = (arg4 @ (Nil))
Model : arg4: (Nil)
Model : arg4: (Nil)
Model : arg4: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(Nil) = ((Nil) @ (Nil))
(Nil) = ((Nil) @ (Nil))
(Nil) = ((Nil) @ (Nil))
Simplifying took 0.000031 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(reverse (any_list2) @ (any1::(Nil))) = ((reverse (any_list2) @ (any1::(Nil))) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 34


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(reverse (any_list2) @ (any1::(Nil))) = ((reverse (any_list2) @ (any1::(Nil))) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (arg4:any list), arg4 = (arg4 @ (Nil))(rank : 0)


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))

---------------------------------------
forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 35


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))

---------------------------------------
forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
(Nil) = ((Nil) @ (Nil))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 36


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
(Nil) = ((Nil) @ (Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = ((any1::any_list2) @ (Nil))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 37


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = ((any1::any_list2) @ (Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::(any_list2 @ (Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:7)
=================================================
Progress: 38


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::(any_list2 @ (Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 7)


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::any_list2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 39


1st goal of : forall (any_list1:any list), any_list1 = (any_list1 @ (Nil))
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : any_list2 = (any_list2 @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(any1::any_list2) = (any1::any_list2)

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(reverse (any_list2) @ (any1::(Nil))) = ((reverse (any_list2) @ (any1::(Nil))) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- lemma3 in goal at 0(rank:6)
=================================================
Progress: 40


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(reverse (any_list2) @ (any1::(Nil))) = ((reverse (any_list2) @ (any1::(Nil))) @ (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 6)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(reverse (any_list2) @ (any1::(Nil))) = (reverse (any_list2) @ (any1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 41


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : reverse (any_list2) = (reverse (any_list2) @ (Nil))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
(reverse (any_list2) @ (any1::(Nil))) = (reverse (any_list2) @ (any1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
forall (any_list1:any list), reverse ((reverse (((nat1::nat_list2) @ (Nil))) @ any_list1)) = (reverse ((reverse ((nat1::nat_list2)) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 42


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
forall (any_list1:any list), reverse ((reverse (((nat1::nat_list2) @ (Nil))) @ any_list1)) = (reverse ((reverse ((nat1::nat_list2)) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
forall (any_list1:any list), reverse (((reverse ((nat_list2 @ (Nil))) @ (nat1::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro any_list1(rank:5)
rewrite <- lemma3 in goal at 0(rank:13)
rewrite <- lemma3 in goal at 1(rank:13)
rewrite <- lemma3 in goal at 2(rank:13)
=================================================
Progress: 43


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
forall (any_list1:any list), reverse (((reverse ((nat_list2 @ (Nil))) @ (nat1::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro any_list1(rank : 5)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
any_list1 : any list
---------------------------------------
reverse (((reverse ((nat_list2 @ (Nil))) @ (nat1::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- lemma3 in goal at 0(rank:13)
rewrite <- lemma3 in goal at 1(rank:13)
rewrite <- lemma3 in goal at 2(rank:13)
=================================================
Progress: 44


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
forall (any_list1:any list), reverse (((reverse ((nat_list2 @ (Nil))) @ (nat1::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 13)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
forall (any_list1:any list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1)) = reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 45


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
forall (any_list1:any list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1)) = reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
---------------------------------------
reverse ((reverse ((nat_list3 @ (Nil))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 5
Tactic List : 5
rewrite lemma4 in goal at 0(rank:12)
rewrite <- lemma3 in goal at 1(rank:12)
rewrite <- lemma3 in goal at 2(rank:12)
rewrite <- lemma4 in goal at 0(rank:12)
rewrite <- lemma3 in goal at 0(rank:12)
=================================================
Progress: 46


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
---------------------------------------
reverse ((reverse ((nat_list3 @ (Nil))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 12)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
---------------------------------------
(reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil)) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 47


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
---------------------------------------
(reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil)) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
nat2 : nat
nat_list4 : nat list
IH2 : reverse ((reverse ((nat_list3 @ nat_list4)) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ reverse (reverse (nat_list4)))
Inductive2 : nat_list2 = (nat2::nat_list4)
---------------------------------------
reverse ((reverse ((nat_list3 @ (nat2::nat_list4))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ reverse (reverse ((nat2::nat_list4))))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 48


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
nat2 : nat
nat_list4 : nat list
IH2 : reverse ((reverse ((nat_list3 @ nat_list4)) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ reverse (reverse (nat_list4)))
Inductive2 : nat_list2 = (nat2::nat_list4)
---------------------------------------
reverse ((reverse ((nat_list3 @ (nat2::nat_list4))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ reverse (reverse ((nat2::nat_list4))))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
nat2 : nat
nat_list4 : nat list
IH2 : reverse ((reverse ((nat_list3 @ nat_list4)) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ reverse (reverse (nat_list4)))
Inductive2 : nat_list2 = (nat2::nat_list4)
---------------------------------------
reverse ((reverse ((nat_list3 @ (nat2::nat_list4))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ reverse ((reverse (nat_list4) @ (nat2::(Nil)))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
reflexivity
rewrite <- lemma3 in goal at 0
reflexivity
simpl in goal
rewrite <- lemma3 in goal at 0
reflexivity
rewrite lemma4 in goal at 0
reflexivity
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (arg5:any list) (nat2:nat) (nat_list3:nat list) (nat_list4:nat list), reverse ((reverse ((nat_list3 @ (nat2::nat_list4))) @ arg5)) = (reverse ((reverse (nat_list3) @ arg5)) @ reverse ((reverse (nat_list4) @ (nat2::(Nil)))))
Model : arg5: (Nil), nat2: ZERO, nat_list3: (ZERO::(Nil)), nat_list4: (Nil)
Model : arg5: (4::(Nil)), nat2: ZERO, nat_list3: (ZERO::(Nil)), nat_list4: (Nil)
Model : arg5: (Nil), nat2: SUCC (ZERO), nat_list3: (Nil), nat_list4: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil))) = (reverse ((reverse ((ZERO::(Nil))) @ (Nil))) @ reverse ((reverse ((Nil)) @ (ZERO::(Nil)))))
reverse ((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (4::(Nil)))) = (reverse ((reverse ((ZERO::(Nil))) @ (4::(Nil)))) @ reverse ((reverse ((Nil)) @ (ZERO::(Nil)))))
reverse ((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil))) = (reverse ((reverse ((Nil)) @ (Nil))) @ reverse ((reverse ((Nil)) @ (SUCC (ZERO)::(Nil)))))
Simplifying took 0.000959 seconds
Result : true
advanced_generalize done


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
nat2 : nat
nat_list4 : nat list
IH2 : reverse ((reverse ((nat_list3 @ nat_list4)) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ reverse (reverse (nat_list4)))
Inductive2 : nat_list2 = (nat2::nat_list4)
---------------------------------------
reverse ((reverse ((nat_list3 @ (nat2::nat_list4))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ reverse ((reverse (nat_list4) @ (nat2::(Nil)))))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 49


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list2:nat list), reverse (reverse ((nat_list3 @ nat_list2))) = (reverse (reverse (nat_list3)) @ reverse (reverse (nat_list2)))
Inductive1 : nat_list1 = (nat1::nat_list3)
nat_list2 : nat list
nat2 : nat
nat_list4 : nat list
IH2 : reverse ((reverse ((nat_list3 @ nat_list4)) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ reverse (reverse (nat_list4)))
Inductive2 : nat_list2 = (nat2::nat_list4)
---------------------------------------
reverse ((reverse ((nat_list3 @ (nat2::nat_list4))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ reverse ((reverse (nat_list4) @ (nat2::(Nil)))))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg5:any list) (nat2:nat) (nat_list3:nat list) (nat_list4:nat list), reverse ((reverse ((nat_list3 @ (nat2::nat_list4))) @ arg5)) = (reverse ((reverse (nat_list3) @ arg5)) @ reverse ((reverse (nat_list4) @ (nat2::(Nil)))))(rank : 0)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))

---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:6)
=================================================
Progress: 50


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))

---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat_list1(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat_list2:nat list), reverse ((reverse (((Nil) @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse ((Nil)) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 51


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat_list2:nat list), reverse ((reverse (((Nil) @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse ((Nil)) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1)) = (reverse (any_list1) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:7)
=================================================
Progress: 52


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1)) = (reverse (any_list1) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
>>> induction any_list1(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ (Nil))) = (reverse ((Nil)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 53


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ (Nil))) = (reverse ((Nil)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ (Nil))) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat_list2(rank:8)
=================================================
Progress: 54


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
---------------------------------------
forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ (Nil))) = reverse ((reverse (nat_list2) @ (nat1::(Nil))))

2 goal(s) more...

1 conjecture(s) more...
>>> induction nat_list2(rank : 8)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
nat_list2 : nat list
Base3 : nat_list2 = (Nil)
---------------------------------------
forall (nat1:nat), reverse (((reverse ((Nil)) @ (nat1::(Nil))) @ (Nil))) = reverse ((reverse ((Nil)) @ (nat1::(Nil))))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 55


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
nat_list2 : nat list
Base3 : nat_list2 = (Nil)
---------------------------------------
forall (nat1:nat), reverse (((reverse ((Nil)) @ (nat1::(Nil))) @ (Nil))) = reverse ((reverse ((Nil)) @ (nat1::(Nil))))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (nat1:nat), reverse (((reverse (nat_list3) @ (nat1::(Nil))) @ (Nil))) = reverse ((reverse (nat_list3) @ (nat1::(Nil))))
Inductive1 : nat_list2 = (nat2::nat_list3)
---------------------------------------
forall (nat1:nat), reverse (((reverse ((nat2::nat_list3)) @ (nat1::(Nil))) @ (Nil))) = reverse ((reverse ((nat2::nat_list3)) @ (nat1::(Nil))))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 56


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (nat1:nat), reverse (((reverse (nat_list3) @ (nat1::(Nil))) @ (Nil))) = reverse ((reverse (nat_list3) @ (nat1::(Nil))))
Inductive1 : nat_list2 = (nat2::nat_list3)
---------------------------------------
forall (nat1:nat), reverse (((reverse ((nat2::nat_list3)) @ (nat1::(Nil))) @ (Nil))) = reverse ((reverse ((nat2::nat_list3)) @ (nat1::(Nil))))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (nat1:nat), reverse (((reverse (nat_list3) @ (nat1::(Nil))) @ (Nil))) = reverse ((reverse (nat_list3) @ (nat1::(Nil))))
Inductive1 : nat_list2 = (nat2::nat_list3)
---------------------------------------
forall (nat1:nat), reverse ((((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil))) @ (Nil))) = reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro nat1(rank:7)
rewrite <- lemma3 in goal at 0(rank:15)
=================================================
Progress: 57


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (nat1:nat), reverse (((reverse (nat_list3) @ (nat1::(Nil))) @ (Nil))) = reverse ((reverse (nat_list3) @ (nat1::(Nil))))
Inductive1 : nat_list2 = (nat2::nat_list3)
---------------------------------------
forall (nat1:nat), reverse ((((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil))) @ (Nil))) = reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil))))

2 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (nat1:nat), reverse (((reverse (nat_list3) @ (nat1::(Nil))) @ (Nil))) = reverse ((reverse (nat_list3) @ (nat1::(Nil))))
Inductive1 : nat_list2 = (nat2::nat_list3)
nat1 : nat
---------------------------------------
reverse ((((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil))) @ (Nil))) = reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- lemma3 in goal at 0(rank:7)
=================================================
Progress: 58


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (nat1:nat), reverse (((reverse (nat_list3) @ (nat1::(Nil))) @ (Nil))) = reverse ((reverse (nat_list3) @ (nat1::(Nil))))
Inductive1 : nat_list2 = (nat2::nat_list3)
nat1 : nat
---------------------------------------
reverse ((((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil))) @ (Nil))) = reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (nat1:nat), reverse (((reverse (nat_list3) @ (nat1::(Nil))) @ (Nil))) = reverse ((reverse (nat_list3) @ (nat1::(Nil))))
Inductive1 : nat_list2 = (nat2::nat_list3)
nat1 : nat
---------------------------------------
reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil)))) = reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 59


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
Base2 : any_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (nat1:nat), reverse (((reverse (nat_list3) @ (nat1::(Nil))) @ (Nil))) = reverse ((reverse (nat_list3) @ (nat1::(Nil))))
Inductive1 : nat_list2 = (nat2::nat_list3)
nat1 : nat
---------------------------------------
reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil)))) = reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil))))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list2)) = (reverse (any_list2) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ (any1::any_list2))) = (reverse ((any1::any_list2)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 60


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list2)) = (reverse (any_list2) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ (any1::any_list2))) = (reverse ((any1::any_list2)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list2)) = (reverse (any_list2) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat_list2(rank:7)
=================================================
Progress: 61


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list2)) = (reverse (any_list2) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
Inductive1 : any_list1 = (any1::any_list2)
---------------------------------------
forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat_list2(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list2)) = (reverse (any_list2) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
Inductive1 : any_list1 = (any1::any_list2)
nat_list2 : nat list
Base2 : nat_list2 = (Nil)
---------------------------------------
forall (nat1:nat), reverse (((reverse ((Nil)) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse ((reverse ((Nil)) @ (nat1::(Nil)))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 62


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list2)) = (reverse (any_list2) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
Inductive1 : any_list1 = (any1::any_list2)
nat_list2 : nat list
Base2 : nat_list2 = (Nil)
---------------------------------------
forall (nat1:nat), reverse (((reverse ((Nil)) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse ((reverse ((Nil)) @ (nat1::(Nil)))))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list2)) = (reverse (any_list2) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
Inductive1 : any_list1 = (any1::any_list2)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH2 : forall (nat1:nat), reverse (((reverse (nat_list3) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))
Inductive2 : nat_list2 = (nat2::nat_list3)
---------------------------------------
forall (nat1:nat), reverse (((reverse ((nat2::nat_list3)) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse ((reverse ((nat2::nat_list3)) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 63


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list2)) = (reverse (any_list2) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
Inductive1 : any_list1 = (any1::any_list2)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH2 : forall (nat1:nat), reverse (((reverse (nat_list3) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))
Inductive2 : nat_list2 = (nat2::nat_list3)
---------------------------------------
forall (nat1:nat), reverse (((reverse ((nat2::nat_list3)) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse ((reverse ((nat2::nat_list3)) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list2)) = (reverse (any_list2) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
Inductive1 : any_list1 = (any1::any_list2)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH2 : forall (nat1:nat), reverse (((reverse (nat_list3) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))
Inductive2 : nat_list2 = (nat2::nat_list3)
---------------------------------------
forall (nat1:nat), reverse ((((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:6)
=================================================
Progress: 64


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list2)) = (reverse (any_list2) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
Inductive1 : any_list1 = (any1::any_list2)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH2 : forall (nat1:nat), reverse (((reverse (nat_list3) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))
Inductive2 : nat_list2 = (nat2::nat_list3)
---------------------------------------
forall (nat1:nat), reverse ((((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list2)) = (reverse (any_list2) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
Inductive1 : any_list1 = (any1::any_list2)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH2 : forall (nat1:nat), reverse (((reverse (nat_list3) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))
Inductive2 : nat_list2 = (nat2::nat_list3)
nat1 : nat
---------------------------------------
reverse ((((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any1:any) (any_list2:any list) (arg6:any list), reverse ((arg6 @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse (arg6))
Model : any1: 4, any_list2: (Nil), arg6: (8::(Nil))
Model : any1: 8, any_list2: (Nil), arg6: (5::(0::(Nil)))
Model : any1: 0, any_list2: (Nil), arg6: (3::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((8::(Nil)) @ (4::(Nil)))) = ((reverse ((Nil)) @ (4::(Nil))) @ reverse ((8::(Nil))))
reverse (((5::(0::(Nil))) @ (8::(Nil)))) = ((reverse ((Nil)) @ (8::(Nil))) @ reverse ((5::(0::(Nil)))))
reverse (((3::(Nil)) @ (0::(Nil)))) = ((reverse ((Nil)) @ (0::(Nil))) @ reverse ((3::(Nil))))
Simplifying took 0.001203 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list2)) = (reverse (any_list2) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
Inductive1 : any_list1 = (any1::any_list2)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH2 : forall (nat1:nat), reverse (((reverse (nat_list3) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))
Inductive2 : nat_list2 = (nat2::nat_list3)
nat1 : nat
---------------------------------------
reverse ((((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 65


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list1 @ (nat1::nat_list2))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
any_list1 : any list
any1 : any
any_list2 : any list
IH1 : forall (nat1:nat) (nat_list2:nat list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list2)) = (reverse (any_list2) @ reverse ((reverse (nat_list2) @ (nat1::(Nil)))))
Inductive1 : any_list1 = (any1::any_list2)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH2 : forall (nat1:nat), reverse (((reverse (nat_list3) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))
Inductive2 : nat_list2 = (nat2::nat_list3)
nat1 : nat
---------------------------------------
reverse ((((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil))) @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any_list2:any list) (arg6:any list), reverse ((arg6 @ (any1::any_list2))) = ((reverse (any_list2) @ (any1::(Nil))) @ reverse (arg6))(rank : 0)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:8)
=================================================
Progress: 66


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))

---------------------------------------
forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list1(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::(Nil)))) = ((reverse ((Nil)) @ (any1::(Nil))) @ reverse (any_list2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 67


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::(Nil)))) = ((reverse ((Nil)) @ (any1::(Nil))) @ reverse (any_list2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:9)
=================================================
Progress: 68


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::(Nil)))) = (any1::reverse (any_list2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction any_list2(rank : 9)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any), reverse (((Nil) @ (any1::(Nil)))) = (any1::reverse ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 69


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
Base2 : any_list2 = (Nil)
---------------------------------------
forall (any1:any), reverse (((Nil) @ (any1::(Nil)))) = (any1::reverse ((Nil)))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any), reverse ((any_list3 @ (any1::(Nil)))) = (any1::reverse (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
---------------------------------------
forall (any1:any), reverse (((any2::any_list3) @ (any1::(Nil)))) = (any1::reverse ((any2::any_list3)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 70


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any), reverse ((any_list3 @ (any1::(Nil)))) = (any1::reverse (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
---------------------------------------
forall (any1:any), reverse (((any2::any_list3) @ (any1::(Nil)))) = (any1::reverse ((any2::any_list3)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any), reverse ((any_list3 @ (any1::(Nil)))) = (any1::reverse (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
---------------------------------------
forall (any1:any), (reverse ((any_list3 @ (any1::(Nil)))) @ (any2::(Nil))) = (any1::(reverse (any_list3) @ (any2::(Nil))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any1(rank:8)
rewrite IH1 in goal at 0(rank:16)
=================================================
Progress: 71


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any), reverse ((any_list3 @ (any1::(Nil)))) = (any1::reverse (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
---------------------------------------
forall (any1:any), (reverse ((any_list3 @ (any1::(Nil)))) @ (any2::(Nil))) = (any1::(reverse (any_list3) @ (any2::(Nil))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any), reverse ((any_list3 @ (any1::(Nil)))) = (any1::reverse (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
any1 : any
---------------------------------------
(reverse ((any_list3 @ (any1::(Nil)))) @ (any2::(Nil))) = (any1::(reverse (any_list3) @ (any2::(Nil))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:8)
=================================================
Progress: 72


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any), reverse ((any_list3 @ (any1::(Nil)))) = (any1::reverse (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
any1 : any
---------------------------------------
(reverse ((any_list3 @ (any1::(Nil)))) @ (any2::(Nil))) = (any1::(reverse (any_list3) @ (any2::(Nil))))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any), reverse ((any_list3 @ (any1::(Nil)))) = (any1::reverse (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
any1 : any
---------------------------------------
((any1::reverse (any_list3)) @ (any2::(Nil))) = (any1::(reverse (any_list3) @ (any2::(Nil))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 73


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
any_list2 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any), reverse ((any_list3 @ (any1::(Nil)))) = (any1::reverse (any_list3))
Inductive1 : any_list2 = (any2::any_list3)
any1 : any
---------------------------------------
((any1::reverse (any_list3)) @ (any2::(Nil))) = (any1::(reverse (any_list3) @ (any2::(Nil))))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
---------------------------------------
forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::(any2::any_list3)))) = ((reverse ((any2::any_list3)) @ (any1::(Nil))) @ reverse (any_list2))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 74


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
---------------------------------------
forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::(any2::any_list3)))) = ((reverse ((any2::any_list3)) @ (any1::(Nil))) @ reverse (any_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
---------------------------------------
forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::(any2::any_list3)))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse (any_list2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction any_list2(rank:8)
=================================================
Progress: 75


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
---------------------------------------
forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::(any2::any_list3)))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse (any_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction any_list2(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any), reverse (((Nil) @ (any1::(any2::any_list3)))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 76


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any), reverse (((Nil) @ (any1::(any2::any_list3)))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse ((Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any), ((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ (Nil))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any1(rank:8)
rewrite <- lemma3 in goal at 0(rank:16)
=================================================
Progress: 77


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
---------------------------------------
forall (any1:any), ((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ (Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any1 : any
---------------------------------------
((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ (Nil))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- lemma3 in goal at 0(rank:8)
=================================================
Progress: 78


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any1 : any
---------------------------------------
((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ (Nil))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 8)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any1 : any
---------------------------------------
((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) = ((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 79


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
Base1 : any_list2 = (Nil)
any1 : any
---------------------------------------
((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) = ((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
any3 : any
any_list4 : any list
IH2 : forall (any1:any), reverse ((any_list4 @ (any1::(any2::any_list3)))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse (any_list4))
Inductive2 : any_list2 = (any3::any_list4)
---------------------------------------
forall (any1:any), reverse (((any3::any_list4) @ (any1::(any2::any_list3)))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse ((any3::any_list4)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 80


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
any3 : any
any_list4 : any list
IH2 : forall (any1:any), reverse ((any_list4 @ (any1::(any2::any_list3)))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse (any_list4))
Inductive2 : any_list2 = (any3::any_list4)
---------------------------------------
forall (any1:any), reverse (((any3::any_list4) @ (any1::(any2::any_list3)))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse ((any3::any_list4)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
any3 : any
any_list4 : any list
IH2 : forall (any1:any), reverse ((any_list4 @ (any1::(any2::any_list3)))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse (any_list4))
Inductive2 : any_list2 = (any3::any_list4)
---------------------------------------
forall (any1:any), (reverse ((any_list4 @ (any1::(any2::any_list3)))) @ (any3::(Nil))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ (reverse (any_list4) @ (any3::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any1(rank:7)
rewrite IH2 in goal at 0(rank:15)
=================================================
Progress: 81


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
any3 : any
any_list4 : any list
IH2 : forall (any1:any), reverse ((any_list4 @ (any1::(any2::any_list3)))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse (any_list4))
Inductive2 : any_list2 = (any3::any_list4)
---------------------------------------
forall (any1:any), (reverse ((any_list4 @ (any1::(any2::any_list3)))) @ (any3::(Nil))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ (reverse (any_list4) @ (any3::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any1(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
any3 : any
any_list4 : any list
IH2 : forall (any1:any), reverse ((any_list4 @ (any1::(any2::any_list3)))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse (any_list4))
Inductive2 : any_list2 = (any3::any_list4)
any1 : any
---------------------------------------
(reverse ((any_list4 @ (any1::(any2::any_list3)))) @ (any3::(Nil))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ (reverse (any_list4) @ (any3::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:7)
=================================================
Progress: 82


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
any3 : any
any_list4 : any list
IH2 : forall (any1:any), reverse ((any_list4 @ (any1::(any2::any_list3)))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse (any_list4))
Inductive2 : any_list2 = (any3::any_list4)
any1 : any
---------------------------------------
(reverse ((any_list4 @ (any1::(any2::any_list3)))) @ (any3::(Nil))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ (reverse (any_list4) @ (any3::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 7)


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
any3 : any
any_list4 : any list
IH2 : forall (any1:any), reverse ((any_list4 @ (any1::(any2::any_list3)))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse (any_list4))
Inductive2 : any_list2 = (any3::any_list4)
any1 : any
---------------------------------------
((((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse (any_list4)) @ (any3::(Nil))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ (reverse (any_list4) @ (any3::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Lemma : forall (arg7:any list) (arg8:any list) (arg9:any list), ((arg7 @ arg9) @ arg8) = (arg7 @ (arg9 @ arg8))
Model : arg7: (Nil), arg8: (Nil), arg9: (Nil)
Model : arg7: (8::(3::(Nil))), arg8: (Nil), arg9: (Nil)
Model : arg7: (Nil), arg8: (Nil), arg9: (4::(2::(2::(Nil))))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
(((Nil) @ (Nil)) @ (Nil)) = ((Nil) @ ((Nil) @ (Nil)))
(((8::(3::(Nil))) @ (Nil)) @ (Nil)) = ((8::(3::(Nil))) @ ((Nil) @ (Nil)))
(((Nil) @ (4::(2::(2::(Nil))))) @ (Nil)) = ((Nil) @ ((4::(2::(2::(Nil)))) @ (Nil)))
Simplifying took 0.000623 seconds
Result : true
advanced_generalize done


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
any3 : any
any_list4 : any list
IH2 : forall (any1:any), reverse ((any_list4 @ (any1::(any2::any_list3)))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse (any_list4))
Inductive2 : any_list2 = (any3::any_list4)
any1 : any
---------------------------------------
((((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse (any_list4)) @ (any3::(Nil))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ (reverse (any_list4) @ (any3::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 83


1st goal of : forall (any1:any) (any_list1:any list) (any_list2:any list), reverse ((any_list2 @ (any1::any_list1))) = ((reverse (any_list1) @ (any1::(Nil))) @ reverse (any_list2))
any_list1 : any list
any2 : any
any_list3 : any list
IH1 : forall (any1:any) (any_list2:any list), reverse ((any_list2 @ (any1::any_list3))) = ((reverse (any_list3) @ (any1::(Nil))) @ reverse (any_list2))
Inductive1 : any_list1 = (any2::any_list3)
any_list2 : any list
any3 : any
any_list4 : any list
IH2 : forall (any1:any), reverse ((any_list4 @ (any1::(any2::any_list3)))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse (any_list4))
Inductive2 : any_list2 = (any3::any_list4)
any1 : any
---------------------------------------
((((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ reverse (any_list4)) @ (any3::(Nil))) = (((reverse (any_list3) @ (any2::(Nil))) @ (any1::(Nil))) @ (reverse (any_list4) @ (any3::(Nil))))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (arg7:any list) (arg8:any list) (arg9:any list), ((arg7 @ arg9) @ arg8) = (arg7 @ (arg9 @ arg8))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list1 @ any_list3) @ any_list2) = (any_list1 @ (any_list3 @ any_list2))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list1 @ any_list3) @ any_list2) = (any_list1 @ (any_list3 @ any_list2))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction any_list1(rank:10)
=================================================
Progress: 84


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list1 @ any_list3) @ any_list2) = (any_list1 @ (any_list3 @ any_list2))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list1 @ any_list3) @ any_list2) = (any_list1 @ (any_list3 @ any_list2))

0 goal(s) more...

3 conjecture(s) more...
>>> induction any_list1(rank : 10)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list1 @ any_list3) @ any_list2) = (any_list1 @ (any_list3 @ any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list) (any_list3:any list), (((Nil) @ any_list3) @ any_list2) = ((Nil) @ (any_list3 @ any_list2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 85


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list1 @ any_list3) @ any_list2) = (any_list1 @ (any_list3 @ any_list2))
any_list1 : any list
Base1 : any_list1 = (Nil)
---------------------------------------
forall (any_list2:any list) (any_list3:any list), (((Nil) @ any_list3) @ any_list2) = ((Nil) @ (any_list3 @ any_list2))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list1 @ any_list3) @ any_list2) = (any_list1 @ (any_list3 @ any_list2))
any_list1 : any list
any1 : any
any_list4 : any list
IH1 : forall (any_list2:any list) (any_list3:any list), ((any_list4 @ any_list3) @ any_list2) = (any_list4 @ (any_list3 @ any_list2))
Inductive1 : any_list1 = (any1::any_list4)
---------------------------------------
forall (any_list2:any list) (any_list3:any list), (((any1::any_list4) @ any_list3) @ any_list2) = ((any1::any_list4) @ (any_list3 @ any_list2))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 86


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list1 @ any_list3) @ any_list2) = (any_list1 @ (any_list3 @ any_list2))
any_list1 : any list
any1 : any
any_list4 : any list
IH1 : forall (any_list2:any list) (any_list3:any list), ((any_list4 @ any_list3) @ any_list2) = (any_list4 @ (any_list3 @ any_list2))
Inductive1 : any_list1 = (any1::any_list4)
---------------------------------------
forall (any_list2:any list) (any_list3:any list), (((any1::any_list4) @ any_list3) @ any_list2) = ((any1::any_list4) @ (any_list3 @ any_list2))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list1 @ any_list3) @ any_list2) = (any_list1 @ (any_list3 @ any_list2))
any_list1 : any list
any1 : any
any_list4 : any list
IH1 : forall (any_list2:any list) (any_list3:any list), ((any_list4 @ any_list3) @ any_list2) = (any_list4 @ (any_list3 @ any_list2))
Inductive1 : any_list1 = (any1::any_list4)
---------------------------------------
forall (any_list2:any list) (any_list3:any list), (any1::((any_list4 @ any_list3) @ any_list2)) = (any1::(any_list4 @ (any_list3 @ any_list2)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction any_list3(rank:10)
=================================================
Progress: 87


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list1 @ any_list3) @ any_list2) = (any_list1 @ (any_list3 @ any_list2))
any_list1 : any list
any1 : any
any_list4 : any list
IH1 : forall (any_list2:any list) (any_list3:any list), ((any_list4 @ any_list3) @ any_list2) = (any_list4 @ (any_list3 @ any_list2))
Inductive1 : any_list1 = (any1::any_list4)
---------------------------------------
forall (any_list2:any list) (any_list3:any list), (any1::((any_list4 @ any_list3) @ any_list2)) = (any1::(any_list4 @ (any_list3 @ any_list2)))

0 goal(s) more...

3 conjecture(s) more...
>>> induction any_list3(rank : 10)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list1 @ any_list3) @ any_list2) = (any_list1 @ (any_list3 @ any_list2))
any_list1 : any list
any1 : any
any_list4 : any list
IH1 : forall (any_list2:any list) (any_list3:any list), ((any_list4 @ any_list3) @ any_list2) = (any_list4 @ (any_list3 @ any_list2))
Inductive1 : any_list1 = (any1::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
---------------------------------------
forall (any_list2:any list), (any1::((any_list4 @ (Nil)) @ any_list2)) = (any1::(any_list4 @ ((Nil) @ any_list2)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 88


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list1 @ any_list3) @ any_list2) = (any_list1 @ (any_list3 @ any_list2))
any_list1 : any list
any1 : any
any_list4 : any list
IH1 : forall (any_list2:any list) (any_list3:any list), ((any_list4 @ any_list3) @ any_list2) = (any_list4 @ (any_list3 @ any_list2))
Inductive1 : any_list1 = (any1::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
---------------------------------------
forall (any_list2:any list), (any1::((any_list4 @ (Nil)) @ any_list2)) = (any1::(any_list4 @ ((Nil) @ any_list2)))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list1 @ any_list3) @ any_list2) = (any_list1 @ (any_list3 @ any_list2))
any_list1 : any list
any1 : any
any_list4 : any list
IH1 : forall (any_list2:any list) (any_list3:any list), ((any_list4 @ any_list3) @ any_list2) = (any_list4 @ (any_list3 @ any_list2))
Inductive1 : any_list1 = (any1::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
---------------------------------------
forall (any_list2:any list), (any1::((any_list4 @ (Nil)) @ any_list2)) = (any1::(any_list4 @ any_list2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro any_list2(rank:10)
rewrite IH1 in goal at 0(rank:26)
rewrite <- lemma3 in goal at 0(rank:18)
=================================================
Progress: 89


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list1 @ any_list3) @ any_list2) = (any_list1 @ (any_list3 @ any_list2))
any_list1 : any list
any1 : any
any_list4 : any list
IH1 : forall (any_list2:any list) (any_list3:any list), ((any_list4 @ any_list3) @ any_list2) = (any_list4 @ (any_list3 @ any_list2))
Inductive1 : any_list1 = (any1::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
---------------------------------------
forall (any_list2:any list), (any1::((any_list4 @ (Nil)) @ any_list2)) = (any1::(any_list4 @ any_list2))

1 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 10)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list), ((any_list1 @ any_list3) @ any_list2) = (any_list1 @ (any_list3 @ any_list2))
any_list1 : any list
any1 : any
any_list4 : any list
IH1 : forall (any_list2:any list) (any_list3:any list), ((any_list4 @ any_list3) @ any_list2) = (any_list4 @ (any_list3 @ any_list2))
Inductive1 : any_list1 = (any1::any_list4)
any_list3 : any list
Base1 : any_list3 = (Nil)
any_list2 : any list
---------------------------------------
(any1::((any_list4 @ (Nil)) @ any_list2)) = (any1::(any_list4 @ any_list2))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- lemma3 in goal at 0(rank:18)
rewrite IH1 in goal at 0(rank:26)
=================================================
Progress: 90


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
forall (any_list1:any list), reverse (((reverse ((nat_list2 @ (Nil))) @ (nat1::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1)) @ (Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 13)


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
forall (any_list1:any list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1)) = reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 91


1st goal of : forall (any_list1:any list) (nat_list1:nat list), reverse ((reverse ((nat_list1 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list1) @ any_list1)) @ (Nil))
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list), reverse ((reverse ((nat_list2 @ (Nil))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
forall (any_list1:any list), reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1)) = reverse (((reverse (nat_list2) @ (nat1::(Nil))) @ any_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : reverse (reverse ((nat_list3 @ (Nil)))) = (reverse (reverse (nat_list3)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
reverse ((reverse ((nat_list3 @ (Nil))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 5
Tactic List : 5
rewrite lemma4 in goal at 0(rank:12)
rewrite <- lemma3 in goal at 1(rank:12)
rewrite <- lemma3 in goal at 2(rank:12)
rewrite <- lemma4 in goal at 0(rank:12)
rewrite <- lemma3 in goal at 0(rank:12)
=================================================
Progress: 92


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : reverse (reverse ((nat_list3 @ (Nil)))) = (reverse (reverse (nat_list3)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
reverse ((reverse ((nat_list3 @ (Nil))) @ (nat1::(Nil)))) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma4 in goal at 0(rank : 12)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : reverse (reverse ((nat_list3 @ (Nil)))) = (reverse (reverse (nat_list3)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
(reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil)) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 93


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
Base1 : nat_list2 = (Nil)
nat_list1 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : reverse (reverse ((nat_list3 @ (Nil)))) = (reverse (reverse (nat_list3)) @ (Nil))
Inductive1 : nat_list1 = (nat1::nat_list3)
---------------------------------------
(reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil)) = (reverse ((reverse (nat_list3) @ (nat1::(Nil)))) @ (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ nat_list3))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list3)))
Inductive1 : nat_list2 = (nat1::nat_list3)
---------------------------------------
forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ (nat1::nat_list3)))) = (reverse (reverse (nat_list1)) @ reverse (reverse ((nat1::nat_list3))))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 94


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ nat_list3))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list3)))
Inductive1 : nat_list2 = (nat1::nat_list3)
---------------------------------------
forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ (nat1::nat_list3)))) = (reverse (reverse (nat_list1)) @ reverse (reverse ((nat1::nat_list3))))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ nat_list3))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list3)))
Inductive1 : nat_list2 = (nat1::nat_list3)
---------------------------------------
forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ (nat1::nat_list3)))) = (reverse (reverse (nat_list1)) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:4)
=================================================
Progress: 95


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ nat_list3))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list3)))
Inductive1 : nat_list2 = (nat1::nat_list3)
---------------------------------------
forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ (nat1::nat_list3)))) = (reverse (reverse (nat_list1)) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))

0 goal(s) more...

0 conjecture(s) more...
>>> induction nat_list1(rank : 4)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ nat_list3))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list3)))
Inductive1 : nat_list2 = (nat1::nat_list3)
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
reverse (reverse (((Nil) @ (nat1::nat_list3)))) = (reverse (reverse ((Nil))) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 96


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ nat_list3))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list3)))
Inductive1 : nat_list2 = (nat1::nat_list3)
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
reverse (reverse (((Nil) @ (nat1::nat_list3)))) = (reverse (reverse ((Nil))) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ nat_list3))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list3)))
Inductive1 : nat_list2 = (nat1::nat_list3)
nat_list1 : nat list
nat2 : nat
nat_list4 : nat list
IH2 : reverse (reverse ((nat_list4 @ (nat1::nat_list3)))) = (reverse (reverse (nat_list4)) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))
Inductive2 : nat_list1 = (nat2::nat_list4)
---------------------------------------
reverse (reverse (((nat2::nat_list4) @ (nat1::nat_list3)))) = (reverse (reverse ((nat2::nat_list4))) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 97


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ nat_list3))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list3)))
Inductive1 : nat_list2 = (nat1::nat_list3)
nat_list1 : nat list
nat2 : nat
nat_list4 : nat list
IH2 : reverse (reverse ((nat_list4 @ (nat1::nat_list3)))) = (reverse (reverse (nat_list4)) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))
Inductive2 : nat_list1 = (nat2::nat_list4)
---------------------------------------
reverse (reverse (((nat2::nat_list4) @ (nat1::nat_list3)))) = (reverse (reverse ((nat2::nat_list4))) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ nat_list3))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list3)))
Inductive1 : nat_list2 = (nat1::nat_list3)
nat_list1 : nat list
nat2 : nat
nat_list4 : nat list
IH2 : reverse (reverse ((nat_list4 @ (nat1::nat_list3)))) = (reverse (reverse (nat_list4)) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))
Inductive2 : nat_list1 = (nat2::nat_list4)
---------------------------------------
reverse ((reverse ((nat_list4 @ (nat1::nat_list3))) @ (nat2::(Nil)))) = (reverse ((reverse (nat_list4) @ (nat2::(Nil)))) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Lemma : forall (arg10:any list) (nat1:nat) (nat_list3:nat list) (nat_list4:nat list), reverse ((reverse ((nat_list4 @ (nat1::nat_list3))) @ arg10)) = (reverse ((reverse (nat_list4) @ arg10)) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))
Model : arg10: (6::(0::(Nil))), nat1: ZERO, nat_list3: (Nil), nat_list4: (ZERO::(Nil))
Model : arg10: (Nil), nat1: ZERO, nat_list3: (Nil), nat_list4: (Nil)
Model : arg10: (Nil), nat1: SUCC (ZERO), nat_list3: (Nil), nat_list4: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (6::(0::(Nil))))) = (reverse ((reverse ((ZERO::(Nil))) @ (6::(0::(Nil))))) @ reverse ((reverse ((Nil)) @ (ZERO::(Nil)))))
reverse ((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil))) = (reverse ((reverse ((Nil)) @ (Nil))) @ reverse ((reverse ((Nil)) @ (ZERO::(Nil)))))
reverse ((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil))) = (reverse ((reverse ((Nil)) @ (Nil))) @ reverse ((reverse ((Nil)) @ (SUCC (ZERO)::(Nil)))))
Simplifying took 0.001179 seconds
Result : true
advanced_generalize done


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ nat_list3))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list3)))
Inductive1 : nat_list2 = (nat1::nat_list3)
nat_list1 : nat list
nat2 : nat
nat_list4 : nat list
IH2 : reverse (reverse ((nat_list4 @ (nat1::nat_list3)))) = (reverse (reverse (nat_list4)) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))
Inductive2 : nat_list1 = (nat2::nat_list4)
---------------------------------------
reverse ((reverse ((nat_list4 @ (nat1::nat_list3))) @ (nat2::(Nil)))) = (reverse ((reverse (nat_list4) @ (nat2::(Nil)))) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 98


1st goal of : forall (nat_list1:nat list) (nat_list2:nat list), reverse (reverse ((nat_list1 @ nat_list2))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list2)))
nat_list2 : nat list
nat1 : nat
nat_list3 : nat list
IH1 : forall (nat_list1:nat list), reverse (reverse ((nat_list1 @ nat_list3))) = (reverse (reverse (nat_list1)) @ reverse (reverse (nat_list3)))
Inductive1 : nat_list2 = (nat1::nat_list3)
nat_list1 : nat list
nat2 : nat
nat_list4 : nat list
IH2 : reverse (reverse ((nat_list4 @ (nat1::nat_list3)))) = (reverse (reverse (nat_list4)) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))
Inductive2 : nat_list1 = (nat2::nat_list4)
---------------------------------------
reverse ((reverse ((nat_list4 @ (nat1::nat_list3))) @ (nat2::(Nil)))) = (reverse ((reverse (nat_list4) @ (nat2::(Nil)))) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))

0 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg10:any list) (nat1:nat) (nat_list3:nat list) (nat_list4:nat list), reverse ((reverse ((nat_list4 @ (nat1::nat_list3))) @ arg10)) = (reverse ((reverse (nat_list4) @ arg10)) @ reverse ((reverse (nat_list3) @ (nat1::(Nil)))))(rank : 0)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))

---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:6)
=================================================
Progress: 99


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))

---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat_list1(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse ((Nil)) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 100


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse ((Nil)) @ (nat1::(Nil)))))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat_list2(rank:7)
=================================================
Progress: 101


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (nat1:nat) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat_list2(rank : 7)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
Base2 : nat_list2 = (Nil)
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((reverse (((Nil) @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse ((Nil)) @ any_list1)) @ (nat1::(Nil)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 102


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
Base2 : nat_list2 = (Nil)
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((reverse (((Nil) @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse ((Nil)) @ any_list1)) @ (nat1::(Nil)))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (any_list1:any list) (nat1:nat), reverse ((reverse ((nat_list3 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list3) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list2 = (nat2::nat_list3)
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((reverse (((nat2::nat_list3) @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse ((nat2::nat_list3)) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 103


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (any_list1:any list) (nat1:nat), reverse ((reverse ((nat_list3 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list3) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list2 = (nat2::nat_list3)
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((reverse (((nat2::nat_list3) @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse ((nat2::nat_list3)) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (any_list1:any list) (nat1:nat), reverse ((reverse ((nat_list3 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list3) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list2 = (nat2::nat_list3)
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((reverse ((nat_list3 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any_list1(rank:6)
intro nat1(rank:6)
=================================================
Progress: 104


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (any_list1:any list) (nat1:nat), reverse ((reverse ((nat_list3 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list3) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list2 = (nat2::nat_list3)
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((reverse ((nat_list3 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro any_list1(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (any_list1:any list) (nat1:nat), reverse ((reverse ((nat_list3 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list3) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list2 = (nat2::nat_list3)
any_list1 : any list
---------------------------------------
forall (nat1:nat), reverse (((reverse ((nat_list3 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:6)
=================================================
Progress: 105


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (any_list1:any list) (nat1:nat), reverse ((reverse ((nat_list3 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list3) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list2 = (nat2::nat_list3)
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((reverse ((nat_list3 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (any_list1:any list) (nat1:nat), reverse ((reverse ((nat_list3 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list3) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list2 = (nat2::nat_list3)
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((reverse ((nat_list3 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (arg11:any list) (nat1:nat) (nat_list3:nat list), reverse (((reverse ((nat_list3 @ (nat1::(Nil)))) @ arg11) @ any_list1)) = (reverse (((reverse (nat_list3) @ arg11) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (1::(8::(Nil))), arg11: (Nil), nat1: ZERO, nat_list3: (Nil)
Model : any_list1: (Nil), arg11: (Nil), nat1: ZERO, nat_list3: (Nil)
Model : any_list1: (Nil), arg11: (Nil), nat1: ZERO, nat_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (1::(8::(Nil))))) = (reverse (((reverse ((Nil)) @ (Nil)) @ (1::(8::(Nil))))) @ (ZERO::(Nil)))
reverse (((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil))) = (reverse (((reverse ((Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil))) = (reverse (((reverse ((Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001012 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (any_list1:any list) (nat1:nat), reverse ((reverse ((nat_list3 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list3) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list2 = (nat2::nat_list3)
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((reverse ((nat_list3 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 106


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (any_list1:any list) (nat1:nat), reverse ((reverse ((nat_list3 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list3) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list2 = (nat2::nat_list3)
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((reverse ((nat_list3 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any_list1:any list) (arg11:any list) (nat1:nat) (nat_list3:nat list), reverse (((reverse ((nat_list3 @ (nat1::(Nil)))) @ arg11) @ any_list1)) = (reverse (((reverse (nat_list3) @ arg11) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:8)
=================================================
Progress: 107


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (any_list1:any list) (nat1:nat), reverse ((reverse ((nat_list3 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list3) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list2 = (nat2::nat_list3)
any_list1 : any list
---------------------------------------
forall (nat1:nat), reverse (((reverse ((nat_list3 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 6)


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (any_list1:any list) (nat1:nat), reverse ((reverse ((nat_list3 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list3) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list2 = (nat2::nat_list3)
any_list1 : any list
nat1 : nat
---------------------------------------
reverse (((reverse ((nat_list3 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (arg12:any list) (nat1:nat) (nat_list3:nat list), reverse (((reverse ((nat_list3 @ (nat1::(Nil)))) @ arg12) @ any_list1)) = (reverse (((reverse (nat_list3) @ arg12) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), arg12: (Nil), nat1: ZERO, nat_list3: (Nil)
Model : any_list1: (Nil), arg12: (Nil), nat1: ZERO, nat_list3: (Nil)
Model : any_list1: (Nil), arg12: (Nil), nat1: SUCC (SUCC (SUCC (ZERO))), nat_list3: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil))) = (reverse (((reverse ((Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil))) = (reverse (((reverse ((Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((reverse (((Nil) @ (SUCC (SUCC (SUCC (ZERO)))::(Nil)))) @ (Nil)) @ (Nil))) = (reverse (((reverse ((Nil)) @ (Nil)) @ (Nil))) @ (SUCC (SUCC (SUCC (ZERO)))::(Nil)))
Simplifying took 0.000376 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (any_list1:any list) (nat1:nat), reverse ((reverse ((nat_list3 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list3) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list2 = (nat2::nat_list3)
any_list1 : any list
nat1 : nat
---------------------------------------
reverse (((reverse ((nat_list3 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 108


1st goal of : forall (any_list1:any list) (nat1:nat) (nat_list1:nat list) (nat_list2:nat list), reverse ((reverse ((nat_list2 @ (nat1::nat_list1))) @ any_list1)) = (reverse ((reverse (nat_list2) @ any_list1)) @ reverse ((reverse (nat_list1) @ (nat1::(Nil)))))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
nat_list2 : nat list
nat2 : nat
nat_list3 : nat list
IH1 : forall (any_list1:any list) (nat1:nat), reverse ((reverse ((nat_list3 @ (nat1::(Nil)))) @ any_list1)) = (reverse ((reverse (nat_list3) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list2 = (nat2::nat_list3)
any_list1 : any list
nat1 : nat
---------------------------------------
reverse (((reverse ((nat_list3 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list1)) = (reverse (((reverse (nat_list3) @ (nat2::(Nil))) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any_list1:any list) (arg12:any list) (nat1:nat) (nat_list3:nat list), reverse (((reverse ((nat_list3 @ (nat1::(Nil)))) @ arg12) @ any_list1)) = (reverse (((reverse (nat_list3) @ arg12) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:8)
=================================================
Progress: 109


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat_list1(rank : 8)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse (((Nil) @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse ((Nil)) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 110


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse (((Nil) @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse ((Nil)) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse ((nat2::nat_list2)) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 111


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse ((nat2::nat_list2)) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro any_list1(rank:7)
intro any_list2(rank:7)
intro nat1(rank:7)
=================================================
Progress: 112


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any_list2(rank:7)
intro nat1(rank:7)
=================================================
Progress: 113


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any_list2(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7)
=================================================
Progress: 114


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (arg13:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg13) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg13) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (2::(Nil)), any_list2: (Nil), arg13: (3::(2::(5::(Nil)))), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), arg13: (4::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (3::(Nil)), any_list2: (Nil), arg13: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (3::(2::(5::(Nil))))) @ (Nil)) @ (2::(Nil)))) = (reverse ((((reverse ((ZERO::(Nil))) @ (3::(2::(5::(Nil))))) @ (Nil)) @ (2::(Nil)))) @ (ZERO::(Nil)))
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (4::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (3::(Nil)))) = (reverse ((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.003915 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 115


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (arg13:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg13) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg13) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:10)
=================================================
Progress: 116


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any_list2(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7)
=================================================
Progress: 117


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (arg14:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg14) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg14) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), arg14: (8::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), arg14: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), arg14: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (8::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000820 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 118


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (arg14:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg14) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg14) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:10)
=================================================
Progress: 119


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (arg15:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg15) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg15) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), arg15: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), arg15: (0::(0::(7::(Nil)))), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (7::(Nil)), any_list2: (Nil), arg15: (Nil), nat1: ZERO, nat_list2: (SUCC (SUCC (ZERO))::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (0::(0::(7::(Nil))))) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (0::(0::(7::(Nil))))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((reverse (((SUCC (SUCC (ZERO))::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (7::(Nil)))) = (reverse ((((reverse ((SUCC (SUCC (ZERO))::(Nil))) @ (Nil)) @ (Nil)) @ (7::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.002173 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 120


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (arg15:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg15) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg15) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:10)
=================================================
Progress: 121


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (arg16:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg16) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg16) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), arg16: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), arg16: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (3::(Nil)), arg16: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (3::(Nil))) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000611 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 122


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (arg16:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg16) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg16) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:10)
=================================================
Progress: 123


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat_list1(rank : 8)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse (((Nil) @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse ((Nil)) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 124


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse (((Nil) @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse ((Nil)) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse ((nat2::nat_list2)) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 125


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse ((nat2::nat_list2)) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro any_list1(rank:7)
intro any_list2(rank:7)
intro nat1(rank:7)
=================================================
Progress: 126


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any_list1(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro any_list2(rank:7)
intro nat1(rank:7)
=================================================
Progress: 127


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any_list2(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7)
=================================================
Progress: 128


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (arg17:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg17) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg17) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (1::(Nil)), arg17: (Nil), nat1: SUCC (ZERO), nat_list2: (SUCC (SUCC (ZERO))::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), arg17: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), arg17: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((reverse (((SUCC (SUCC (ZERO))::(Nil)) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (1::(Nil))) @ (Nil))) = (reverse ((((reverse ((SUCC (SUCC (ZERO))::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.001204 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 129


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (arg17:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg17) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg17) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:10)
=================================================
Progress: 130


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro any_list2(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7)
=================================================
Progress: 131


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (arg18:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg18) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg18) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (0::(Nil)), arg18: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), arg18: (0::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), arg18: (Nil), nat1: SUCC (SUCC (ZERO)), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((reverse (((Nil) @ (SUCC (SUCC (ZERO))::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (SUCC (ZERO))::(Nil)))
Simplifying took 0.000631 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 132


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (arg18:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg18) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg18) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:10)
=================================================
Progress: 133


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (arg19:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg19) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg19) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), arg19: (0::(Nil)), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (4::(5::(1::(Nil)))), arg19: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), arg19: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((ZERO::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (4::(5::(1::(Nil))))) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (Nil)) @ (4::(5::(1::(Nil))))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001934 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 134


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (arg19:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg19) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg19) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:10)
=================================================
Progress: 135


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7)


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (arg20:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg20) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg20) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), arg20: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), arg20: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (7::(1::(Nil))), any_list2: (Nil), arg20: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (7::(1::(Nil))))) = (reverse ((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (7::(1::(Nil))))) @ (ZERO::(Nil)))
Simplifying took 0.000902 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 136


1st goal of : forall (any_list1:any list) (any_list2:any list) (nat1:nat) (nat_list1:nat list), reverse (((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list1) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list2) @ any_list1)) = (reverse (((reverse (nat_list2) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (arg20:any list) (nat1:nat) (nat_list2:nat list), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg20) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ arg20) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:10)
=================================================
Progress: 137


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat_list1(rank : 10)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 138


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 139


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro any_list1(rank:9)
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 140


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 141


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 142


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 143


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg21:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg21) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg21) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (2::(Nil)), any_list3: (Nil), arg21: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (2::(Nil)), any_list2: (Nil), any_list3: (Nil), arg21: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (8::(Nil)), any_list3: (Nil), arg21: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001075 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 144


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg21:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg21) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg21) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 145


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 146


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 147


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg22:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg22) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg22) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (2::(Nil)), any_list3: (Nil), arg22: (0::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg22: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg22: (Nil), nat1: SUCC (ZERO), nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (0::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((ZERO::(Nil)) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.001157 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 148


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg22:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg22) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg22) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 149


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 150


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg23:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg23) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg23) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg23: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg23: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg23: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000468 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 151


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg23:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg23) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg23) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 152


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg24:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg24) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg24) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (8::(6::(Nil))), any_list3: (Nil), arg24: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg24: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (0::(8::(Nil))), arg24: (Nil), nat1: ZERO, nat_list2: (SUCC (ZERO)::(ZERO::(Nil)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (8::(6::(Nil)))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (8::(6::(Nil)))) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((SUCC (ZERO)::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (0::(8::(Nil)))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((SUCC (ZERO)::(ZERO::(Nil)))) @ (Nil)) @ (0::(8::(Nil)))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.003568 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 153


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg24:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg24) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg24) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 154


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 155


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg25:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg25) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg25) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (8::(Nil)), arg25: (5::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg25: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg25: (6::(8::(Nil))), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (5::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (6::(8::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (6::(8::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.003776 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 156


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg25:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg25) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg25) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 157


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg26:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg26) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg26) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg26: (5::(Nil)), nat1: SUCC (ZERO), nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg26: (6::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg26: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((ZERO::(Nil)) @ (SUCC (ZERO)::(Nil)))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001851 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 158


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg26:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg26) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg26) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 159


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg27:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg27) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg27) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg27: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (8::(1::(Nil))), any_list2: (Nil), any_list3: (Nil), arg27: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (5::(Nil)), any_list3: (Nil), arg27: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(1::(Nil))))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(1::(Nil))))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001818 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 160


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg27:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg27) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg27) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 161


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg28:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg28) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg28) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (5::(Nil)), any_list2: (Nil), any_list3: (Nil), arg28: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg28: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (1::(Nil)), arg28: (Nil), nat1: SUCC (ZERO), nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((ZERO::(Nil)) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.001165 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 162


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg28:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg28) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg28) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 163


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat_list1(rank : 10)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 164


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 165


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro any_list1(rank:9)
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 166


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 167


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 168


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 169


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg29:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg29) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg29) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg29: (Nil), nat1: ZERO, nat_list2: (ZERO::(SUCC (ZERO)::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg29: (6::(Nil)), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg29: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((ZERO::(SUCC (ZERO)::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001449 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 170


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg29:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg29) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg29) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 171


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 172


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 173


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg30:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg30) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg30) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (0::(6::(Nil))), any_list3: (Nil), arg30: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (1::(7::(Nil))), arg30: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg30: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(6::(Nil)))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (0::(6::(Nil)))) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (1::(7::(Nil)))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (1::(7::(Nil)))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001816 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 174


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg30:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg30) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg30) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 175


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 176


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg31:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg31) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg31) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg31: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg31: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg31: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000456 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 177


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg31:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg31) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg31) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 178


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg32:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg32) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg32) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (1::(Nil)), any_list3: (Nil), arg32: (Nil), nat1: SUCC (ZERO), nat_list2: (SUCC (ZERO)::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg32: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (5::(Nil)), any_list3: (Nil), arg32: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((SUCC (ZERO)::(Nil)) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil))) = (reverse (((((reverse ((SUCC (ZERO)::(Nil))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001431 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 179


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg32:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg32) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg32) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 180


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 181


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg33:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg33) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg33) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (6::(Nil)), any_list2: (Nil), any_list3: (Nil), arg33: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg33: (5::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (Nil), arg33: (3::(Nil)), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (3::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (3::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002049 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 182


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg33:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg33) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg33) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 183


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg34:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg34) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg34) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg34: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg34: (4::(6::(Nil))), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (3::(5::(Nil))), arg34: (Nil), nat1: SUCC (SUCC (ZERO)), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (4::(6::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (4::(6::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (SUCC (ZERO))::(Nil)))) @ (Nil)) @ (3::(5::(Nil)))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (3::(5::(Nil)))) @ (Nil)) @ (Nil))) @ (SUCC (SUCC (ZERO))::(Nil)))
Simplifying took 0.002725 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 184


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg34:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg34) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg34) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 185


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg35:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg35) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg35) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg35: (2::(2::(Nil))), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg35: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg35: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (2::(2::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (2::(2::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001324 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 186


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg35:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg35) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg35) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 187


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg36:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg36) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg36) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (5::(Nil)), any_list3: (Nil), arg36: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg36: (2::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg36: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001096 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 188


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg36:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg36) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg36) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 189


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat_list1(rank : 10)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 190


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 191


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro any_list1(rank:9)
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 192


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 193


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 194


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 195


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg37:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg37) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg37) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (0::(6::(7::(1::(Nil))))), arg37: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg37: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (Nil), arg37: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (0::(6::(7::(1::(Nil)))))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (0::(6::(7::(1::(Nil)))))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.003413 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 196


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg37:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg37) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg37) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 197


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 198


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 199


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg38:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg38) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg38) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg38: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg38: (0::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg38: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000714 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 200


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg38:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg38) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg38) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 201


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 202


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg39:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg39) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg39) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg39: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg39: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (6::(Nil)), any_list2: (Nil), any_list3: (Nil), arg39: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.001033 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 203


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg39:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg39) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg39) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 204


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg40:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg40) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg40) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg40: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg40: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg40: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000461 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 205


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg40:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg40) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg40) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 206


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 207


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg41:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg41) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg41) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg41: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (0::(Nil)), any_list2: (Nil), any_list3: (Nil), arg41: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (8::(Nil)), any_list3: (Nil), arg41: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000893 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 208


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg41:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg41) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg41) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 209


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg42:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg42) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg42) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg42: (Nil), nat1: ZERO, nat_list2: (SUCC (SUCC (ZERO))::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg42: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg42: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((SUCC (SUCC (ZERO))::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((SUCC (SUCC (ZERO))::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000719 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 210


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg42:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg42) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg42) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 211


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg43:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg43) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg43) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (7::(3::(Nil))), arg43: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (8::(Nil)), any_list3: (Nil), arg43: (6::(Nil)), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (2::(Nil)), any_list3: (4::(5::(2::(Nil)))), arg43: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (7::(3::(Nil)))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (7::(3::(Nil)))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (6::(Nil))) @ (Nil)) @ (8::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (6::(Nil))) @ (Nil)) @ (8::(Nil))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (4::(5::(2::(Nil))))) @ (2::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (4::(5::(2::(Nil))))) @ (2::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.005134 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 212


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg43:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg43) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg43) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 213


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg44:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg44) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg44) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg44: (Nil), nat1: ZERO, nat_list2: (SUCC (ZERO)::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg44: (Nil), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (4::(Nil)), arg44: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((SUCC (ZERO)::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((SUCC (ZERO)::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (4::(Nil))) @ (0::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001845 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 214


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg44:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg44) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg44) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 215


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat_list1(rank : 10)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 216


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 217


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro any_list1(rank:9)
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 218


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 219


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 220


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 221


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg45:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg45) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg45) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (1::(0::(Nil))), arg45: (0::(Nil)), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg45: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (0::(Nil)), any_list2: (0::(8::(Nil))), any_list3: (Nil), arg45: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (1::(0::(Nil)))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (0::(Nil))) @ (1::(0::(Nil)))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(8::(Nil)))) @ (0::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (0::(8::(Nil)))) @ (0::(Nil)))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.002981 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 222


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg45:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg45) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg45) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 223


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 224


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 225


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg46:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg46) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg46) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg46: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (3::(Nil)), any_list3: (Nil), arg46: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (6::(6::(Nil))), any_list2: (Nil), any_list3: (Nil), arg46: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(6::(Nil))))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(6::(Nil))))) @ (ZERO::(Nil)))
Simplifying took 0.001293 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 226


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg46:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg46) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg46) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 227


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 228


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg47:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg47) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg47) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg47: (Nil), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (6::(1::(Nil))), arg47: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (2::(5::(Nil))), any_list3: (Nil), arg47: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (6::(1::(Nil)))) @ (0::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (6::(1::(Nil)))) @ (0::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (2::(5::(Nil)))) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (2::(5::(Nil)))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.003246 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 229


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg47:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg47) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg47) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 230


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg48:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg48) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg48) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg48: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg48: (Nil), nat1: ZERO, nat_list2: (SUCC (ZERO)::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg48: (Nil), nat1: SUCC (SUCC (SUCC (ZERO))), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((SUCC (ZERO)::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((SUCC (ZERO)::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (SUCC (SUCC (ZERO)))::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (SUCC (SUCC (ZERO)))::(Nil)))
Simplifying took 0.000898 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 231


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg48:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg48) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg48) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 232


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 233


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg49:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg49) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg49) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (6::(0::(Nil))), any_list3: (Nil), arg49: (4::(Nil)), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg49: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg49: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (4::(Nil))) @ (Nil)) @ (6::(0::(Nil)))) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (4::(Nil))) @ (Nil)) @ (6::(0::(Nil)))) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.002644 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 234


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg49:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg49) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg49) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 235


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg50:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg50) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg50) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg50: (Nil), nat1: ZERO, nat_list2: (SUCC (SUCC (ZERO))::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg50: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg50: (0::(4::(Nil))), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((SUCC (SUCC (ZERO))::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((SUCC (SUCC (ZERO))::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (0::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (0::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001686 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 236


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg50:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg50) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg50) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 237


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg51:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg51) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg51) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (3::(Nil)), any_list2: (Nil), any_list3: (Nil), arg51: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg51: (4::(Nil)), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (5::(Nil)), any_list2: (Nil), any_list3: (Nil), arg51: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.001233 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 238


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg51:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg51) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg51) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 239


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg52:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg52) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg52) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg52: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (6::(Nil)), any_list3: (Nil), arg52: (5::(Nil)), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg52: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (5::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (5::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001436 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 240


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg52:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg52) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg52) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 241


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat_list1(rank : 10)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 242


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 243


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro any_list1(rank:9)
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 244


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 245


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 246


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 247


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg53:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg53) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg53) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg53: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg53: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (3::(Nil)), any_list3: (0::(Nil)), arg53: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (0::(Nil))) @ (3::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001075 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 248


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg53:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg53) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg53) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 249


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 250


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 251


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg54:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg54) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg54) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (8::(8::(Nil))), any_list2: (Nil), any_list3: (Nil), arg54: (4::(7::(7::(Nil)))), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (4::(0::(1::(Nil)))), any_list3: (Nil), arg54: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg54: (Nil), nat1: ZERO, nat_list2: (SUCC (SUCC (ZERO))::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (4::(7::(7::(Nil))))) @ (Nil)) @ (Nil)) @ (8::(8::(Nil))))) = (reverse (((((reverse ((Nil)) @ (4::(7::(7::(Nil))))) @ (Nil)) @ (Nil)) @ (8::(8::(Nil))))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (4::(0::(1::(Nil))))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (4::(0::(1::(Nil))))) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((SUCC (SUCC (ZERO))::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((SUCC (SUCC (ZERO))::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.006194 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 252


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg54:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg54) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg54) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 253


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 254


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg55:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg55) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg55) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (1::(Nil)), any_list2: (Nil), any_list3: (Nil), arg55: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg55: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (2::(Nil)), any_list3: (Nil), arg55: (5::(Nil)), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (5::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001466 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 255


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg55:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg55) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg55) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 256


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg56:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg56) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg56) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (1::(Nil)), any_list2: (Nil), any_list3: (Nil), arg56: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (7::(Nil)), any_list3: (2::(Nil)), arg56: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (3::(6::(Nil))), arg56: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (2::(Nil))) @ (7::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (2::(Nil))) @ (7::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (3::(6::(Nil)))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (3::(6::(Nil)))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002120 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 257


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg56:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg56) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg56) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 258


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 259


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg57:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg57) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg57) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg57: (0::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (8::(Nil)), arg57: (6::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (5::(Nil)), any_list2: (Nil), any_list3: (Nil), arg57: (7::(Nil)), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (6::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (6::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (5::(Nil)))) = (reverse (((((reverse ((Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (5::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.002632 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 260


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg57:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg57) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg57) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 261


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg58:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg58) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg58) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (8::(Nil)), any_list2: (Nil), any_list3: (Nil), arg58: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (6::(Nil)), any_list2: (Nil), any_list3: (Nil), arg58: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg58: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil)))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001430 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 262


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg58:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg58) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg58) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 263


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg59:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg59) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg59) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (8::(Nil)), any_list3: (Nil), arg59: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg59: (Nil), nat1: SUCC (ZERO), nat_list2: (SUCC (ZERO)::(Nil))
Model : any_list1: (Nil), any_list2: (4::(Nil)), any_list3: (Nil), arg59: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((SUCC (ZERO)::(Nil)) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((SUCC (ZERO)::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001297 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 264


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg59:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg59) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg59) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 265


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg60:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg60) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg60) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (2::(6::(4::(Nil)))), any_list2: (Nil), any_list3: (6::(Nil)), arg60: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg60: (6::(7::(Nil))), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (8::(Nil)), arg60: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (2::(6::(4::(Nil)))))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (2::(6::(4::(Nil)))))) @ (ZERO::(Nil)))
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (6::(7::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (6::(7::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.004980 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 266


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg60:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg60) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg60) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 267


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat_list1(rank : 10)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 268


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 269


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro any_list1(rank:9)
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 270


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 271


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 272


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 273


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg61:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg61) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg61) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg61: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg61: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (5::(Nil)), any_list2: (Nil), any_list3: (Nil), arg61: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.000610 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 274


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg61:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg61) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg61) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 275


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 276


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 277


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg62:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg62) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg62) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg62: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (2::(Nil)), any_list2: (Nil), any_list3: (Nil), arg62: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg62: (Nil), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001060 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 278


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg62:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg62) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg62) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 279


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 280


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg63:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg63) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg63) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (8::(Nil)), any_list3: (Nil), arg63: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (5::(Nil)), any_list2: (Nil), any_list3: (Nil), arg63: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (3::(Nil)), any_list2: (Nil), any_list3: (2::(1::(Nil))), arg63: (3::(Nil)), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil)))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (3::(Nil))) @ (2::(1::(Nil)))) @ (Nil)) @ (3::(Nil)))) = (reverse (((((reverse ((Nil)) @ (3::(Nil))) @ (2::(1::(Nil)))) @ (Nil)) @ (3::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.002827 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 281


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg63:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg63) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg63) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 282


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg64:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg64) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg64) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (7::(Nil)), any_list2: (Nil), any_list3: (0::(Nil)), arg64: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg64: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (6::(Nil)), any_list3: (Nil), arg64: (0::(Nil)), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (7::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (7::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (0::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.001822 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 283


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg64:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg64) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg64) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 284


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 285


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg65:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg65) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg65) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg65: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg65: (Nil), nat1: ZERO, nat_list2: (ZERO::(SUCC (ZERO)::(Nil)))
Model : any_list1: (Nil), any_list2: (4::(Nil)), any_list3: (Nil), arg65: (5::(Nil)), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((ZERO::(SUCC (ZERO)::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(Nil))) @ (Nil)) @ (4::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (5::(Nil))) @ (Nil)) @ (4::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002071 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 286


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg65:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg65) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg65) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 287


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg66:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg66) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg66) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (1::(0::(Nil))), arg66: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (3::(Nil)), any_list3: (Nil), arg66: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (3::(Nil)), any_list3: (2::(Nil)), arg66: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (1::(0::(Nil)))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (1::(0::(Nil)))) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (2::(Nil))) @ (3::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (2::(Nil))) @ (3::(Nil))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.002003 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 288


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg66:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg66) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg66) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 289


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg67:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg67) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg67) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (1::(Nil)), any_list2: (0::(3::(Nil))), any_list3: (Nil), arg67: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg67: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg67: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(3::(Nil)))) @ (1::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (0::(3::(Nil)))) @ (1::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001257 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 290


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg67:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg67) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg67) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 291


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg68:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg68) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg68) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (8::(Nil)), any_list2: (Nil), any_list3: (Nil), arg68: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (0::(Nil)), arg68: (3::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (4::(Nil)), any_list3: (Nil), arg68: (Nil), nat1: ZERO, nat_list2: (SUCC (ZERO)::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil)))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (3::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (3::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((SUCC (ZERO)::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil))) = (reverse (((((reverse ((SUCC (ZERO)::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002625 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 292


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg68:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg68) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg68) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 293


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat_list1(rank : 10)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 294


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 295


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro any_list1(rank:9)
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 296


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 297


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 298


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 299


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg69:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg69) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg69) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (0::(Nil)), arg69: (3::(Nil)), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (0::(6::(4::(Nil)))), any_list2: (3::(Nil)), any_list3: (Nil), arg69: (Nil), nat1: SUCC (SUCC (ZERO)), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg69: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (3::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (3::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (SUCC (ZERO))::(Nil)))) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (0::(6::(4::(Nil)))))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (0::(6::(4::(Nil)))))) @ (SUCC (SUCC (ZERO))::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002529 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 300


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg69:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg69) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg69) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 301


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 302


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 303


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg70:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg70) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg70) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (0::(Nil)), any_list2: (0::(Nil)), any_list3: (Nil), arg70: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (6::(Nil)), arg70: (Nil), nat1: SUCC (SUCC (ZERO)), nat_list2: (Nil)
Model : any_list1: (0::(Nil)), any_list2: (Nil), any_list3: (Nil), arg70: (Nil), nat1: SUCC (ZERO), nat_list2: (ZERO::(SUCC (ZERO)::(Nil)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (0::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (0::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (SUCC (ZERO))::(Nil)))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil))) @ (SUCC (SUCC (ZERO))::(Nil)))
reverse (((((reverse (((ZERO::(SUCC (ZERO)::(Nil))) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (reverse (((((reverse ((ZERO::(SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.001966 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 304


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg70:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg70) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg70) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 305


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 306


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg71:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg71) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg71) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (8::(Nil)), any_list2: (Nil), any_list3: (0::(8::(0::(Nil)))), arg71: (1::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg71: (5::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg71: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (1::(Nil))) @ (0::(8::(0::(Nil))))) @ (Nil)) @ (8::(Nil)))) = (reverse (((((reverse ((Nil)) @ (1::(Nil))) @ (0::(8::(0::(Nil))))) @ (Nil)) @ (8::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.004232 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 307


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg71:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg71) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg71) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 308


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg72:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg72) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg72) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg72: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (6::(Nil)), any_list2: (Nil), any_list3: (0::(Nil)), arg72: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg72: (3::(Nil)), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (6::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (6::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(ZERO::(Nil)))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002464 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 309


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg72:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg72) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg72) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 310


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 311


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg73:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg73) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg73) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg73: (Nil), nat1: SUCC (SUCC (ZERO)), nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg73: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg73: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((ZERO::(Nil)) @ (SUCC (SUCC (ZERO))::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (SUCC (ZERO))::(Nil)))
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000966 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 312


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg73:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg73) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg73) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 313


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg74:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg74) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg74) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (8::(Nil)), any_list2: (Nil), any_list3: (Nil), arg74: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg74: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (5::(Nil)), any_list3: (Nil), arg74: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001048 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 314


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg74:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg74) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg74) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 315


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg75:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg75) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg75) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg75: (0::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (3::(Nil)), any_list3: (Nil), arg75: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg75: (Nil), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001390 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 316


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg75:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg75) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg75) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 317


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg76:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg76) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg76) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg76: (5::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg76: (5::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg76: (0::(Nil)), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001479 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 318


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg76:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg76) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg76) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 319


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat_list1(rank : 10)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 320


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((Nil)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 321


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse ((nat2::nat_list2)) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro any_list1(rank:9)
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 322


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro any_list2(rank:9)
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 323


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 324


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 325


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg77:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg77) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg77) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (3::(4::(5::(Nil)))), any_list3: (Nil), arg77: (7::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg77: (2::(Nil)), nat1: ZERO, nat_list2: (SUCC (ZERO)::(Nil))
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (Nil), arg77: (Nil), nat1: SUCC (SUCC (ZERO)), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (7::(Nil))) @ (Nil)) @ (3::(4::(5::(Nil))))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (7::(Nil))) @ (Nil)) @ (3::(4::(5::(Nil))))) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((SUCC (ZERO)::(Nil)) @ (ZERO::(Nil)))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((SUCC (ZERO)::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (SUCC (ZERO))::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) @ (SUCC (SUCC (ZERO))::(Nil)))
Simplifying took 0.003734 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 326


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg77:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg77) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg77) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 327


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list2(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro any_list3(rank:9)
intro nat1(rank:9)
=================================================
Progress: 328


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 329


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg78:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg78) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg78) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (4::(Nil)), any_list3: (Nil), arg78: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg78: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (4::(7::(Nil))), any_list2: (0::(Nil)), any_list3: (Nil), arg78: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (4::(7::(Nil))))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (4::(7::(Nil))))) @ (ZERO::(Nil)))
Simplifying took 0.001879 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 330


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg78:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg78) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg78) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 331


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 332


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg79:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg79) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg79) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg79: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (2::(Nil)), any_list3: (Nil), arg79: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg79: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000608 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 333


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg79:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg79) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg79) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 334


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg80:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg80) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg80) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg80: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg80: (Nil), nat1: ZERO, nat_list2: (SUCC (ZERO)::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg80: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((SUCC (ZERO)::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((SUCC (ZERO)::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000863 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 335


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg80:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg80) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg80) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 336


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro any_list3(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 337


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg81:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg81) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg81) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (0::(7::(Nil))), arg81: (Nil), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Model : any_list1: (7::(Nil)), any_list2: (Nil), any_list3: (Nil), arg81: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (6::(4::(Nil))), any_list3: (1::(Nil)), arg81: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (0::(7::(Nil)))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(ZERO::(Nil)))) @ (Nil)) @ (0::(7::(Nil)))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil)))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil)))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (1::(Nil))) @ (6::(4::(Nil)))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (1::(Nil))) @ (6::(4::(Nil)))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.004248 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 338


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg81:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg81) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg81) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 339


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg82:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg82) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg82) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (2::(0::(Nil))), any_list3: (Nil), arg82: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg82: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (3::(Nil)), any_list2: (0::(Nil)), any_list3: (Nil), arg82: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (2::(0::(Nil)))) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (2::(0::(Nil)))) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (3::(Nil)))) = (reverse (((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (3::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.001687 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 340


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg82:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg82) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg82) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 341


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg83:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg83) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg83) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg83: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg83: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg83: (2::(Nil)), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.000752 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 342


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg83:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg83) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg83) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 343


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg84:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg84) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg84) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (8::(8::(Nil))), any_list2: (Nil), any_list3: (Nil), arg84: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), arg84: (Nil), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (4::(Nil)), arg84: (3::(Nil)), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse (((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(8::(Nil))))) = (reverse (((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(8::(Nil))))) @ (SUCC (ZERO)::(Nil)))
reverse (((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse (((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (3::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil))) = (reverse (((((reverse ((ZERO::(Nil))) @ (3::(Nil))) @ (4::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.003317 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 344


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat) (nat_list1:nat list), reverse ((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list1) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((reverse (nat_list2) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (arg84:any list) (nat1:nat) (nat_list2:nat list), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg84) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ arg84) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:12)
=================================================
Progress: 345


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat_list1(rank : 12)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((Nil)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 346


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((Nil)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((nat2::nat_list2)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 347


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((nat2::nat_list2)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
intro any_list1(rank:11)
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
intro any_list2(rank:11)
=================================================
Progress: 348


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
intro any_list2(rank:11)
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 349


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list2(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 350


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 351


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 352


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg85:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg85) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg85) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg85: (5::(4::(Nil))), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg85: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (2::(0::(Nil))), any_list3: (Nil), any_list4: (5::(Nil)), arg85: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (5::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (5::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (2::(0::(Nil)))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (2::(0::(Nil)))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.003642 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 353


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg85:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg85) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg85) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 354


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list2(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 355


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 356


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 357


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg86:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg86) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg86) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (2::(Nil)), any_list3: (Nil), any_list4: (Nil), arg86: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (5::(6::(Nil))), any_list2: (Nil), any_list3: (Nil), any_list4: (7::(Nil)), arg86: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (0::(3::(Nil))), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg86: (0::(Nil)), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (5::(6::(Nil))))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (5::(6::(Nil))))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(3::(Nil))))) = (reverse ((((((reverse ((Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(3::(Nil))))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.002856 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 358


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg86:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg86) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg86) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 359


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 360


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 361


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg87:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg87) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg87) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg87: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg87: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg87: (Nil), nat1: ZERO, nat_list2: (SUCC (ZERO)::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((SUCC (ZERO)::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((SUCC (ZERO)::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000753 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 362


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg87:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg87) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg87) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 363


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 364


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg88:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg88) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg88) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (0::(0::(3::(Nil)))), any_list3: (Nil), any_list4: (Nil), arg88: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (6::(Nil)), any_list3: (Nil), any_list4: (Nil), arg88: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (0::(Nil)), arg88: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(0::(3::(Nil))))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(0::(3::(Nil))))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001714 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 365


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg88:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg88) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg88) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 366


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg89:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg89) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg89) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (3::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (6::(0::(0::(Nil)))), arg89: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (2::(0::(Nil))), arg89: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (Nil), any_list4: (Nil), arg89: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (6::(0::(0::(Nil))))) @ (Nil)) @ (Nil)) @ (3::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (6::(0::(0::(Nil))))) @ (Nil)) @ (Nil)) @ (3::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (2::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (2::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002963 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 367


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg89:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg89) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg89) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 368


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 369


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 370


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg90:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg90) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg90) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg90: (5::(Nil)), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg90: (3::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (4::(Nil)), any_list3: (Nil), any_list4: (Nil), arg90: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001562 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 371


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg90:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg90) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg90) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 372


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 373


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg91:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg91) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg91) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg91: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (4::(Nil)), any_list4: (Nil), arg91: (Nil), nat1: ZERO, nat_list2: (SUCC (ZERO)::(ZERO::(ZERO::(Nil))))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg91: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((SUCC (ZERO)::(ZERO::(ZERO::(Nil)))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((SUCC (ZERO)::(ZERO::(ZERO::(Nil))))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002575 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 374


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg91:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg91) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg91) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 375


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg92:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg92) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg92) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (1::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg92: (Nil), nat1: SUCC (ZERO), nat_list2: (ZERO::(ZERO::(ZERO::(Nil))))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg92: (8::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg92: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(ZERO::(ZERO::(Nil)))) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) = (reverse ((((((reverse ((ZERO::(ZERO::(ZERO::(Nil))))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.003016 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 376


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg92:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg92) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg92) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 377


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 378


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg93:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg93) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg93) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg93: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg93: (3::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg93: (1::(Nil)), nat1: ZERO, nat_list2: (SUCC (ZERO)::(SUCC (SUCC (ZERO))::(Nil)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((SUCC (ZERO)::(SUCC (SUCC (ZERO))::(Nil))) @ (ZERO::(Nil)))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((SUCC (ZERO)::(SUCC (SUCC (ZERO))::(Nil)))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002532 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 379


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg93:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg93) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg93) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 380


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg94:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg94) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg94) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (0::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg94: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (8::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (2::(Nil)), arg94: (Nil), nat1: SUCC (ZERO), nat_list2: (ZERO::(Nil))
Model : any_list1: (6::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg94: (0::(7::(Nil))), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (8::(Nil)))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (8::(Nil)))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (0::(7::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (0::(7::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.003672 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 381


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg94:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg94) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg94) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 382


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg95:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg95) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg95) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (6::(Nil)), any_list4: (1::(8::(Nil))), arg95: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg95: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (6::(Nil)), arg95: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (1::(8::(Nil)))) @ (6::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (1::(8::(Nil)))) @ (6::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.003675 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 383


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg95:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg95) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg95) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 384


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 385


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg96:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg96) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg96) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (7::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg96: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (1::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg96: (Nil), nat1: ZERO, nat_list2: (SUCC (ZERO)::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg96: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((SUCC (ZERO)::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) = (reverse ((((((reverse ((SUCC (ZERO)::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.001274 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 386


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg96:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg96) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg96) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 387


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg97:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg97) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg97) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (8::(0::(Nil))), arg97: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (8::(Nil)), any_list3: (Nil), any_list4: (Nil), arg97: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg97: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (8::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (8::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002201 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 388


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg97:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg97) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg97) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 389


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg98:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg98) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg98) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg98: (6::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg98: (7::(0::(3::(Nil)))), nat1: ZERO, nat_list2: (SUCC (ZERO)::(Nil))
Model : any_list1: (8::(0::(Nil))), any_list2: (Nil), any_list3: (7::(Nil)), any_list4: (0::(4::(Nil))), arg98: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((SUCC (ZERO)::(Nil)) @ (ZERO::(Nil)))) @ (7::(0::(3::(Nil))))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((SUCC (ZERO)::(Nil))) @ (7::(0::(3::(Nil))))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (0::(4::(Nil)))) @ (7::(Nil))) @ (Nil)) @ (8::(0::(Nil))))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (0::(4::(Nil)))) @ (7::(Nil))) @ (Nil)) @ (8::(0::(Nil))))) @ (ZERO::(Nil)))
Simplifying took 0.007044 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 390


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg98:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg98) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg98) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 391


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg99:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg99) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg99) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (Nil), any_list4: (Nil), arg99: (0::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg99: (5::(0::(Nil))), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (0::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg99: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (5::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.002490 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 392


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg99:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg99) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg99) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 393


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg100:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg100) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg100) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (6::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg100: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (8::(Nil)), any_list4: (Nil), arg100: (Nil), nat1: ZERO, nat_list2: (SUCC (SUCC (SUCC (ZERO)))::(ZERO::(ZERO::(ZERO::(Nil)))))
Model : any_list1: (Nil), any_list2: (1::(Nil)), any_list3: (Nil), any_list4: (Nil), arg100: (5::(Nil)), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((SUCC (SUCC (SUCC (ZERO)))::(ZERO::(ZERO::(ZERO::(Nil))))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((SUCC (SUCC (SUCC (ZERO)))::(ZERO::(ZERO::(ZERO::(Nil)))))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.005311 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 394


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg100:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg100) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg100) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 395


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat_list1(rank : 12)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((Nil)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 396


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((Nil)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((nat2::nat_list2)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 397


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((nat2::nat_list2)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
intro any_list1(rank:11)
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
intro any_list2(rank:11)
=================================================
Progress: 398


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
intro any_list2(rank:11)
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 399


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list2(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 400


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 401


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 402


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg101:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg101) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg101) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg101: (Nil), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Model : any_list1: (4::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg101: (Nil), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg101: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) = (reverse ((((((reverse ((ZERO::(ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002052 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 403


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg101:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg101) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg101) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 404


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list2(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 405


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 406


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 407


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg102:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg102) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg102) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (7::(Nil)), arg102: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg102: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (0::(Nil)), any_list2: (4::(Nil)), any_list3: (Nil), any_list4: (3::(6::(Nil))), arg102: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (3::(6::(Nil)))) @ (Nil)) @ (4::(Nil))) @ (0::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (3::(6::(Nil)))) @ (Nil)) @ (4::(Nil))) @ (0::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.003142 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 408


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg102:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg102) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg102) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 409


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 410


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 411


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg103:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg103) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg103) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (3::(Nil)), arg103: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (0::(Nil)), arg103: (5::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (3::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg103: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (5::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil)))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.002102 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 412


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg103:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg103) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg103) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 413


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 414


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg104:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg104) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg104) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (4::(0::(Nil))), any_list4: (Nil), arg104: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg104: (3::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg104: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (4::(0::(Nil)))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (4::(0::(Nil)))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.001589 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 415


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg104:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg104) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg104) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 416


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg105:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg105) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg105) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg105: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg105: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg105: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000995 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 417


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg105:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg105) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg105) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 418


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 419


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 420


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg106:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg106) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg106) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (7::(Nil)), arg106: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (4::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg106: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg106: (Nil), nat1: ZERO, nat_list2: (SUCC (ZERO)::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((SUCC (ZERO)::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((SUCC (ZERO)::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001439 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 421


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg106:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg106) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg106) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 422


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 423


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg107:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg107) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg107) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (0::(2::(Nil))), any_list3: (Nil), any_list4: (Nil), arg107: (0::(Nil)), nat1: SUCC (ZERO), nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg107: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (2::(Nil)), any_list3: (Nil), any_list4: (Nil), arg107: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(Nil)) @ (SUCC (ZERO)::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (0::(2::(Nil)))) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (0::(2::(Nil)))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.002349 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 424


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg107:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg107) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg107) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 425


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg108:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg108) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg108) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (7::(1::(0::(0::(Nil))))), arg108: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (7::(Nil)), any_list3: (Nil), any_list4: (0::(Nil)), arg108: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (Nil), any_list4: (Nil), arg108: (Nil), nat1: SUCC (SUCC (ZERO)), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (7::(1::(0::(0::(Nil)))))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (7::(1::(0::(0::(Nil)))))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (7::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (SUCC (ZERO))::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) @ (SUCC (SUCC (ZERO))::(Nil)))
Simplifying took 0.004412 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 426


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg108:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg108) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg108) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 427


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 428


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg109:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg109) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg109) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg109: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (Nil), any_list4: (Nil), arg109: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg109: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000541 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 429


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg109:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg109) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg109) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 430


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg110:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg110) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg110) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg110: (5::(5::(6::(Nil)))), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (0::(Nil)), any_list4: (Nil), arg110: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg110: (0::(Nil)), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(5::(6::(Nil))))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (5::(5::(6::(Nil))))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (0::(Nil))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.003798 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 431


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg110:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg110) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg110) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 432


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg111:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg111) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg111) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (6::(Nil)), any_list2: (7::(Nil)), any_list3: (5::(Nil)), any_list4: (2::(Nil)), arg111: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg111: (5::(0::(Nil))), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg111: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (2::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (6::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (2::(Nil))) @ (5::(Nil))) @ (7::(Nil))) @ (6::(Nil)))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (5::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.003924 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 433


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg111:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg111) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg111) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 434


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 435


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg112:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg112) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg112) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (8::(Nil)), any_list4: (Nil), arg112: (0::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg112: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (5::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg112: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (0::(Nil))) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil)))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.002127 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 436


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg112:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg112) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg112) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 437


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg113:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg113) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg113) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (3::(3::(6::(Nil)))), arg113: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (4::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg113: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg113: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (3::(3::(6::(Nil))))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (3::(3::(6::(Nil))))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.003501 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 438


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg113:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg113) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg113) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 439


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg114:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg114) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg114) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (0::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (0::(Nil)), arg114: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (4::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg114: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (8::(Nil)), any_list3: (Nil), any_list4: (Nil), arg114: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001383 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 440


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg114:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg114) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg114) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 441


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg115:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg115) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg115) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (5::(Nil)), any_list4: (Nil), arg115: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (0::(Nil)), any_list4: (Nil), arg115: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg115: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000957 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 442


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg115:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg115) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg115) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 443


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg116:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg116) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg116) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg116: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg116: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (6::(0::(Nil))), any_list3: (6::(Nil)), any_list4: (Nil), arg116: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (6::(0::(Nil)))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (6::(0::(Nil)))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001800 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 444


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg116:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg116) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg116) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 445


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat_list1(rank : 12)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((Nil)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 446


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((Nil)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((nat2::nat_list2)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 447


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((nat2::nat_list2)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
intro any_list1(rank:11)
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
intro any_list2(rank:11)
=================================================
Progress: 448


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
intro any_list2(rank:11)
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 449


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list2(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 450


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 451


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 452


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg117:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg117) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg117) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (8::(Nil)), any_list2: (0::(Nil)), any_list3: (Nil), any_list4: (Nil), arg117: (2::(Nil)), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg117: (Nil), nat1: SUCC (ZERO), nat_list2: (ZERO::(ZERO::(ZERO::(ZERO::(Nil)))))
Model : any_list1: (6::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg117: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (8::(Nil)))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (8::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(ZERO::(ZERO::(ZERO::(Nil))))) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(ZERO::(ZERO::(ZERO::(Nil)))))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.004382 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 453


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg117:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg117) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg117) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 454


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list2(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 455


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 456


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 457


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg118:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg118) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg118) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg118: (4::(Nil)), nat1: ZERO, nat_list2: (ZERO::(SUCC (ZERO)::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg118: (5::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (8::(Nil)), any_list4: (Nil), arg118: (Nil), nat1: SUCC (ZERO), nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(SUCC (ZERO)::(Nil))) @ (ZERO::(Nil)))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(SUCC (ZERO)::(Nil)))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.003420 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 458


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg118:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg118) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg118) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 459


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 460


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 461


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg119:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg119) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg119) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (4::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg119: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (5::(Nil)), any_list3: (Nil), any_list4: (Nil), arg119: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (5::(Nil)), arg119: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001745 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 462


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg119:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg119) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg119) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 463


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 464


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg120:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg120) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg120) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg120: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (5::(Nil)), any_list3: (Nil), any_list4: (Nil), arg120: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (3::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg120: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil)))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.001303 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 465


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg120:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg120) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg120) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 466


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg121:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg121) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg121) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg121: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (5::(Nil)), arg121: (Nil), nat1: ZERO, nat_list2: (SUCC (SUCC (ZERO))::(Nil))
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (Nil), any_list4: (Nil), arg121: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((SUCC (SUCC (ZERO))::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((SUCC (SUCC (ZERO))::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.001786 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 467


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg121:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg121) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg121) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 468


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 469


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 470


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg122:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg122) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg122) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (8::(Nil)), any_list2: (7::(Nil)), any_list3: (Nil), any_list4: (3::(Nil)), arg122: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (4::(Nil)), any_list3: (Nil), any_list4: (Nil), arg122: (0::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (7::(7::(Nil))), any_list4: (Nil), arg122: (Nil), nat1: SUCC (ZERO), nat_list2: (SUCC (ZERO)::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (7::(Nil))) @ (8::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (7::(Nil))) @ (8::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((SUCC (ZERO)::(Nil)) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (7::(7::(Nil)))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((SUCC (ZERO)::(Nil))) @ (Nil)) @ (Nil)) @ (7::(7::(Nil)))) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.004666 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 471


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg122:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg122) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg122) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 472


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 473


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg123:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg123) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg123) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (1::(Nil)), arg123: (Nil), nat1: ZERO, nat_list2: (SUCC (ZERO)::(Nil))
Model : any_list1: (Nil), any_list2: (3::(Nil)), any_list3: (Nil), any_list4: (Nil), arg123: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg123: (Nil), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((SUCC (ZERO)::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((SUCC (ZERO)::(Nil))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001917 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 474


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg123:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg123) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg123) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 475


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg124:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg124) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg124) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg124: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (8::(Nil)), any_list3: (Nil), any_list4: (Nil), arg124: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (2::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg124: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.001050 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 476


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg124:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg124) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg124) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 477


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 478


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg125:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg125) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg125) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (4::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (1::(Nil)), arg125: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (0::(Nil)), arg125: (7::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (1::(Nil)), arg125: (3::(Nil)), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (4::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (7::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (7::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (3::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (3::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002860 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 479


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg125:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg125) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg125) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 480


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg126:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg126) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg126) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (8::(Nil)), any_list3: (Nil), any_list4: (Nil), arg126: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (1::(Nil)), any_list4: (Nil), arg126: (6::(5::(Nil))), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (2::(Nil)), arg126: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (6::(5::(Nil)))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (6::(5::(Nil)))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.003439 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 481


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg126:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg126) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg126) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 482


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg127:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg127) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg127) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (1::(0::(Nil))), arg127: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg127: (1::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg127: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (1::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (1::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.001320 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 483


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg127:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg127) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg127) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 484


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 485


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg128:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg128) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg128) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (4::(0::(Nil))), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg128: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (3::(8::(Nil))), any_list4: (Nil), arg128: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg128: (Nil), nat1: SUCC (ZERO), nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(0::(Nil))))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(0::(Nil))))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (3::(8::(Nil)))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (3::(8::(Nil)))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.002222 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 486


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg128:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg128) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg128) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 487


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg129:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg129) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg129) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg129: (Nil), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (Nil), any_list4: (Nil), arg129: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (0::(Nil)), any_list4: (Nil), arg129: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001811 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 488


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg129:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg129) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg129) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 489


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg130:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg130) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg130) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg130: (5::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg130: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg130: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001013 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 490


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg130:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg130) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg130) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 491


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg131:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg131) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg131) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg131: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg131: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg131: (1::(0::(Nil))), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (1::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (1::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001059 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 492


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg131:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg131) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg131) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 493


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg132:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg132) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg132) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg132: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (3::(6::(Nil))), any_list4: (Nil), arg132: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (4::(5::(Nil))), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg132: (1::(Nil)), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (3::(6::(Nil)))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (3::(6::(Nil)))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(5::(Nil))))) = (reverse ((((((reverse ((Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(5::(Nil))))) @ (ZERO::(Nil)))
Simplifying took 0.003120 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 494


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg132:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg132) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg132) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 495


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat_list1(rank : 12)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((Nil)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 496


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((Nil)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((nat2::nat_list2)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 497


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((nat2::nat_list2)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
intro any_list1(rank:11)
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
intro any_list2(rank:11)
=================================================
Progress: 498


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
intro any_list2(rank:11)
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 499


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list2(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 500


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 501


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 502


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg133:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg133) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg133) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (5::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg133: (6::(Nil)), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Model : any_list1: (Nil), any_list2: (3::(Nil)), any_list3: (Nil), any_list4: (Nil), arg133: (8::(Nil)), nat1: ZERO, nat_list2: (SUCC (ZERO)::(Nil))
Model : any_list1: (6::(0::(Nil))), any_list2: (Nil), any_list3: (Nil), any_list4: (0::(3::(Nil))), arg133: (0::(Nil)), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil)))) = (reverse ((((((reverse ((ZERO::(ZERO::(Nil)))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((SUCC (ZERO)::(Nil)) @ (ZERO::(Nil)))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) = (reverse ((((((reverse ((SUCC (ZERO)::(Nil))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (0::(3::(Nil)))) @ (Nil)) @ (Nil)) @ (6::(0::(Nil))))) = (reverse ((((((reverse ((ZERO::(ZERO::(Nil)))) @ (0::(Nil))) @ (0::(3::(Nil)))) @ (Nil)) @ (Nil)) @ (6::(0::(Nil))))) @ (ZERO::(Nil)))
Simplifying took 0.009756 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 503


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg133:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg133) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg133) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 504


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list2(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 505


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 506


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 507


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg134:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg134) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg134) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg134: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (0::(3::(Nil))), any_list4: (2::(Nil)), arg134: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (4::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg134: (5::(3::(Nil))), nat1: SUCC (ZERO), nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (2::(Nil))) @ (0::(3::(Nil)))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (2::(Nil))) @ (0::(3::(Nil)))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (SUCC (ZERO)::(Nil)))) @ (5::(3::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (5::(3::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.004432 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 508


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg134:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg134) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg134) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 509


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 510


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 511


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg135:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg135) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg135) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (3::(8::(Nil))), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg135: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (6::(Nil)), any_list2: (8::(Nil)), any_list3: (Nil), any_list4: (Nil), arg135: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (3::(Nil)), arg135: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(8::(Nil))))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(8::(Nil))))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (6::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (6::(Nil)))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002667 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 512


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg135:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg135) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg135) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 513


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 514


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg136:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg136) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg136) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (0::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg136: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (5::(Nil)), any_list4: (4::(Nil)), arg136: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg136: (Nil), nat1: SUCC (SUCC (ZERO)), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (4::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (4::(Nil))) @ (5::(Nil))) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (SUCC (ZERO))::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (SUCC (ZERO))::(Nil)))
Simplifying took 0.001645 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 515


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg136:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg136) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg136) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 516


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg137:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg137) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg137) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (Nil), any_list4: (Nil), arg137: (Nil), nat1: ZERO, nat_list2: (SUCC (ZERO)::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg137: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (6::(Nil)), any_list4: (Nil), arg137: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((SUCC (ZERO)::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (reverse ((((((reverse ((SUCC (ZERO)::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001589 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 517


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg137:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg137) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg137) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 518


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 519


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 520


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg138:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg138) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg138) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (8::(Nil)), any_list4: (Nil), arg138: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (1::(Nil)), any_list3: (Nil), any_list4: (Nil), arg138: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (1::(4::(Nil))), arg138: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (1::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (1::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001960 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 521


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg138:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg138) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg138) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 522


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 523


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg139:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg139) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg139) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg139: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg139: (Nil), nat1: SUCC (SUCC (ZERO)), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (4::(Nil)), any_list3: (Nil), any_list4: (5::(Nil)), arg139: (2::(Nil)), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (SUCC (ZERO))::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (SUCC (ZERO))::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (2::(Nil))) @ (5::(Nil))) @ (Nil)) @ (4::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (2::(Nil))) @ (5::(Nil))) @ (Nil)) @ (4::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002196 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 524


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg139:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg139) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg139) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 525


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg140:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg140) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg140) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg140: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg140: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg140: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000456 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 526


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg140:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg140) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg140) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 527


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 528


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg141:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg141) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg141) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (1::(Nil)), arg141: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg141: (8::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (0::(Nil)), any_list2: (Nil), any_list3: (6::(Nil)), any_list4: (Nil), arg141: (1::(Nil)), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (1::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (0::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (1::(Nil))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (0::(Nil)))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.002564 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 529


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg141:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg141) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg141) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 530


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg142:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg142) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg142) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg142: (Nil), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg142: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (4::(Nil)), arg142: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001386 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 531


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg142:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg142) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg142) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 532


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg143:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg143) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg143) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (2::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg143: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (8::(8::(Nil))), any_list4: (Nil), arg143: (0::(Nil)), nat1: SUCC (ZERO), nat_list2: (ZERO::(SUCC (ZERO)::(ZERO::(Nil))))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg143: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(SUCC (ZERO)::(ZERO::(Nil)))) @ (SUCC (ZERO)::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (8::(8::(Nil)))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(SUCC (ZERO)::(ZERO::(Nil))))) @ (0::(Nil))) @ (Nil)) @ (8::(8::(Nil)))) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.005728 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 533


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg143:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg143) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg143) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 534


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 535


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg144:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg144) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg144) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (0::(Nil)), any_list4: (Nil), arg144: (0::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg144: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (6::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg144: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (0::(Nil))) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.001040 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 536


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg144:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg144) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg144) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 537


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg145:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg145) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg145) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg145: (Nil), nat1: SUCC (ZERO), nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg145: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg145: (0::(Nil)), nat1: SUCC (SUCC (ZERO)), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(Nil)) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (SUCC (ZERO))::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (SUCC (ZERO))::(Nil)))
Simplifying took 0.001222 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 538


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg145:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg145) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg145) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 539


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg146:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg146) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg146) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (0::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg146: (3::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (1::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg146: (Nil), nat1: SUCC (ZERO), nat_list2: (ZERO::(ZERO::(Nil)))
Model : any_list1: (4::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg146: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(ZERO::(Nil))) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) = (reverse ((((((reverse ((ZERO::(ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil)))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.002195 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 540


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg146:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg146) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg146) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 541


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg147:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg147) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg147) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg147: (1::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg147: (1::(Nil)), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg147: (6::(Nil)), nat1: ZERO, nat_list2: (SUCC (ZERO)::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((SUCC (ZERO)::(Nil)) @ (ZERO::(Nil)))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((SUCC (ZERO)::(Nil))) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002143 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 542


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg147:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg147) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg147) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 543


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg148:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg148) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg148) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (Nil), any_list4: (Nil), arg148: (1::(Nil)), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (6::(Nil)), arg148: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (3::(Nil)), any_list3: (6::(Nil)), any_list4: (7::(0::(5::(Nil)))), arg148: (8::(Nil)), nat1: SUCC (SUCC (ZERO)), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (1::(Nil))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (SUCC (ZERO))::(Nil)))) @ (8::(Nil))) @ (7::(0::(5::(Nil))))) @ (6::(Nil))) @ (3::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (8::(Nil))) @ (7::(0::(5::(Nil))))) @ (6::(Nil))) @ (3::(Nil))) @ (Nil))) @ (SUCC (SUCC (ZERO))::(Nil)))
Simplifying took 0.008209 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 544


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg148:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg148) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg148) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 545


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat_list1(rank : 12)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((Nil)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 546


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((Nil)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((nat2::nat_list2)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 547


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((nat2::nat_list2)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
intro any_list1(rank:11)
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
intro any_list2(rank:11)
=================================================
Progress: 548


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
intro any_list2(rank:11)
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 549


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list2(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 550


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 551


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 552


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg149:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg149) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg149) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (8::(Nil)), any_list4: (Nil), arg149: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg149: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg149: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.000871 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 553


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg149:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg149) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg149) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 554


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list2(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 555


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 556


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 557


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg150:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg150) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg150) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg150: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (0::(Nil)), any_list2: (8::(Nil)), any_list3: (Nil), any_list4: (Nil), arg150: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg150: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (0::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (0::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.001138 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 558


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg150:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg150) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg150) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 559


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 560


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 561


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg151:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg151) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg151) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (5::(2::(Nil))), any_list3: (4::(Nil)), any_list4: (Nil), arg151: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (4::(4::(Nil))), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg151: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (8::(Nil)), any_list2: (8::(Nil)), any_list3: (Nil), any_list4: (Nil), arg151: (8::(Nil)), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (5::(2::(Nil)))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (5::(2::(Nil)))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(4::(Nil))))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(4::(Nil))))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (8::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (8::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.004166 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 562


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg151:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg151) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg151) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 563


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 564


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg152:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg152) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg152) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (0::(Nil)), any_list2: (Nil), any_list3: (3::(Nil)), any_list4: (Nil), arg152: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (1::(Nil)), any_list4: (Nil), arg152: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (6::(Nil)), any_list2: (Nil), any_list3: (1::(Nil)), any_list4: (Nil), arg152: (Nil), nat1: SUCC (SUCC (ZERO)), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (0::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (0::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (SUCC (ZERO))::(Nil)))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (6::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (Nil)) @ (6::(Nil)))) @ (SUCC (SUCC (ZERO))::(Nil)))
Simplifying took 0.001748 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 565


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg152:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg152) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg152) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 566


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg153:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg153) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg153) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg153: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (7::(Nil)), any_list2: (Nil), any_list3: (2::(Nil)), any_list4: (Nil), arg153: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (2::(Nil)), any_list2: (8::(Nil)), any_list3: (Nil), any_list4: (Nil), arg153: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (7::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (2::(Nil))) @ (Nil)) @ (7::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (2::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil))) @ (2::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.001792 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 567


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg153:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg153) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg153) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 568


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 569


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 570


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg154:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg154) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg154) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg154: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (8::(Nil)), arg154: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg154: (5::(0::(Nil))), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (5::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002011 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 571


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg154:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg154) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg154) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 572


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 573


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg155:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg155) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg155) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg155: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (0::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg155: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (2::(Nil)), any_list4: (8::(8::(1::(Nil)))), arg155: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (8::(8::(1::(Nil))))) @ (2::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (8::(8::(1::(Nil))))) @ (2::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.003551 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 574


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg155:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg155) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg155) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 575


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg156:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg156) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg156) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (7::(Nil)), any_list4: (3::(Nil)), arg156: (3::(Nil)), nat1: SUCC (ZERO), nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (3::(Nil)), any_list4: (Nil), arg156: (6::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (5::(Nil)), any_list4: (Nil), arg156: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(Nil)) @ (SUCC (ZERO)::(Nil)))) @ (3::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (3::(Nil))) @ (3::(Nil))) @ (7::(Nil))) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (6::(Nil))) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (6::(Nil))) @ (Nil)) @ (3::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.005352 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 576


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg156:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg156) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg156) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 577


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 578


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg157:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg157) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg157) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (4::(Nil)), arg157: (0::(0::(Nil))), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg157: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (8::(Nil)), any_list3: (5::(Nil)), any_list4: (Nil), arg157: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (0::(0::(Nil)))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (0::(0::(Nil)))) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (8::(Nil))) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (8::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.003490 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 579


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg157:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg157) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg157) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 580


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg158:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg158) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg158) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (4::(Nil)), arg158: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg158: (5::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (Nil), any_list4: (Nil), arg158: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001901 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 581


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg158:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg158) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg158) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 582


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg159:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg159) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg159) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg159: (0::(Nil)), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (6::(Nil)), any_list3: (Nil), any_list4: (Nil), arg159: (7::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg159: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.002148 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 583


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg159:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg159) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg159) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 584


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 585


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg160:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg160) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg160) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (0::(Nil)), any_list2: (5::(Nil)), any_list3: (Nil), any_list4: (Nil), arg160: (0::(Nil)), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (3::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg160: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg160: (8::(Nil)), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (0::(Nil)))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (0::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (3::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (8::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002791 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 586


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg160:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg160) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg160) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 587


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg161:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg161) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg161) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (4::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg161: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (4::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg161: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (0::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg161: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.000999 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 588


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg161:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg161) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg161) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 589


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg162:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg162) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg162) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg162: (2::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg162: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (5::(Nil)), any_list4: (Nil), arg162: (1::(Nil)), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (1::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (1::(Nil))) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.002002 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 590


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg162:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg162) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg162) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 591


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg163:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg163) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg163) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (7::(0::(Nil))), arg163: (5::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (7::(Nil)), any_list4: (Nil), arg163: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (5::(Nil)), any_list4: (Nil), arg163: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (5::(Nil))) @ (7::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (5::(Nil))) @ (7::(0::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.002898 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 592


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg163:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg163) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg163) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 593


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro any_list3
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg164:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg164) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg164) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg164: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (2::(Nil)), any_list3: (4::(Nil)), any_list4: (Nil), arg164: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg164: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (2::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (2::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001133 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 594


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg164:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg164) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg164) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 595


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> induction nat_list1(rank : 12)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((Nil)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 596


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((Nil) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((Nil)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((nat2::nat_list2)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 597


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse (((nat2::nat_list2) @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse ((nat2::nat_list2)) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
intro any_list1(rank:11)
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
intro any_list2(rank:11)
=================================================
Progress: 598


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
intro any_list2(rank:11)
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 599


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list2(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 600


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 601


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 602


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg165:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg165) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg165) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (3::(Nil)), any_list2: (Nil), any_list3: (8::(Nil)), any_list4: (6::(Nil)), arg165: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (7::(Nil)), any_list2: (0::(5::(Nil))), any_list3: (1::(Nil)), any_list4: (Nil), arg165: (Nil), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Model : any_list1: (6::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg165: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (6::(Nil))) @ (8::(Nil))) @ (Nil)) @ (3::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (6::(Nil))) @ (8::(Nil))) @ (Nil)) @ (3::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (0::(5::(Nil)))) @ (7::(Nil)))) = (reverse ((((((reverse ((ZERO::(ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (1::(Nil))) @ (0::(5::(Nil)))) @ (7::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) @ (ZERO::(Nil)))
Simplifying took 0.006886 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 603


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg165:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg165) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg165) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 604


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list2(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro any_list3(rank:11)
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 605


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 606


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 607


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg166:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg166) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg166) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg166: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (7::(1::(Nil))), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg166: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg166: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(1::(Nil))))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(1::(Nil))))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001554 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 608


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg166:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg166) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg166) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 609


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 610


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 611


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg167:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg167) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg167) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg167: (Nil), nat1: ZERO, nat_list2: (SUCC (ZERO)::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg167: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (4::(Nil)), any_list3: (Nil), any_list4: (Nil), arg167: (Nil), nat1: ZERO, nat_list2: (ZERO::(ZERO::(Nil)))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((SUCC (ZERO)::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((SUCC (ZERO)::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(ZERO::(Nil))) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil))) = (reverse ((((((reverse ((ZERO::(ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (4::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001886 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 612


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg167:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg167) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg167) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 613


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 614


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg168:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg168) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg168) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (7::(4::(Nil))), arg168: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg168: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (0::(Nil)), any_list4: (4::(Nil)), arg168: (6::(Nil)), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (7::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (7::(4::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (6::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (6::(Nil))) @ (4::(Nil))) @ (0::(Nil))) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.003114 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 615


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg168:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg168) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg168) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 616


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg169:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg169) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg169) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (6::(2::(Nil))), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg169: (2::(Nil)), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (0::(Nil)), any_list4: (Nil), arg169: (Nil), nat1: SUCC (ZERO), nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (0::(Nil)), any_list3: (Nil), any_list4: (Nil), arg169: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(2::(Nil))))) = (reverse ((((((reverse ((Nil)) @ (2::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(2::(Nil))))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil)) @ (Nil))) @ (SUCC (ZERO)::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (0::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001884 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 617


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg169:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg169) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg169) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 618


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list3(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro any_list4(rank:11)
intro nat1(rank:11)
=================================================
Progress: 619


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
any_list4 : any list
---------------------------------------
forall (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 620


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
---------------------------------------
forall (any_list3:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list2
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg170:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg170) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg170) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (8::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg170: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg170: (Nil), nat1: ZERO, nat_list2: (SUCC (ZERO)::(Nil))
Model : any_list1: (6::(Nil)), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg170: (Nil), nat1: SUCC (ZERO), nat_list2: (ZERO::(Nil))
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil)))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (8::(Nil)))) @ (ZERO::(Nil)))
reverse ((((((reverse (((SUCC (ZERO)::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((SUCC (ZERO)::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (SUCC (ZERO)::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (6::(Nil)))) @ (SUCC (ZERO)::(Nil)))
Simplifying took 0.001622 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 621


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list2 : any list
nat1 : nat
---------------------------------------
forall (any_list3:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg170:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg170) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg170) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 622


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11)
=================================================
Progress: 623


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
---------------------------------------
forall (any_list2:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list3
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg171:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg171) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg171) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (5::(Nil)), any_list3: (Nil), any_list4: (Nil), arg171: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg171: (Nil), nat1: ZERO, nat_list2: (ZERO::(Nil))
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg171: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (5::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((ZERO::(Nil)) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((ZERO::(Nil))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001353 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 624


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list3 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list4:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg171:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg171) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg171) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 625


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
---------------------------------------
forall (any_list2:any list) (any_list3:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any_list1
intro any_list4
intro nat1
validate generalize_common_subterm_goal
Lemma : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg172:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg172) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg172) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Model : any_list1: (Nil), any_list2: (2::(Nil)), any_list3: (Nil), any_list4: (6::(Nil)), arg172: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (Nil), any_list3: (Nil), any_list4: (Nil), arg172: (Nil), nat1: ZERO, nat_list2: (Nil)
Model : any_list1: (Nil), any_list2: (7::(Nil)), any_list3: (Nil), any_list4: (Nil), arg172: (Nil), nat1: ZERO, nat_list2: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec lst_subset lst1 lst2 =
match (lst1) with
| Nil -> true
| Cons x xs -> && (lst_subset (xs) (lst2)) (mem (x) (lst2))
let lst_eq lst1 lst2 =
&& (lst_subset (lst1) (lst2)) (lst_subset (lst2) (lst1))
prop list:
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (6::(Nil))) @ (Nil)) @ (2::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (Nil))) @ (ZERO::(Nil)))
reverse ((((((reverse (((Nil) @ (ZERO::(Nil)))) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil))) = (reverse ((((((reverse ((Nil)) @ (Nil)) @ (Nil)) @ (Nil)) @ (7::(Nil))) @ (Nil))) @ (ZERO::(Nil)))
Simplifying took 0.001556 seconds
Result : true
advanced_generalize done


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 626


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list1 : any list
any_list4 : any list
nat1 : nat
---------------------------------------
forall (any_list2:any list) (any_list3:any list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (arg172:any list) (nat1:nat) (nat_list2:nat list), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ arg172) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ arg172) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))(rank : 0)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

---------------------------------------
forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (any_list5:any list) (nat1:nat) (nat_list1:nat list), reverse ((((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list1) @ any_list5) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:14)
=================================================
Progress: 627


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
---------------------------------------
forall (any_list1:any list) (any_list4:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
>>> intro any_list4(rank : 11)


1st goal of : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat) (nat_list1:nat list), reverse (((((reverse ((nat_list1 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list1) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
nat_list1 : nat list
nat2 : nat
nat_list2 : nat list
IH1 : forall (any_list1:any list) (any_list2:any list) (any_list3:any list) (any_list4:any list) (nat1:nat), reverse (((((reverse ((nat_list2 @ (nat1::(Nil)))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse (((((reverse (nat_list2) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))
Inductive1 : nat_list1 = (nat2::nat_list2)
any_list2 : any list
any_list3 : any list
any_list4 : any list
---------------------------------------
forall (any_list1:any list) (nat1:nat), reverse ((((((reverse ((nat_list2 @ (nat1::(Nil)))) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) = (reverse ((((((reverse (nat_list2) @ (nat2::(Nil))) @ any_list4) @ any_list3) @ any_list2) @ any_list1)) @ (nat1::(Nil)))

0 goal(s) more...

4 conjecture(s) more...
Dilemma timed out for benchmark clam with problem 17.File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]

File "_none_", lines 88-90, characters 2-22:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
